<?MICOMMENT>
 FILE: secure_navigation.apg

 This file should be webexploded at the top of every stand alone page in ZFIN. 

 It figures out the real name of the requesting user (GUEST if not logged in)
 and the user's accessing level. 
 
 Without any security constraints(the optional permission parameter), 
 users are all granted access either as GUEST or the logged in user's
 pre-defined access level. If the user is the owner of the record, set
 $AUTHORIZED to owner unless the user is root. 

 With security constraints, 
   permission=owns should be companied with $OID and $rtype and the owner of 
      the record as well as root users got authorized.
   permission=root, root users got authorized.
 other users would fail the check and the AUTHROIZED variable
 would be set to false.
 When AUTHORIZED is false, unauth.apg would be called to display security 
 violation message. 

 old statement:
    This file should be webexploded at the top of every page in ZFIN.
 Is that so? 

 INPUT VARS:
   ZDB_authorize  -- cookie
   permission (optional) -- only owns and root have been used 
   OID (optional) -- OID of the record being displayed, along with permission=owns
   rtype (optional) -- record type, along with permission=owns

 OUTPUT VARS:
   AUTHORIZED  -- false, GUEST, zdb_submitter.access, or owner.
   ZDB_name  -- GUEST or user's real name

 NOTES:
   1)Previously, the page claims "This file should be webexploded at the top of 
   every page in ZFIN." Most of the times, we followed that. Now we question it.
   Pages call secure_navigation.apg half times without setting permission,
   and then every user gets authorized. Most of the times, calling page checks 
   if authorized equals false. You see, this doesn't make enough sense.
   2)The other half times, it is called with either "root" or
   "owns" permission (though we have 7 more levels to use). We will
   look into reducing the number of different levels, and grant access
   based on significance instead of could-be tedious conditional clause.
   3)Calling page checks whether AUTHORIZED is set to false, but that is of no
   use since this page calls unauth.apg, and didn't return the control.
   We are not going into every page and fix this issue now, but will 
   address it when switch language. 
<?/MICOMMENT>

<?MICOMMENT> 
  ============================================================
  === Initialization
  === by default, we welcome guest.
  ============================================================
<?/MICOMMENT>

<?MIVAR NAME=$AUTHORIZED>GUEST<?/MIVAR>
<?MIVAR NAME=$ZDB_name>UNKNOWN<?/MIVAR>

<?MIVAR NAME=$ZDB_access>GUEST<?/MIVAR>
<?MIVAR NAME=$DB_LOCK>f<?/MIVAR>


<?MICOMMENT> 
  ============================================================
  ===  No cookie
  === generate a new GUEST cookie, set $ZDB_name to the cookie
  ============================================================
<?/MICOMMENT>

<?MIBLOCK COND="$(NXST,$ZDB_authorize)">
  <?MIVAR NAME=ZDB_authorize><?/MIVAR>	
  <?MISQL SQL="
    execute function conc('GUEST',get_random_cookie());">
  <?/MISQL>  
  <?MIVAR>
    $(HTTPHEADER,set-cookie,ZDB_authorize=$1;path=/<!--|CGI_BIN_DIR_NAME|-->)
  <?/MIVAR>
  <?MIVAR NAME=$ZDB_name>$1<?/MIVAR>

  <?MICOMMENT>
    -------------------------------------
    -- When PERMISSION is set
    -- unauthorize
    -------------------------------------
  <?/MICOMMENT>
  <?MIBLOCK COND=$(AND,$(XST,$permission),$(NC,$permission,GUEST))>
     <?MIVAR>$(SETVAR, $AUTHORIZED,false)<?/MIVAR>
  <?/MIBLOCK>
<?/MIBLOCK>


<?MICOMMENT>
  ============================================================
  ===  GUEST cookie	
  === set $ZDB_name to the cookie
  ============================================================
<?/MICOMMENT>

<?MIBLOCK COND="$(AND,$(XST,$ZDB_authorize),$(EC,$(SUBSTR,$ZDB_authorize,1,5),GUEST))">
  <?MIVAR NAME=$ZDB_name>$ZDB_authorize<?/MIVAR>

  <?MICOMMENT>
    -------------------------------------
    -- When PERMISSION is set
    -- unauthorize
    -------------------------------------
  <?/MICOMMENT>
  <?MIBLOCK COND=$(AND,$(XST,$permission),$(NC,$permission,GUEST))>
     <?MIVAR>$(SETVAR, $AUTHORIZED,false)<?/MIVAR>
  <?/MIBLOCK>
<?/MIBLOCK>


<?MICOMMENT>
  ============================================================
  ===  Logged in user 	
  === 
  ============================================================
<?/MICOMMENT>

<?MIBLOCK COND=$(NC,$(SUBSTR,$ZDB_authorize,1,5),GUEST)>

  <?MICOMMENT> 
       ----------------------------
       --  check if updates are disabled 
       ----------------------------
  <?/MICOMMENT>
  <?MISQL SQL="
        select zflag_is_on
          from zdb_flag
         where zflag_name = 'disable updates';">
     <?MIVAR NAME=$DB_LOCK>$1<?/MIVAR>
  <?/MISQL>


  <?MIBLOCK COND=$(EC,$DB_LOCK,t)>
     <?MICOMMENT>
         ----------------------------------------------------------
         --     Updates are disabled. 
         --  Display alert and set user level to Guest.
         --  User may be on a page which allows updates so set page to homepage.
	 ----------------------------------------------------------
     <?/MICOMMENT>

     <SCRIPT>
	alert('The Database is currently locked for administrative operations and will not allow logins. Please try again later or contact <judys@cs.uoregon.edu> for further information.');
     </SCRIPT>

     <?MISQL SQL="
      execute function conc('GUEST',get_random_cookie());">
     <?/MISQL>
     <?MIVAR>
      $(HTTPHEADER,set-cookie,ZDB_authorize=$1;path=/<!--|CGI_BIN_DIR_NAME|-->)
     <?/MIVAR>

     <?MIVAR NAME=$ZDB_name>$1<?/MIVAR>

     <SCRIPT>
	window.location.replace("/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-ZDB_home.apg")
     </SCRIPT>

  <?MIELSE> 
     <?MICOMMENT>
	  -----------------------------------------------
          --- Updates enabled
	  -----------------------------------------------
     <?/MICOMMENT>

     <?MICOMMENT>--------------------------------------
	         -- pull out info from ZDB_submitters 
                 -- assign access level to $AUTHROIZED
                 ---------------------------------------
     <?/MICOMMENT>
     <?MISQL SQL="
           select zdb_id, access, name
     	     from ZDB_submitters 
	    where cookie='$ZDB_authorize';">
       <?MIVAR NAME=$ZDB_ident>$1<?/MIVAR>
       <?MIVAR NAME=$ZDB_access>$2<?/MIVAR>
       <?MIVAR NAME=$ZDB_name>$3<?/MIVAR>
     <?/MISQL>
     <?MIVAR>$(SETVAR, $AUTHORIZED,$ZDB_access)<?/MIVAR>

     <?MICOMMENT>
        ------------------------------------------------------------------------
        -- Get record owner and compare to ZDB_ident. If you own the record, you 
        -- get 'owner' authorization 
        -- Most tables have "owner" as the owner column and zdb_id as the ZDB
        -- ID column.  There are a few exceptions, however.  Catch them.
	------------------------------------------------------------------------
      <?/MICOMMENT>
      <?MIBLOCK COND="$(AND,$(XST,$OID),$(XST,$rtype),$(NC,$rtype,journal))">
        <?MIVAR NAME=$ownerColumn>owner<?/MIVAR>
        <?MIVAR NAME=$zdbIdColumn>zdb_id<?/MIVAR>
        <?MIBLOCK COND="$(EC,$rtype,marker)">
	  <?MIVAR NAME=$ownerColumn>mrkr_owner<?/MIVAR>
	  <?MIVAR NAME=$zdbIdColumn>mrkr_zdb_id<?/MIVAR>
        <?MIELSE COND="$(EC,$rtype,fish_image)">
	  <?MIVAR NAME=$ownerColumn>fimg_owner_zdb_id<?/MIVAR>
	  <?MIVAR NAME=$zdbIdColumn>fimg_zdb_id<?/MIVAR>
        <?/MIBLOCK>
        <?MISQL SQL="
	    select $ownerColumn
	      from $rtype 
	     where $zdbIdColumn = '$OID';">
        <?/MISQL>
        <?MIVAR COND="$(AND,$(XST,$ZDB_ident),$(EC,$1,$ZDB_ident))">
	    $(SETVAR,$AUTHORIZED,owner)
        <?/MIVAR>
      <?/MIBLOCK> <?MICOMMENT>-- end of record ownership check --<?/MICOMMENT>


      <?MICOMMENT>
        ------------------------------------------------
        -- adminasst scenario
        ------------------------------------------------
      <?/MICOMMENT>        
      <?MIBLOCK COND="$(AND,$(EC,$ZDB_access,adminasst),$(XST,$rtype))">
         <?MIVAR COND="$(OR,$(EC,$rtype,person),$(EC,$rtype,lab))">
	   $(SETVAR,$AUTHORIZED,owner)
         <?/MIVAR>
      <?/MIBLOCK>

      <?MICOMMENT>
	------------------------------------------------
	-- root user got authorized
	------------------------------------------------
      <?/MICOMMENT>   
      <?MIVAR COND="$(AND,$(XST,$ZDB_access),$(EC,$ZDB_access,root))">
	 $(SETVAR,$AUTHORIZED,root)
      <?/MIVAR>

      <?MICOMMENT>
           ---------------------------
           --- When PERMISSION is set
           --- either owns or root
           ---------------------------
      <?/MICOMMENT>
      <?MIBLOCK COND="$(AND,$(XST,$permission),$(EC,$permission,owns))"> 
	 <?MIVAR COND="$(AND,$(NC,$AUTHORIZED,owner),$(NC,$AUTHORIZED,root))">
	     $(SETVAR,$AUTHORIZED,false)
         <?/MIVAR>
      <?/MIBLOCK>
      <?MIBLOCK COND="$(AND,$(XST,$permission),$(EC,$permission,root))"> 
	 <?MIVAR COND="$(NC,$AUTHORIZED,root)">
	     $(SETVAR,$AUTHORIZED,false)
         <?/MIVAR>
      <?/MIBLOCK>

  <?/MIBLOCK> <?MICOMMENT> ===   end of $DB_LOCK check === <?/MICOMMENT>
<?/MIBLOCK> <?MICOMMENT> ===   end of log in user === <?/MICOMMENT>


<?MICOMMENT> 
     ============================================
     === If authorization fails, call unauth.apg. 
     ============================================
<?/MICOMMENT>

<?MIBLOCK COND="$(EC,$AUTHORIZED,false)">

      <?MISQL SQL="
	select WebExplode(object,'') 
	  from webPages
	  where ID='aa-unauth.apg';">
	$1
      <?/MISQL>

<?/MIBLOCK>  <?MICOMMENT> ends if no authorize cookie <?/MICOMMENT>
