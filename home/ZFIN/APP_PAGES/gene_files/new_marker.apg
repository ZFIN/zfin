<?MICOMMENT>

FILE: new_marker.apg
PREFIX: newmrkr_ 

DESCRIPTION:
This is the first page of entering a new marker into ZFIN., 

INPUT VARS:
  newmrkrSource  ::  option Pub Zdb id, attribute submitted data
  newmrkrDisplaySequence  ::  if exists, enter in marker_sequence
  newmrkrCuratorNote  ::  supporting text for sequence
  
OUTPUT VARS:

EFFECTS: Adds a new marker (currently, only genes, psuedogenes) to
marker table.  

<?/MICOMMENT>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
  <head>

<?MIBLOCK COND="$(XST,$mname)">
  <?MIVAR>  <TITLE>ZFIN Marker Added: $mname</TITLE>  <?/MIVAR>
<?MIELSE>
  <TITLE>ZFIN Add Marker</TITLE>
<?/MIBLOCK>

<?MIVAR COND="$(AND,$(NXST,$OID),$(XST,$temp_oid))" NAME=$OID>$temp_oid<?/MIVAR>



<?MISQL SQL="
  select WebExplode(object,'') 
    from webPages 
    where ID='aa-chromoscripts.apg';">
  $1
<?/MISQL>

  </head>


<?MISQL SQL="select WebExplode(object,'') from webPages where ID='aa-htmlpageheader.apg';">$1<?/MISQL>


<?MICOMMENT>
  -- new_marker.apg.   A very simple data entry page (because it does not 
  -- need to support digressions) to allow entry of new MARKER 
  -- records.

  -- VARS:
  -- marker_type -- if it doesn't exist, it starts by asking you this. 
  --                If it exists, prompt for appropriate info.
  -- s_new       -- if it exists, create new record and print a confirmation.
  -- Others      -- if s_new exists, then name, abbrev, comments should
  --                also exist.
  -- newmrkrSource -- if exists, must be a pub_zdb_id
<?/MICOMMENT>

<?MISQL SQL="
  select WebExplode(object,'page_title=New Marker&permission=root') 
    from webPages 
    where ID='aa-secure_navigation.apg';">$1
<?/MISQL>

<?MIBLOCK COND="$(NC,$AUTHORIZED,false)">

  <?MIBLOCK COND="$(NXST,$marker_type)">
    <h1>Create new marker</h1>

    <form name=newdata method=post action="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->">
      <input type=hidden name=MIval value=aa-new_marker.apg>
      <?MIVAR COND=$(XST,$newmrkrSource)><input type=hidden name=newmrkrSource value=$newmrkrSource><?/MIVAR>

      <b>Type of new marker to create:</b>
      <SELECT name=marker_type>
        <?MISQL SQL="
	   select mrkrtype_type_display, marker_type
	     from marker_types
	    where marker_type in (select distinct mtgrpmem_mrkr_type
				  from marker_type_group_member)
	   order by mrkrtype_type_display; ">
	  <option value=$2>$1
        <?/MISQL>	
      </SELECT>  

      <input type=submit value="create it">
    </form>
  <?/MIBLOCK>

  <?MIBLOCK COND="$(AND,$(XST,$marker_type),$(NXST,$s_new))">
     <?MISQL SQL=" select mrkrtype_type_display
                    from marker_types
                   where marker_type='$marker_type';">
      <?MIVAR NAME=marker_type_display>$1<?/MIVAR>
    <?/MISQL>

    <?MIVAR>
      <h1>Describe new $marker_type_display</h1>
    <?/MIVAR>
    <SCRIPT>
      // whitespace characters
      var whitespace = " \t\n\r";
    
      // Check whether string s is empty.   
      
      function isEmpty(s)
      {   return ((s == null) || (s.length == 0))
      }
      
      
      
      // Returns true if string s is empty or 
      // whitespace characters only.
   
      function isWhitespace (s)
      
      {   var i;
      
          // Is s empty?
          if (isEmpty(s)) return true;
      
          // Search through string's characters one by one
          // until we find a non-whitespace character.
          // When we do, return false; if we don't, return true.
      
          for (i = 0; i < s.length; i++)
          {   
              // Check that current character isn't whitespace.
              var c = s.charAt(i);
      
              if (whitespace.indexOf(c) == -1) return false;
          }
      
          // All characters are whitespace.
          return true;
      }

      
      function validSequence(s)
      {
          if ( s.length > 100 )
          {
              alert('Sequence Validation Error:\n\n Sequence length restricted to 100 characters or less.');
              return false;
          }
      
          var reg = new RegExp("^(A|T|C|G)*$");
          
          if ( ! reg.test(s) )
          {
              return confirm('Sequence Validation:\n\n Non "ATCG" letters detected. Continue?') 
          }
          return true;
      }
      
      
      function baseComplement (s)
      
      {   var i;
          var complement = "";
            
          // Search through string's characters one by one
          // For each base, return the complementary base. true.
      
          for (i = 0; i < s.length; i++)
          {   
              if (s.charAt(i) == 'A') {
                complement = complement + "T";
              }
              else if (s.charAt(i) == 'T') {
                complement = complement + "A";
              }
              else if (s.charAt(i) == 'C') {
                complement = complement + "G";
              }
              else if (s.charAt(i) == 'G') {
                complement = complement + "C";
              }
          }
      
          return complement;
      }
      
      // Returns the characters of string (s) in reverse order
   
      function reverseString (s)
      
      {   
          var i;
          var reverse = "";
      
          // Walk the input string backwards
      
          for (i = s.length-1; i >= 0; i--)
          {   
              // Append the character at position i to the reverse string;
              reverse = reverse + s.charAt(i);      
          }
      
          return reverse;
      }


      function complementSequence (seq, note)      
      {   
          var compSeq;      
          
            compSeq = baseComplement(seq);
            document.newdata.newmrkrDisplaySequence.value = compSeq;
            
            if (note != "")
            {
              curatorNote(note);
            }
      }


      function reverseSequence (seq, note)
      {   
          var revSeq;      
           
            revSeq = reverseString(seq);
            document.newdata.newmrkrDisplaySequence.value = revSeq;
            
            if (note != "")
            {
              curatorNote(note);
            }
      }


      function reverseComplementSequence ()
      
      {   
          if ( validSequence(document.newdata.newmrkrReportedSequence.value) )
          {
            complementSequence(document.newdata.newmrkrReportedSequence.value, "");
            reverseSequence(document.newdata.newmrkrDisplaySequence.value, "reversed and complemented");            
          }          
      }
      
      function curatorNote (action)
      
      {
          var note = document.newdata.newmrkrCuratorNote.value;
          document.newdata.newmrkrCuratorNote.value = "Reported Sequence: '"+ document.newdata.newmrkrReportedSequence.value + "' was " + action +".\n\n" + note;           
      }
      
      
      //Radio Buttons are stored as an array
      //Loop through the array
      //Return the checked item
      
      function GetChecked(radioButton)
      {
        for ( var i=0; i<radioButton.length; i++ )
        {
           if ( radioButton[i].checked == true )
           {
              return( radioButton[i].value );
           }
        }
      
        return("");
      }
      
      function validate(theform) 
      {
        <?MIBLOCK COND=$(OR,$(EC,$marker_type,GENE),$(EC,$marker_type,GENEP))>
          var reserve = GetChecked(theform.reserve);
          var rsrvComment = theform.rsrvComment.value;
        
          if (isWhitespace(theform.mname.value) || isWhitespace(theform.abbrev.value) ) 
          {
  	    alert('You must supply both name and abbreviation');
	    return false;
          }  
        
          if (reserve=='yes' && isWhitespace(rsrvComment)) 
          {
            alert('Missing Input: Reservations require a comment.');
            theform.rsrvComment.focus();
            return false;
          }

        <?MIELSE>
          if (isWhitespace(theform.mname.value) ) 
          {
  	    alert('Name is required.');
	    return false;
          }           
        <?/MIBLOCK>
        
          if ( !validSequence(theform.newmrkrReportedSequence.value) )
          {
            return false;
          }
          
          if ( !isWhitespace(theform.newmrkrReportedSequence.value) && isWhitespace(theform.newmrkrDisplaySequence.value) ) 
          {
            theform.newmrkrDisplaySequence.value = theform.newmrkrReportedSequence.value;
          }

        
        return true;
      }

     function noenter(e) {
var ENTER_KEY = 13;
            var code = "";
      
            if (window.event) // IE
            {
                code = e.keyCode;
            }
            else if (e.which) // Netscape/Firefox/Opera
            {
                code = e.which;
            }
            
            if (code == ENTER_KEY) {
                return false;
            }
      }

  function doSubmit() {
      // omitted logic that sets the action on the form based on the selected option
      document.newdata.submit();
  }


    </SCRIPT>

    <?MIVAR>
      <form name=newdata  method=post action="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->"
            onSubmit="return validate(this);">
        <input type=hidden name=MIval value=aa-new_marker.apg>
        <input type=hidden name=marker_type value="$marker_type">
	<input type=hidden name=marker_type_display value="$marker_type_display">

        <p><B>$marker_type_display name</b> (required):
        <input type=text onkeypress="return noenter(event)" name=mname size=80>

        <?MIBLOCK COND=$(OR,$(EC,$marker_type,GENE),$(EC,$marker_type,GENEP))>
          <p><b>Abbreviation</b> (required):
          <input type=text onkeypress="return noenter(event)" name=abbrev size=15>
        <?/MIBLOCK>

        <?MIBLOCK COND="$(EC,$marker_type_display,Morpholino)">
          <?MIVAR><p><b>$marker_type_display</b> alias:<?/MIVAR>
          <input type=text onkeypress="return noenter(event)" name="alias" size=30>
        <?/MIBLOCK>

        
        <p>
        <b>Note:</b><br>
        <TEXTAREA rows=5 cols=50 name=comments></TEXTAREA>

        <?MIBLOCK COND="$(>,$(POSITION,$marker_type,GENE),0)">
        <p><b>Is this a reservation?</b>:
        Yes <input type=radio name=reserve value=yes> / No <input type=radio name=reserve value=no checked>
        <br>Reservation Comments: <input type=text onkeypress="return noenter(event)" name=rsrvComment size=50>
        <?MIELSE>
          <input type=hidden name=reserve value="no">
	<?/MIBLOCK>
        <p>
        <p>

      <?MICOMMENT>
      Hide sequence entry if marker in marker_type in genedom.
      <?/MICOMMENT>
          <?MISQL SQL="
            select * from marker_types mt
            join marker_type_group_member mtgm on mtgm.mtgrpmem_mrkr_type=mt.marker_type
            join marker_type_group mtg on mtgm.mtgrpmem_mrkr_type_group=mtg.mtgrp_name
            where
            mtg.mtgrp_name='GENEDOM'
            and 
            mt.marker_type='$marker_type'
          ;">
          <?MIVAR NAME="hide_sequence"><?/MIVAR>
          <?/MISQL>



        <link rel="stylesheet" type="text/css" href="/css/Lookup.css"/>
        <script type="text/javascript">
                        var LookupProperties0 = {
                            divName: "targetgene",
                            inputName: "newmrkrTargetGene",
                            showError: true,
                            wildcard: false,
                            width: "25",
                            type: "GENEDOM_AND_EFG_LOOKUP",
			    useTermTable: false
                        };
         </script>

        <?MIBLOCK COND="$(EC,$marker_type_display,Morpholino)">
             <script language="javascript" src="/gwt/org.zfin.gwt.lookup.Lookup/org.zfin.gwt.lookup.Lookup.nocache.js"></script>
             Add Target Gene:
             <div id="targetgene" onkeypress="return noenter(event)"></div>

        <?/MIBLOCK>
       <p>

       <table border=0>

          <tr>
          <?MIBLOCK COND="$(NXST,$hide_sequence)">
            <td valign=top>
              <b>Sequence:</b>           
              <input type=button value="Reverse" onClick="if ( validSequence(document.newdata.newmrkrReportedSequence.value) ){reverseSequence(document.newdata.newmrkrReportedSequence.value, 'reversed')}};"> 
              <input type=button value="Complement" onClick="if ( validSequence(document.newdata.newmrkrReportedSequence.value) ){complementSequence(document.newdata.newmrkrReportedSequence.value, 'complemented')};"> 
              <input type=button value="mRNA-->MO" onClick="reverseComplementSequence();"> 
            </td>
            <td width=20></td><!-- spacer column -->
            <?/MIBLOCK>
            <td>
              <b>Curator Note:</b>
            </td>
          </tr>
          <tr>
          <?MIBLOCK COND="$(NXST,$hide_sequence)">
            <td>  
              Reported: 5'-   <input type=text name=newmrkrReportedSequence size=40 onChange="this.value = this.value.toUpperCase()"; onkeypress="return noenter(event)"> -3'
            </td>
            <td> </td>
            <?/MIBLOCK>
            <td valign=top rowspan=2>
              <textarea name=newmrkrCuratorNote rows=5 cols=50></textarea>
            </td>
          </tr>
          <tr>
          <?MIBLOCK COND="$(NXST,$hide_sequence)">
            <td>
              Displayed: 5'-   <input type=text onkeypress="return noenter(event)" name=newmrkrDisplaySequence size=40> -3'
            </td>
            <?/MIBLOCK>
          </tr>
        </table>
        <br>
        <b>publication:</b> <input type=text onkeypress="return noenter(event)" name=newmrkrSource $(IF,$(XST,$newmrkrSource),value=$newmrkrSource)>
<p>        
       <?MIVAR>
         <input type=submit name=s_new value="Submit new $marker_type_display">
       <?/MIVAR>
      </form>
    <?/MIVAR>

  <?/MIBLOCK> <!-- ends specifying params -->

  <!-- if marker values submitted -->
  <?MIBLOCK COND="$(XST,$s_new)">
    <?MIVAR COND="$(NXST,$comments)" NAME=$comments><?/MIVAR>

    <?MIVAR NAME=$mname DELIMIT="'" REPLACE="''">$mname<?/MIVAR>
    <?MIVAR COND=$(XST,$abbrev) NAME=$abbrev DELIMIT="'" REPLACE="''">$abbrev<?/MIVAR>
    <?MIVAR COND=$(NXST,$abbrev) NAME=$abbrev>$mname<?/MIVAR>
    <?MIVAR NAME=$comments DELIMIT="'" REPLACE="''">$comments<?/MIVAR>
    <?MISQL SQL="execute function get_id('$(UPPER,$marker_type)');"><?/MISQL>
    <?MIVAR NAME=$new_id>$1<?/MIVAR>

    <?MISQL SQL="
      insert into zdb_active_data 
        (zactvd_zdb_id) 
        values ('$new_id');">
    <?/MISQL>

    <?MISQL SQL="
      insert into marker 
        (mrkr_zdb_id, mrkr_name, mrkr_abbrev, mrkr_type, mrkr_comments, mrkr_owner) 
        values ('$new_id', '$mname', '$abbrev', '$(UPPER,$marker_type)',
                '$comments', '$ZDB_ident');">
    <?/MISQL>
    <?MISQL SQL="
      update marker 
	set mrkr_comments = NULL
        where mrkr_zdb_id = '$new_id'
	and mrkr_abbrev = '$abbrev'
	and mrkr_name = '$mname'
	and mrkr_comments = '';">
    <?/MISQL>
	

    <?MISQL COND=$(XST,$newmrkrSource) SQL="
        insert into record_attribution (recattrib_data_zdb_id, recattrib_source_zdb_id)
        values ('$new_id','$newmrkrSource');">
    <?/MISQL>

   

    <?MICOMMENT> ** make a new data alias, if one one specified ** <?/MICOMMENT>    

    <?MIVAR COND="$(XST,$alias)" NAME="$alias">$(TRIM,$alias)<?/MIVAR>

    <?MIBLOCK COND="$(AND,$(XST,$alias),$(NE,$alias,))">
        
        <?MISQL SQL="execute function get_id('DALIAS');">
            <?MIVAR NAME=$new_alias_id>$1<?/MIVAR>
        <?/MISQL>
        <?MISQL SQL=" insert into zdb_active_data (zactvd_zdb_id) values ('$new_alias_id');">

        <?MICOMMENT> * not a fancy special kind of alias, just a normal one * <?/MICOMMENT>
        <?MISQL SQL="select aliasgrp_pk_id from alias_group where aliasgrp_name = 'alias';">
            <?MIVAR NAME="$alias_group_id">$1<?/MIVAR>
        <?/MISQL>

        <?MISQL SQL=" insert into data_alias  (dalias_zdb_id, dalias_data_zdb_id, dalias_alias, 
                                               dalias_group_id, dalias_alias_lower)
                                      values ('$new_alias_id', '$new_id', '$alias', 
                                               '$alias_group_id', '$(LOWER,$alias)');">
        <?/MISQL>

        <?MISQL COND=$(XST,$newmrkrSource) SQL="
          insert into record_attribution (recattrib_data_zdb_id, recattrib_source_zdb_id)
          values ('$new_alias_id','$newmrkrSource');">
        <?/MISQL>
    <?/MISQL>

    <?/MIBLOCK>


    <?MIBLOCK COND=$(EC,$reserve,yes)>
      <?MISQL SQL="execute function get_id('NOMEN');"><?/MISQL>
      <?MIVAR NAME=$mhist_id>$1<?/MIVAR>
      <?MIVAR NAME=$rsrvComment COND=$(NXST,$rsrvComment)><?/MIVAR>
      <?MIVAR NAME=$rsrvComment>$(REPLACE,$rsrvComment,','')<?/MIVAR>
    
      <?MISQL SQL="
        INSERT INTO zdb_active_data VALUES('$mhist_id');
        insert into marker_history ( 
                        mhist_zdb_id, 
                        mhist_mrkr_zdb_id, 
                        mhist_event, 
                        mhist_reason, 
                        mhist_date,
                        mhist_mrkr_name_on_mhist_date,
                        mhist_mrkr_abbrev_on_mhist_date,
                        mhist_comments )
               select '$mhist_id',
                        mrkr_zdb_id,
                        'reserved',
                        'per personal communication with authors',
                        CURRENT,
                        mrkr_name,
                        mrkr_abbrev,
                        '$rsrvComment'
               from marker
               where mrkr_zdb_id = '$new_id';">
      <?/MISQL>
    <?/MIBLOCK>
    
            
    <?MIBLOCK COND="$(XST,$newmrkrDisplaySequence)">
      <?MICOMMENT> 
        ============================================================
          Create a marker_sequence record and a curator note.
        ============================================================
      <?/MICOMMENT>
            
      <?MISQL SQL="execute function get_id('MRKRSEQ')">
        <?MIVAR NAME=$newmrkrMrkrSeqId>$1<?/MIVAR>
      <?/MISQL>
      <?MISQL SQL="insert into zdb_active_data (zactvd_zdb_id) values ('$newmrkrMrkrSeqId');"><?/MISQL>
      <?MISQL SQL="
        insert into marker_sequence (
          mrkrseq_zdb_id,
          mrkrseq_mrkr_zdb_id,
          mrkrseq_sequence,
          mrkrseq_left_end)
        values (
          '$newmrkrMrkrSeqId',
          '$new_id',
          '$newmrkrDisplaySequence',
          '5''');">

      <?/MISQL>
                 	
      <?MISQL COND=$(XST,$newmrkrSource) SQL="
          insert into record_attribution (recattrib_data_zdb_id, recattrib_source_zdb_id)
          values ('$newmrkrMrkrSeqId','$newmrkrSource');">
      <?/MISQL>
      
    <?/MIBLOCK>           
    


<?MIBLOCK COND="$(XST,$newmrkrTargetGene)">
     <?MISQL SQL="select mrkr_zdb_id from marker 
                  where mrkr_abbrev='$newmrkrTargetGene'">
        <?MIVAR NAME=$newmrkrTgtGeneId>$1<?/MIVAR>
     <?/MISQL>
      <?MICOMMENT> 
        ============================================================
          Create a marker_relationship record and a curator note.
        ============================================================
      <?/MICOMMENT>
            
      <?MIBLOCK COND="$(XST,$newmrkrTgtGeneId)">
        <?MISQL SQL="execute function get_id('MREL')">
        <?MIVAR NAME=$newmrkrRelId>$1<?/MIVAR>
      <?/MISQL>
      <?MISQL SQL="insert into zdb_active_data (zactvd_zdb_id) values ('$newmrkrRelId');"><?/MISQL>
      <?MISQL SQL="
        insert into marker_relationship (
          mrel_zdb_id,
          mrel_type,
          mrel_mrkr_1_zdb_id,
          mrel_mrkr_2_zdb_id)
        values (
          '$newmrkrRelId',
          'knockdown reagent targets gene',
          '$new_id',
          '$newmrkrTgtGeneId');">
      <?/MISQL>
                 	
      <?MIBLOCK COND="$(XST,$newmrkrSource)">
          <?MISQL SQL="insert into record_attribution (recattrib_data_zdb_id, recattrib_source_zdb_id)
          values ('$newmrkrRelId','$newmrkrSource');">
         <?/MISQL> 

         <?MISQL SQL="select count(*) from record_attribution
                       where
                       recattrib_data_zdb_id='$newmrkrTgtGeneId'
                       and
                       recattrib_source_zdb_id='$newmrkrSource'
                   ">
             <?MIVAR NAME=$newmrkrcount>$1<?/MIVAR>
         <?/MISQL>
          <?MIBLOCK COND="$(=,$newmrkrcount,0)"> 
             <?MISQL SQL="insert into record_attribution (recattrib_data_zdb_id, recattrib_source_zdb_id)
             values ('$newmrkrTgtGeneId','$newmrkrSource');">
             <?/MISQL>
         <?/MIBLOCK>
      <?/MIBLOCK>
      
    <?/MIBLOCK>           
<?/MIBLOCK>


      <?MIBLOCK COND=$(XST,$newmrkrCuratorNote)>
        <?MISQL SQL="execute function get_id('DNOTE')">
          <?MIVAR NAME=$newmrkrDataNoteId>$1<?/MIVAR>
        <?/MISQL>
        
        <?MIVAR NAME=$newmrkrNoteSql>$(REPLACE,$newmrkrCuratorNote,','')<?/MIVAR>


        
        <?MISQL SQL="insert into zdb_active_data (zactvd_zdb_id) values ('$newmrkrDataNoteId');"><?/MISQL>
        <?MISQL SQL="
          insert into data_note (
            dnote_zdb_id,
            dnote_text,
            dnote_data_zdb_id,
            dnote_curator_zdb_id,
            dnote_date)
          values (
            '$newmrkrDataNoteId',
            '$newmrkrNoteSql',
            '$new_id',
            '$ZDB_ident',
            TODAY);">
        <?/MISQL>                       
      <?/MIBLOCK>    
                      
    <?MIBLOCK COND=$(XST,$seqdata_CuratorNote)>
        <?MIVAR NAME=newmrkr_encoded_note>$(URLENCODE,$seqdata_CuratorNote)<?/MIVAR>
        <?MISQL SQL="select WebExplode(object,'dnotenew_DATA=$new_id&dnotenew_CUR=$ZDB_ident&dnotenew_NOTE=$newmrkr_encoded_note') from webPages where ID='aa-dnote_new.apg';">$1<?/MISQL>
    <?/MIBLOCK>
    
    <?MIVAR>
      <h1>Confirmation: $marker_type_display record added</h1>

      Click <A href="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-markerview.apg&OID=$new_id">here</A>
      to view the new $marker_type_display record.
      <p>
      Click <A href="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-ZDB_home.apg">here</A> 
      to return to the ZFIN home page.
    <?/MIVAR>

    <?MICOMMENT>
      Add new marker's name information to the names fast search tables, so 
      the new marker can be found through the search interface.
    <?/MICOMMENT>
    <?MISQL SQL="
      execute procedure regen_names_marker('$new_id');">
    <?/MISQL>    

  <?/MIBLOCK>

<?/MIBLOCK> <!-- ends Authorized -->



<?MISQL SQL="select WebExplode(object,'') from webPages where ID='aa-htmlpagefooter.apg';">$1<?/MISQL>


