<?MIERROR>
<html>
<script src="/javascript/header.js"></script>
<p>Looks like we are having trouble processing your request. You can...</p>
<ul>
    <li>try reloading the page to see if the problem persists</li>
    <li>head back to the <a href="/">home page</a></li>
    <li>send us an <a href="mailto:zfinadmn@zfin.org">email</a> and tell us about it</li>
</ul>

<?MIBLOCK COND="$(EC,$AUTHORIZED,root)">
    <p class="error">ROOT ONLY DEBUGGING</p>
    <pre><?MIVAR>
SQL:     $MI_SQL
Code:    $MI_ERRORCODE
State:   $MI_ERRORSTATE
Message: $MI_ERRORMSG
<?/MIVAR></pre>
<?/MIBLOCK>
<script src="/javascript/footer.js"></script>
</html>
<?/MIERROR>


<?MICOMMENTS>
FILE: do-markerupdate.html

Commits the updates requested in the forms tossed up by
markerupdate.html. Also files update record.

PREFIX: domrkrup_

EXPECTED VARS:
OID -- the zdb_id of the rec to update
attr -- the column to be updated
attr_type -- textarea,text,or pic
new_value -- the new value to stick in the column
old_value -- the previous value
xtra_param -- to pass an extra parameter
comments -- reasons for doing update
info -- optional value used to pass in additional info
dataOID -- the zdbid of the attributed item
caller -- the page the initiate the update function

05-13-04
added constraint for mrkr_group ABBREV_EQ_NAME
when name is modified for markers in this group, set abbrev = name.
<?/MICOMMENTS>



<META HTTP-EQUIV="EXPIRES" CONTENT="-2d">
<!-- If one of the values was an empty string, it won't get successfully
  -- passed to this page.
  -->

<?MIVAR COND="$(NXST,$attr)" NAME=$attr><?/MIVAR>
<?MIVAR COND="$(NXST,$attr_type)" NAME=$attr_type><?/MIVAR>
<?MIVAR COND="$(NXST,$old_value)" NAME=$old_value><?/MIVAR>
<?MIVAR COND="$(NXST,$new_value)" NAME=$new_value><?/MIVAR>
<?MIVAR COND="$(NXST,$comments)" NAME=$comments><?/MIVAR>

<?MIVAR COND="$(NXST,$xtra_param)" NAME=$xtra_param>alias<?/MIVAR>
<?MIVAR COND="$(NXST,$dataOID)" NAME=$dataOID><?/MIVAR>
<?MIVAR COND="$(NXST,$info)" NAME=$info><?/MIVAR>
<?MIVAR COND="$(NXST,$anchor)" NAME=$anchor><?/MIVAR>
<?MIVAR COND="$(NXST,$caller)" NAME=$caller>markerview.apg<?/MIVAR>

<?MIVAR COND="$(NXST,$source_type)" NAME=$source_type>standard<?/MIVAR>

<!-- First check security. Main purpose is just to get submitter id and
name -->

<?MIBLOCK
COND="$(EC,$attr,comments)">
  <?MISQL SQL="
    select WebExplode(object,'permission=root')
      from webPages
      where ID='aa-secure_navigation.apg';">
    $1
  <?/MISQL>
<?MIELSE>
  <?MISQL SQL="
    select WebExplode(object,'permission=owns&rtype=marker')
      from webPages
      where ID='aa-secure_navigation.apg';">
    $1
  <?/MISQL>
<?/MIBLOCK>

<?MIBLOCK COND="$(NC,$AUTHORIZED,false)">

  <?MIVAR COND="$(EC,$attr_type,special-listitem)" NAME=$comments>Deleted
the record $old_value from the list of $attr associated with this
marker.<?/MIVAR>

  <?MIVAR COND="$(OR,$(EC,$attr_type,special-newseqnum),$(EC,$attr_type,special-check-newseqnum))" NAME=$comments>Created new link $old_value:$new_value for this record.<?/MIVAR>

  <?MIBLOCK COND="$(EC,$attr_type,special-updateseqnum)">
    <?MISQL SQL="select fdb_db_name, dblink_acc_num, dblink_length, fdbdt_data_type
                 from db_link, foreign_db_contains, foreign_db, foreign_db_data_type
                 where dblink_zdb_id = '$dataOID'
		 and fdbcont_fdb_db_id = fdb_db_pk_id
		 and fdbcont_fdbdt_id = fdbdt_pk_id
                   and dblink_fdbcont_zdb_id = fdbcont_zdb_id;">
      <?MIVAR NAME=$comments>Update $1:$2
                 <table border=0 cellpadding=3>
                   <tr><td>&nbsp;</td><td>Length</td><td>Acc_Num</td></tr>
                   <tr><td>New</td><td>$(IF,$(EC,$new_value,),$3,$new_value)</td><td>$xtra_param</td></tr>
                   <tr><td>Old</td><td>$3</td><td>$4</td></tr>
                 </table>
      <?/MIVAR>
    <?/MISQL>
  <?/MIBLOCK>


  <?MIVAR COND="$(EC,$attr_type,special-newmrkrrel)" NAME=$comments>Created new marker relationship of relationship: $old_value for this record.<?/MIVAR>

  <?MIVAR COND="$(EC,$attr_type,special-newattrib)" NAME=$comments>Add new data attribution: $old_value to $new_value for this record.<?/MIVAR>

  <?MIVAR NAME=$new_value DELIMIT="'" REPLACE="''">$new_value<?/MIVAR>
  <?MIVAR NAME=$old_value DELIMIT="'" REPLACE="''">$old_value<?/MIVAR>
  <?MIVAR NAME=$comments DELIMIT="'" REPLACE="''">$comments<?/MIVAR>

  <!-- insert update record for the update! -->
  <?MISQL SQL="
    insert into updates (submitter_id,submitter_name, rec_id, field_name,
                         old_value, new_value, comments, when)
         values ('$ZDB_ident', '$ZDB_name','$OID', '$attr',
                  '$old_value', '$new_value', '$comments', current);">
  <?/MISQL>
  <!-- OK, NOW UPDATE THE  ACTUAL DATA RECORD. -->
  <?MIBLOCK COND="$(AND,$(NC,$attr,dalias_alias),
                      $(NC,$attr,mrkr_comments),
		      $(OR,$(EC,$attr_type,text),
		           $(EC,$attr_type,textarea)))">


    <?MIVAR NAME=SQL_update>
      update marker
        set $attr='$new_value'
        where mrkr_zdb_id='$OID';
    <?/MIVAR>




    <?MISQL SQL="
      SELECT * FROM marker, marker_types, marker_type_group_member
      WHERE mrkr_zdb_id = '$OID'
        AND mrkr_type = marker_type
        AND mtgrpmem_mrkr_type = marker_type
        AND mtgrpmem_mrkr_type_group = 'ABBREV_EQ_NAME'
        AND '$attr' = 'mrkr_name';">

      <?MIVAR NAME=SQL_update>
        update marker
        set $attr = '$new_value',
            mrkr_abbrev = '$new_value'
        where mrkr_zdb_id='$OID';
      <?/MIVAR>
    <?/MISQL>

    <?MISQL SQL="$SQL_update">

      <?MIBLOCK COND="$(EC,$info,nomenclature)">
        <?MIVAR NAME=comments COND="$(EC,$comments,NULL)">none<?/MIVAR>
        <?MISQL SQL="select max(mhist_date) from marker_history where mhist_mrkr_zdb_id = '$OID'">
          <?MIVAR NAME=MHIST_DATE>$1<?/MIVAR>
        <?/MISQL>
        <?MISQL SQL="
          update marker_history
            set mhist_reason = '$mhistrsn_name',
                mhist_comments = '$comments'
            where mhist_mrkr_zdb_id = '$OID'
              and mhist_date = '$MHIST_DATE'">
         <?/MISQL>
       <?/MIBLOCK>
     <?/MISQL>

  <?/MIBLOCK>

  <?MIBLOCK COND="$(AND,$(EC,$attr,dalias_alias),
		        $(EC,$attr_type,text))">
    <?MISQL SQL="
      execute function get_id('DALIAS');">
      <?MIVAR NAME=$dalias_zdb_id>$1<?/MIVAR>
    <?/MISQL>
    <?MISQL SQL="
      insert into zdb_active_data
	  (zactvd_zdb_id)
        values
	  ('$dalias_zdb_id');">
    <?/MISQL>
    <?MISQL SQL="
      insert into data_alias
	  (dalias_zdb_id, dalias_data_zdb_id, dalias_alias, dalias_group_id,
		dalias_alias_lower)
        values
	  ('$dalias_zdb_id', '$OID', '$new_value', (select aliasgrp_pk_id from alias_group where aliasgrp_name = '$(URLDECODE,$xtra_param)'),
		lower('$new_value'));">
    <?/MISQL>
  <?/MIBLOCK>



<!--     <?MIVAR>
      <script>
        alert("$attr_type \n$dataOID \n$old_value \n$source_type");
      </script>
    <?/MIVAR>
    Special case for deleting one of the associated seqs/sources/pubs -->

  <?MIBLOCK COND="$(EC,$attr_type,special-listitem)">

    <?MIBLOCK COND="$(EC,$attr,publication)">
      <?MICOMMENT>*** Check if the marker is connected to the publication through other data, and
        alert the user if it is.
        Count the pubs for OID before the delete. Count the pubs for OID after the delete.
        If the counts are the same, the pub is connected through other data.
      <?/MICOMMENT>


      <?MIVAR NAME=mrkrup_OID>$OID<?/MIVAR>
      <?MIVAR NAME=OID>$dataOID<?/MIVAR>
      <?MISQL SQL="select WebExplode(object,'citlink_data_page=citgeneric.apg') from webPages where ID='aa-cittotalcount.apg';">$1<?/MISQL>
      <?MIVAR NAME=citlink_total_count_before>$citlink_total_count<?/MIVAR>

      <?MISQL SQL="
        delete from record_attribution
	  where recattrib_data_zdb_id = '$dataOID'
	    and recattrib_source_zdb_id = '$old_value'
	    and recattrib_source_type = '$source_type';">
      <?/MISQL>

      <?MISQL SQL="select WebExplode(object,'citlink_data_page=citgeneric.apg') from webPages where ID='aa-cittotalcount.apg';">$1<?/MISQL>
      <?MIBLOCK COND="$(EC,$citlink_total_count,$citlink_total_count_before)">
        <script>
          alert('The publication is still connected through other types of data.');
        </script>
      <?/MIBLOCK>

      <?MIVAR NAME=OID>$mrkrup_OID<?/MIVAR>
     <?/MIBLOCK>


    <?MIBLOCK COND="$(EC,$attr,db_link)">
      <!-- $old_value syntax like db_name:acc_num -->
      <!-- separate values -->
      <?MIVAR NAME=delimit>$(POSITION,$old_value,":")<?/MIVAR>
      <?MIVAR NAME=db_name>$(SUBSTR,$old_value,1,$(-,$delimit,1))<?/MIVAR>
      <?MIVAR NAME=acc_len>$(-,$(STRLEN,$old_value),$(-,$delimit,1))<?/MIVAR>
      <?MIVAR NAME=acc_num>$(SUBSTR,$old_value,$(+,$delimit,1),$acc_len)<?/MIVAR>

      <?MISQL SQL="
	select recattrib_source_zdb_id, dblink_zdb_id
	  from record_attribution, db_link, foreign_db_contains, foreign_db
	 where recattrib_data_zdb_id = dblink_zdb_id
	   and dblink_linked_recid = '$OID'
	   and dblink_fdbcont_zdb_id = fdbcont_zdb_id
	   and fdb_db_pk_id = fdbcont_fdb_db_id
	   and fdb_db_name = '$db_name'
	   and dblink_acc_num = '$acc_num' ; ">

       <?MISQL SQL="select WebExplode(object,'pubId=$1&dataId=$2') from webPages where ID='aa-attrib_check.apg';">$1<?/MISQL>
     <?/MISQL>

      <?MISQL SQL="
	delete from zdb_active_data
	  where zactvd_zdb_id =
		( select dblink_zdb_id
		    from db_link, foreign_db_contains, foreign_db
		    where dblink_linked_recid = '$OID'
		      and dblink_fdbcont_zdb_id = fdbcont_zdb_id
              and fdbcont_fdb_db_id = fdb_db_pk_id
              and fdb_db_name = '$db_name'
		      and dblink_acc_num = '$acc_num' );">
      <?/MISQL>
    <?/MIBLOCK>


    <?MIBLOCK COND="$(EC,$attr,recattrib)">

      <?MISQL COND="$(EC,$attr,recattrib)" SQL="
        delete from record_attribution
	  where recattrib_data_zdb_id = '$dataOID'
	    and recattrib_source_zdb_id = '$old_value'
	    and recattrib_source_type = '$source_type';">
      <?/MISQL>

      <?MICOMMENT>***08/25 adding alert to deletion of attribution from deleteRef button
           ***09/09 check first, only when it is deleting the last attribution,give alert.
      <?/MICOMMENT>
      <?MISQL SQL="select WebExplode(object,'pubId=$old_value') from webPages where ID='aa-attrib_check.apg';">$1<?/MISQL>

    <?/MIBLOCK> <!-- end attribution delete -- >

  <?/MIBLOCK>  <!-- ends special listitem case -->


  <?MICOMMENT>
      Update the chimericism of a clone.
      A potential problem: not all ESTs have clones.
  <?/MICOMMENT>

  <?MIBLOCK COND="$(EC,$attr,clone_problem_type)">
    <?MIBLOCK COND="$(AND,$(NE,$new_value,NONE),$(NE,$new_value,))">
      <?MISQL SQL="
          UPDATE clone
          SET clone_problem_type = '$new_value'
          WHERE clone_mrkr_zdb_id = '$OID';">
      <?/MISQL>

      <?MICOMMENT>
      Set marker_relation to "artifact of" where this OID is the second marker relation.  The reverse, which is much rarer, must be set manually.
      9/29/2011.  FB case 7393: fixed this; so curators do not have to do any work-around with this
      <?/MICOMMENT>

      <?MISQL SQL="
        UPDATE  marker_relationship
        SET mrel_type='gene has artifact'
        WHERE mrel_mrkr_2_zdb_id='$OID'
      ;">
      <?/MISQL>


    <?MIELSE>
      <?MISQL SQL="
        UPDATE  marker_relationship
        SET mrel_type='gene encodes small segment'
        WHERE mrel_mrkr_2_zdb_id='$OID'
        AND EXISTS(select * from clone where clone_mrkr_zdb_id = '$OID' and clone_problem_type = 'Chimeric')
      ;">
      <?/MISQL>

      <?MISQL SQL="
          UPDATE clone
          SET clone_problem_type = null
          WHERE clone_mrkr_zdb_id = '$OID';">
      <?/MISQL>

    <?/MIBLOCK>
  <?/MIBLOCK>

	<?MIVAR COND="$(EQ,$(POSITION,$xtra_param,ZDB-FDBCONT,1),1)" NAME=$fdbcont_zdb_id>$xtra_param<?/MIVAR>

  <!-- Special case for checking new sequence db link -->
  <?MIBLOCK COND="$(EC,$attr_type,special-check-newseqnum)">
    <?MIVAR NAME=$MI_NOVALUE><?/MIVAR>
	<?MISQL SQL="
	       select dblink_zdb_id
             from marker_relationship, db_link
	          where
            mrel_mrkr_1_zdb_id ='$OID'
              and
            mrel_mrkr_2_zdb_id = dblink_linked_recid
              and
            dblink_acc_num = '$new_value'
              and
	        dblink_fdbcont_zdb_id = '$fdbcont_zdb_id'
              and
                mrel_type <> 'gene produces transcript'
	  UNION
           select dblink_zdb_id
             from db_link
	         where
            dblink_linked_recid = '$OID'
              and
            dblink_acc_num = '$new_value'
              and
	        dblink_fdbcont_zdb_id = '$fdbcont_zdb_id'
              ">
       <?/MISQL>
       <?MIBLOCK COND="$(NC,$1,)">
       <?MIBLOCK COND="$(=,$(POSITION,$OID,CONSTRCT),0)">
           <SCRIPT>
 	   			window.alert('The GenBank accession is already associated with this marker, or a marker that is related.');
	       </SCRIPT>
	    <?/MIBLOCK>
       <?MIELSE>

          <?MIVAR NAME=markerlist><?/MIVAR>
	      <?MISQL SQL="
	         select mrkr_abbrev
	           from db_link, marker
	          where dblink_acc_num = '$new_value'
	            and dblink_linked_recid=mrkr_zdb_id
	            and mrkr_type not like '%CONSTRCT%'; ">
             <?MIBLOCK COND="$(EC,$MI_CURRENTROW,1)">
	 		    <?MIVAR>$(SETVAR,$markerlist[1],$1)<?/MIVAR>
	     	 <?MIELSE>
                <?MIVAR>$(VECAPPEND,$markerlist,$1)<?/MIVAR>
	     	 <?/MIBLOCK>
          <?/MISQL>

       <?MIBLOCK COND="$(=,$(POSITION,$OID,CONSTRCT),0)">
          <?MIBLOCK COND="$(NC,$markerlist,)">
             <?MIVAR>
              $(SETVAR,$markerlist,$(SEPARATE,$markerlist,","))

              <SCRIPT>
                var msg="The GenBank accession is already associated with\n"+
                         "[$markerlist] in another database. Do you want to proceed?";
	        	if (confirm(msg))
		   			location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-markerupdate.apg&OID=$OID&attr=seqnum&attr_type=special-newseqnum&old_value=$old_value&new_value=$new_value&target_table=$target_table&fdbcont_super=$fdbcont_super&fdbcont_data=$fdbcont_data');

	      	   </SCRIPT>
             <?/MIVAR>
	  	  <?MIELSE>
             <?MIVAR NAME=$donecheck><?/MIVAR>
	      <?/MIBLOCK> <?MICOMMENT>end of if markerlist exists<?/MICOMMENT>
<?/MIBLOCK>
      <?/MIBLOCK>  <?MICOMMENT>end of if dblink_zdb_id exists<?/MICOMMENT>
      <?MIBLOCK COND="$(>,$(POSITION,$OID,CONSTRCT),0)">

      <?MIVAR NAME=$donecheck><?/MIVAR>
      	      <?/MIBLOCK>
   <?/MIBLOCK>

  <!-- Special case for adding new sequence db link -->
  <?MIBLOCK COND="$(OR,$(EC,$attr_type,special-newseqnum),$(XST,$donecheck))">

    <?MIVAR COND="$(AND,
    $(NXST,$fdbcont_zdb_id),
    $(XST,$xtra_param),
    $(EQ,$(POSITION,$xtra_param,ZDB-FDBCONT,1),1)
    )"
    NAME="$fdbcont_zdb_id">$xtra_param<?/MIVAR>


    <?MIBLOCK COND="$(NXST,$fdbcont_zdb_id)">
<?MISQL SQL="
    select fdbcont_zdb_id
      from foreign_db_contains, foreign_db, foreign_db_data_type
     where fdbdt_super_type = '$fdbcont_super'
       and fdbdt_data_type = '$fdbcont_data'
       and fdb_db_name = '$old_value'
and fdbcont_fdb_db_id = fdb_db_pk_id
and fdbcont_fdbdt_id = fdbdt_pk_id;">
      $(SETVAR,fdbcont_zdb_id,$1)
  <?/MISQL>

    <?/MIBLOCK>

    <?MIBLOCK COND="$(NXST,$fdbcont_zdb_id)">
	<?MIVAR>
           <SCRIPT>
   	      window.alert('$old_value of type $fdbcont_data is not valid.');
	   </SCRIPT>
        <?/MIVAR>
    <?MIELSE>

      <?MISQL SQL="
         execute function get_id('DBLINK');">
      <?/MISQL>
      <?MIVAR NAME=$dblink_zdb_id>$1<?/MIVAR>
      <?MISQL SQL="
         insert into zdb_active_data
             ( zactvd_zdb_id )
           values
            ( '$dblink_zdb_id' );">
      <?/MISQL>
      <?MISQL SQL="
         insert into db_link
           (dblink_linked_recid,
            dblink_acc_num,
            dblink_zdb_id,
            dblink_info,
            dblink_fdbcont_zdb_id
           )
          values
	       ('$OID',
	        '$new_value',
	    	'$dblink_zdb_id',
	    	'$ZDB_name'||' '||TODAY,
	    	'$fdbcont_zdb_id'
	      );">

      <?/MISQL>
    <?/MIBLOCK>
   <?/MIBLOCK>  <!-- ends special seqdb case ---->


     <?MICOMMENT>
        =============================================
          Special case for updating marker sequence
        =============================================
      <?/MICOMMENT>

     <?MIBLOCK COND="$(EC,$attr,seq_sequence)">

       <?MICOMMENT>
          ==========================================
            Update existing marker_sequence record
          ==========================================
        <?/MICOMMENT>

     <?MIBLOCK COND=$(AND,$(XST,$dataOID),$(NC,$dataOID,))>
       <?MISQL SQL="
           update marker_sequence
              set seq_sequence = '$new_value'
            where seq_mrkr_zdb_id = '$dataOID';">
       <?/MISQL>
     <?MIELSE>

       <?MICOMMENT>
          ===================================
            Create a marker_sequence record
          ===================================
        <?/MICOMMENT>

      <?MISQL SQL="
        insert into marker_sequence (
          seq_mrkr_zdb_id,
          seq_sequence,
          seq_left_end)
        values (
          '$OID',
          '$new_value',
          '5''');">
      <?/MISQL>

     <?/MIBLOCK>

      <?MIBLOCK COND=$(XST,$xtra_param)>
        <?MIVAR NAME=domrkr_encoded_note>$(URLENCODE,$xtra_param)<?/MIVAR>
        <?MISQL SQL="select WebExplode(object,'dnotenew_DATA=$OID&dnotenew_CUR=$ZDB_ident&dnotenew_type=none&dnotenew_NOTE=$domrkr_encoded_note') from webPages where ID='aa-dnote_new.apg';">$1<?/MISQL>
      <?/MIBLOCK>

   <?/MIBLOCK>

   <?MIBLOCK COND="$(EC,$attr,seq_sequence_2)">

       <?MICOMMENT>
          ==========================================
            Update existing marker_sequence record
          ==========================================
        <?/MICOMMENT>

     <?MIBLOCK COND=$(AND,$(XST,$dataOID),$(NC,$dataOID,))>
       <?MISQL SQL="
           update marker_sequence
              set seq_sequence = '$new_value'
            where seq_mrkr_zdb_id = '$dataOID';">
       <?/MISQL>

       <?MISQL COND="$(XST,$new_value2)"
          SQL="
           update marker_sequence
              set seq_sequence_2 = '$new_value2'
            where seq_mrkr_zdb_id = '$dataOID';">
       <?/MISQL>
       <?MISQL
          SQL="
           update marker_sequence
              set seq_sequence_2 = ''
            where seq_mrkr_zdb_id = '$dataOID'
              and seq_sequence = '';">
       <?/MISQL>
     <?MIELSE>

       <?MICOMMENT>
          ===================================
            Create a marker_sequence record
          ===================================
        <?/MICOMMENT>

      <?MISQL SQL="
        insert into marker_sequence (
          seq_mrkr_zdb_id,
          seq_sequence,
          seq_left_end)
        values (
          '$OID',
          '$new_value',
          '5''');">
      <?/MISQL>

     <?/MIBLOCK>

      <?MIBLOCK COND=$(XST,$xtra_param)>
        <?MIVAR NAME=domrkr_encoded_note>$(URLENCODE,$xtra_param)<?/MIVAR>
        <?MISQL SQL="select WebExplode(object,'dnotenew_DATA=$OID&dnotenew_CUR=$ZDB_ident&dnotenew_type=none&dnotenew_NOTE=$domrkr_encoded_note') from webPages where ID='aa-dnote_new.apg';">$1<?/MISQL>
      <?/MIBLOCK>

   <?/MIBLOCK>


   <?MIBLOCK COND="$(EC,$attr_type,special-updateseqnum)">
     <?MISQL COND="$(AND,$(EC,$old_value,dblink_length),$(NC,$new_value,))" SQL="
       update db_link
       set dblink_length = $new_value
       where dblink_zdb_id = '$dataOID';">
     <?/MISQL>
	 <?MISQL SQL="
 			select fdb_db_name, fdbcont_organism_common_name
              from db_link, foreign_db_contains, foreign_db
             where dblink_zdb_id = '$dataOID'
	     and fdbcont_fdb_db_id = fdb_db_pk_id
               and dblink_fdbcont_zdb_id = fdbcont_zdb_id;">
     <?/MISQL>
     <?MIVAR NAME=$fdb_name>$1<?/MIVAR>
     <?MIVAR NAME="$domrkrup_fdbcont_organism_common_name">$2<?/MIVAR>
     <?MISQL SQL="
        select fdbcont_zdb_id
         from foreign_db_contains, foreign_db, foreign_db_data_type
        where fdbdt_super_type = 'sequence'
          and fdbdt_data_type = '$xtra_param'
          and fdbcont_organism_common_name = '$domrkrup_fdbcont_organism_common_name'
          and fdb_db_name = '$fdb_name'
	  and fdbcont_fdb_db_id = fdb_db_pk_id
	  and fdbcont_fdbdt_id = fdbdt_pk_id;">

        $(SETVAR,fdbcont_zdb_id,$1)

      <?/MISQL>

      <?MIBLOCK COND=$(NXST,$fdbcont_zdb_id)>
   	    <?MIVAR>
		  <SCRIPT>
   			  window.alert('$fdb_name of type $xtra_param is not valid.');
	      </SCRIPT>
        <?/MIVAR>
      <?MIELSE>

        <?MISQL SQL="
         update db_link
            set dblink_fdbcont_zdb_id = '$fdbcont_zdb_id'
          where dblink_zdb_id = '$dataOID';">
        <?/MISQL>
      <?/MIBLOCK> <?MICOMMENT> ends if fdbcont_zdb_id exists <?/MICOMMENT>
    <?/MIBLOCK>  <?MICOMMENT> ends update seqdb case <?/MICOMMENT>


  <!------ Special case for adding new attribution------->

  <?MIBLOCK COND="$(EC,$attr_type,special-newattrib)">
    <!-- check whether the pub zdb id is valid. -->
    <?MISQL SQL="
	   select 'x' from publication
             where zdb_id = '$new_value'
                ;">
	<?MIVAR NAME="domrkrup_pub_exists">t<?/MIVAR>
    <?/MISQL>
    <?MIBLOCK COND="$(XST,$domrkrup_pub_exists)">
      <?MISQL COND="$(EC,$info,namealias)" SQL="
	   select dalias_zdb_id
	     from data_alias
	    where dalias_data_zdb_id = '$OID'
	      and dalias_alias = '$old_value'
	    ;">
	<?MIVAR>$(SETVAR,$old_value,$1)<?/MIVAR>
      <?/MISQL>


      <?MICOMMENT> ** if an fdbcont_zdb_id is passed in, it will show up in the
                      $xtra_param variable.  Let's do a query and if $xtra_param
                      comes back as a valid fdbcont_zdb_id, then we'll set the var,
                      otherwise, it won't exist                        ** <?/MICOMMENT>

      <?MISQL SQL="select fdbcont_zdb_id
                   from foreign_db_contains
                   where fdbcont_zdb_id = '$xtra_param';">
          <?MIVAR NAME="$domrkrup_fdbcont_zdb_id">$1<?/MIVAR>
      <?/MISQL>

      <?MIBLOCK COND=$(NXST,$domrkrup_fdbcont_zdb_id)>

      <?MISQL COND="$(EC,$info,seqacc)" SQL="
            select dblink_zdb_id
	     from db_link
	    where dblink_linked_recid = '$OID'
	      and dblink_acc_num = '$old_value';">
	<?MIVAR>$(SETVAR,$old_value,$1)<?/MIVAR>
        <?MIVAR NAME="$domrkrup_dblink_zdb_id">$1<?/MIVAR>
      <?/MISQL>
      <?MIELSE>
      <?MISQL COND="$(EC,$info,seqacc)" SQL="
	   select dblink_zdb_id
       from db_link dbl join foreign_db_contains fdbc on dbl.dblink_fdbcont_zdb_id=fdbc.fdbcont_zdb_id
	    where dbl.dblink_linked_recid = '$OID'
	      and dbl.dblink_acc_num = '$old_value'
	      and fdbc.fdbcont_zdb_id = '$domrkrup_fdbcont_zdb_id';
          ">
	<?MIVAR>$(SETVAR,$old_value,$1)<?/MIVAR>
        <?MIVAR NAME="$domrkrup_dblink_zdb_id">$1<?/MIVAR>
      <?/MISQL>
      <?/MIBLOCK>

      <!-- add attribution-->
      <?MIBLOCK COND="$(AND,$(EC,$attr,recattrib),$(NE,$info,mrel),$(NE,$info,seqacc))">

         <?MISQL SQL="
	    insert into record_attribution
		(recattrib_data_zdb_id, recattrib_source_zdb_id)
              values('$old_value', '$new_value')
                ;">
         <?/MISQL>

      <?/MIBLOCK>

  <?MIBLOCK COND="$(AND,$(EC,$attr,recattrib),$(EC,$info,seqacc))">

    <?MIVAR NAME="$dblink_value"><?/MIVAR>

    <?MICOMMENT>
      Not having the fdbcont_zdb_id should work for everything but the odd GEO db_link, which isn't updated this way anyway.
      excluding GEO with ZDB-FDBCONT-070919-1
    <?/MICOMMENT>


    <?MISQL COND="$(NXST,$domrkrup_dblink_zdb_id)"
            SQL="select dblink_zdb_id
            from db_link
           where dblink_linked_recid = '$OID'
             and dblink_acc_num = '$old_value'
             and dblink_fdbcont_zdb_id <> 'ZDB-FDBCONT-070919-1';">
           <?MIVAR NAME="$domrkrup_dblink_zdb_id">$1<?/MIVAR>
    <?/MISQL>

    <?MISQL SQL="insert into record_attribution
                       (recattrib_data_zdb_id, recattrib_source_zdb_id)
                 values('$domrkrup_dblink_zdb_id', '$new_value');">
    <?/MISQL>

  <?/MIBLOCK>  <?MICOMMENT> * end attr=recattrib info=seqacc * <?/MICOMMENT>


  <?MIBLOCK COND="$(EC,$info,mrel)">
        <!-- check whether the mrkr abbrev is valid. -->
        <?MISQL SQL="
	   select * from marker
             where mrkr_abbrev = '$old_value'
                ;">
        <?/MISQL>

        <?MIBLOCK COND="$(>,$MI_ROWCOUNT,0)">
        <!-- Attribution contains & contained in relationship -->
        <!--  :check for valid contain(ed) relationship: -->
        <!--  :verify relationship is unattributted: -->
        <!--  :insert attribution: -->
        <?MISQL SQL="
  	   select * from marker, marker_relationship
           where mrkr_abbrev = '$old_value'
             and mrel_mrkr_1_zdb_id = mrkr_zdb_id
                 ;">
        <?/MISQL>
        <?MIBLOCK COND="$(>,$MI_ROWCOUNT,0)">


          <?MISQL SQL="
	    select mrel_zdb_id
	      from marker_relationship, marker
	     where mrel_mrkr_2_zdb_id = '$OID'
	       and mrel_mrkr_1_zdb_id = mrkr_zdb_id
	       and mrkr_abbrev = '$old_value'
	    ;">
	    <?MIVAR>$(SETVAR,$data_value,$1)<?/MIVAR>
          <?/MISQL>
	  <?MIBLOCK COND="$(XST,$data_value)">
            <?MISQL SQL="
            select * from record_attribution
            where recattrib_data_zdb_id = '$data_value'
              and recattrib_source_zdb_id = '$new_value'">
            <?/MISQL>
            <?MISQL COND="$(=,$MI_ROWCOUNT,0)" SQL="
	      insert into record_attribution
		  (recattrib_data_zdb_id, recattrib_source_zdb_id)
                values('$data_value', '$new_value')
                  ;">
            <?/MISQL>
            <?MIVAR>$(UNSETVAR,$data_value)<?/MIVAR>
          <?/MIBLOCK> <!-- end xst $data_value -->

          <?/MIBLOCK> <!-- mrkr_abbrev is valid for mrel_mrkr_1 -->

        <?MISQL SQL="
  	   select * from marker, marker_relationship
           where mrkr_abbrev = '$old_value'
             and mrel_mrkr_2_zdb_id = mrkr_zdb_id
                 ;">
        <?/MISQL>
        <?MIBLOCK COND="$(>,$MI_ROWCOUNT,0)">

          <?MISQL SQL="
	   select mrel_zdb_id
	     from marker_relationship, marker
	    where mrel_mrkr_1_zdb_id = '$OID'
	      and mrel_mrkr_2_zdb_id = mrkr_zdb_id
	      and mrkr_abbrev = '$old_value'
	    ;">
	    <?MIVAR>$(SETVAR,$data_value,$1)<?/MIVAR>
          <?/MISQL>
          <?MIBLOCK COND="$(XST,$data_value)">
            <?MISQL SQL="
                  select * from record_attribution
                  where recattrib_data_zdb_id = '$data_value'
                    and recattrib_source_zdb_id = '$new_value'">
            <?/MISQL>

            <?MISQL COND="$(=,$MI_ROWCOUNT,0)" SQL="
              insert into record_attribution
                  (recattrib_data_zdb_id, recattrib_source_zdb_id)
                   values('$data_value', '$new_value')
              ;">
            <?/MISQL>
          <?/MIBLOCK> <!-- end: xst data_value -->
        <?/MIBLOCK> <!-- end: valid mrkr_abbrev for mrel_mrkr_2 -->

      <?MIELSE>
        <?MIVAR>
 	<script>
	window.alert('ERROR: Reference not added. Marker abbrev "$old_value" was not found in ZFIN.');
	</script>
	<?/MIVAR>
      <?/MIBLOCK> <!-- end: valid abbrev -->
      <?/MIBLOCK> <!-- end: info=mrel -->

      <?MICOMMENT>*** 08/22 attributions to data items are automatically attributed to the marker also. <?/MICOMMENT>
      <!-- make sure attribe to marker not already exist -->
      <?MISQL SQL="
	  select *
	    from record_attribution
	   where recattrib_data_zdb_id = '$OID'
	     and recattrib_source_zdb_id = '$new_value' ;">
      <?/MISQL>
      <?MISQL COND="$(=,$MI_ROWCOUNT,0)" SQL="
	    insert into record_attribution
		(recattrib_data_zdb_id, recattrib_source_zdb_id)
              values('$OID', '$new_value')
                ;">
      <?/MISQL>
      <!-- restore OID-->
      <?MIVAR COND="$(XST,$saveOID)">$(SETVAR,$OID,$saveOID)<?/MIVAR>

    <?MIELSE>
      <?MIVAR>
 	<script>
	window.alert('ERROR: Pub ZdbId $new_value is not in ZFIN, please check.');
	</script>
      <?/MIVAR>
    <?/MIBLOCK><!-- end of pub id exist or not-->
 <?/MIBLOCK><!-- end of new attrib --->


  <!-- Special case for adding new segemnt relationship -->
  <?MIBLOCK COND="$(EC,$attr_type,special-newmrkrrel)">
    <?MISQL SQL="
      execute function get_id('MREL');">
    <?/MISQL>
    <?MIVAR NAME=$mrkrrel_zdb_id>$1<?/MIVAR>
    <?MISQL SQL="
      insert into zdb_active_data
          ( zactvd_zdb_id )
        values
          ( '$mrkrrel_zdb_id' );">
    <?/MISQL>
    <?MISQL SQL="
	select mrkr_zdb_id
	from marker
	where mrkr_abbrev = '$new_value';">
    <?/MISQL>
    <?MIVAR NAME=$ptnerId>$1<?/MIVAR>
    <?MIVAR NAME=$reltype>$(SUBSTR,$old_value,6)<?/MIVAR>
    <?MIBLOCK COND="$(AND,$(NC,$ptnerId,NULL),$(NC,$ptnerId,NOVALUE))">
      <?MISQL COND="$(>,$(POSITION,$old_value,1to2),0)" SQL="
       insert into marker_relationship
          ( mrel_zdb_id, mrel_type, mrel_mrkr_1_zdb_id, mrel_mrkr_2_zdb_id
)
        values
	  ( '$mrkrrel_zdb_id', '$reltype', '$OID','$ptnerId');">
      <?/MISQL>
      <?MISQL COND="$(>,$(POSITION,$old_value,2to1),0)" SQL="
        insert into marker_relationship
          ( mrel_zdb_id, mrel_type, mrel_mrkr_1_zdb_id, mrel_mrkr_2_zdb_id
)
        values
	  ( '$mrkrrel_zdb_id', '$reltype', '$ptnerId', '$OID');">
      <?/MISQL>
      <?MISQL SQL="select mrel_mrkr_2_zdb_id from marker_relationship where mrel_type = 'knockdown reagent targets gene' and mrel_mrkr_1_zdb_id = '$OID';">
         <?MISQL SQL="execute procedure regen_genox_marker('$1');"><?/MISQL>
      <?/MISQL>
    <?MIELSE>
	<script>
	window.alert('ERROR: Symbol is not in ZFIN.');
	</script>
    <?/MIBLOCK>

  <?/MIBLOCK>

  <!-- Special case for adding new supplier -->
  <?MIBLOCK COND="$(EC,$attr_type,special-newsupplier)">
      <?MISQL SQL="
          insert into int_data_supplier
            (idsup_data_zdb_id, idsup_supplier_zdb_id)
          values
	    ('$OID','$new_value');">
      <?/MISQL>

  <?/MIBLOCK>

  <!-- Special case for deleting an alias -->
  <?MIBLOCK COND="$(EC,$attr_type,delete-alias)">

    <?MICOMMENT>alias is sent over in an URLENCODED format,
           test showed that it is converted back automatically,
	   even with "'" replaced by "''"
    <?/MICOMMENT>
    <?MISQL SQL="
	select recattrib_source_zdb_id, dalias_zdb_id
	  from record_attribution, data_alias
	 where recattrib_data_zdb_id = dalias_zdb_id
	   and dalias_data_zdb_id = '$OID'
	   and dalias_alias = '$old_value'
       ; ">

      <?MISQL SQL="select WebExplode(object,'pubId=$1&dataId=$2') from webPages where ID='aa-attrib_check.apg';">$1<?/MISQL>
    <?/MISQL>

    <?MIVAR NAME="old_dalias_zdb_id"><?/MIVAR>
    <?MIVAR NAME="fixalias"><?/MIVAR>
    <?MISQL SQL="
	select dalias_zdb_id, dalias_alias
	  from data_alias
	 where dalias_data_zdb_id = '$OID'
	   and dalias_alias = '$old_value'
    ;">
       <?MIVAR NAME="old_dalias_zdb_id">$1<?/MIVAR>
       <?MIVAR NAME="fixalias">$2<?/MIVAR>
    <?/MISQL>


    <?MISQL COND="$(AND,$(NE,$old_dalias_zdb_id,NOVALUE),$(NE,$fixalias,NOVALUE))" SQL="
        update marker_history
        set mhist_mrkr_prev_name='$fixalias', mhist_dalias_zdb_id = null
        where
        mhist_dalias_zdb_id='$old_dalias_zdb_id'
    ;">
    <?/MISQL>


    <?MISQL COND="$(EC,$attr,dalias_alias)" SQL="
      delete from zdb_active_data
        where zactvd_zdb_id =
		( select dalias_zdb_id
		    from data_alias
		    where dalias_data_zdb_id = '$OID'
		      and dalias_alias = '$old_value' ) ;">
    <?/MISQL>
  <?/MIBLOCK>



  <!-- Special case for deleting a marker relationship -->
  <?MIBLOCK COND="$(EC,$attr_type,delete-mrkrrelation)">
     <?MISQL SQL="
	select recattrib_source_zdb_id, mrel_zdb_id
	  from record_attribution, marker_relationship
	 where recattrib_data_zdb_id = mrel_zdb_id
	   and ((mrel_mrkr_1_zdb_id = '$OID'
		and mrel_mrkr_2_zdb_id ='$old_value')
              or (mrel_mrkr_2_zdb_id = '$OID'
		and mrel_mrkr_1_zdb_id ='$old_value')); ">

	<?MISQL SQL="select WebExplode(object,'pubId=$1&dataId=$2') from webPages where ID='aa-attrib_check.apg';">$1<?/MISQL>
      <?/MISQL>


     <?MISQL COND="$(EC,$attr,marker_relationship)" SQL="
	delete from zdb_active_data
          where zactvd_zdb_id =
	      	(select mrel_zdb_id
               from marker_relationship
	          where ( (mrel_mrkr_1_zdb_id = '$OID'
                      and mrel_mrkr_2_zdb_id ='$old_value')
		           or
					  (mrel_mrkr_1_zdb_id ='$old_value'
                      and  mrel_mrkr_2_zdb_id= '$OID')
					)
		       and mrel_type = '$info') ;">
     <?/MISQL>
     <?MISQL SQL="select mrel_mrkr_2_zdb_id from marker_relationship where mrel_type = 'knockdown reagent targets gene' and mrel_mrkr_1_zdb_id = '$OID';">
         <?MISQL SQL="execute procedure regen_genox_marker('$1');"><?/MISQL>
     <?/MISQL>     
  <?/MIBLOCK>

  <!-- Special case for deleting a supplier -->
  <?MIBLOCK COND="$(EC,$attr_type,delete-supplier)">
     <?MISQL SQL="
	delete from int_data_supplier
	      where idsup_data_zdb_id = '$OID'
	        and idsup_supplier_zdb_id = '$old_value';">
     <?/MISQL>
  <?/MIBLOCK>

  <?MIBLOCK COND="$(EC,$attr,mrkr_comments)">
    <?MISQL SQL="
      update marker
        set mrkr_comments = '$new_value'
        where mrkr_zdb_id = '$OID';">
    <?/MISQL>
  <?/MIBLOCK>

  <!-- Special case for updating Nomenclature Comments -->
  <?MIBLOCK COND="$(EC,$attr,comments)">
    <?MIVAR NAME=SQL1>update $target_table set $info$attr = '$new_value' where $info<?/MIVAR>
    <?MIVAR NAME=SQL2>zdb_id = '$OID';<?/MIVAR>
    <?MISQL SQL="$SQL1$SQL2"><?/MISQL>
  <?/MIBLOCK>

  <?MICOMMENT>
    ============================================================================
    ==========  DONE UPDATING INFORMATION
    ============================================================================
    We are done updating base information.  Now update the names fast search
    tables for this marker.  This code could only do the names update if
    names fields were updated.  However, that is a lot of conditions to check
    and it doesn't take that long to do the update, so just do it in all
    cases.
  <?/MICOMMENT>

  <?MISQL SQL="
    execute procedure regen_names_marker('$OID');">
  <?/MISQL>

<?/MIBLOCK> <!-- ends cond authorized -->

<!-- okay, now just bail back to the markerview to view results -->

<?MIBLOCK COND="$(NXST,$species_update)">

   <SCRIPT><?MIVAR>
      location.replace("/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-$caller&OID=$OID&UPDATE=1#$anchor")
           <?/MIVAR>
   </SCRIPT>

 <?MIELSE>


   <SCRIPT><?MIVAR>
      location.replace("/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-$caller&OID=$OID&UPDATE=1&species_selected=$species_update#$anchor")
           <?/MIVAR>
   </SCRIPT>

<?/MIBLOCK>
