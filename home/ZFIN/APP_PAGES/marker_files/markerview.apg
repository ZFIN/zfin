<?MICOMMENT>
MARKERVIEW.HTML

This file implements a viewer for MARKER records.

NOTE:
Because this page drops temporary tables it cannot be webexploded from
inside a select statement.  This page must first be retrieved with a 
select statement and then passed to webexplode from an execute function 
statement.  See discussion of the MIqry2pass variable in the Web
Datablade documentation.
<?/MICOMMENT>

<?MIERROR>
  <?MIVAR COND=$(XST,$MI_SQL)>
    SQL: $MI_SQL<br><br>
  <?/MIVAR>

  Code:    $MI_ERRORCODE <br>
  State:   $MI_ERRORSTATE <br>
  Message: $MI_ERRORMSG <br>

<?/MIERROR>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<HTML>
<head>
  <META HTTP-EQUIV="EXPIRES" CONTENT="Wed Sep 11 09:35:25 PDT 1996">

  <SCRIPT>
  function start_note() {
    top.zfinhelp=open("/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-xpatselect_note.apg","notewindow","scrollbars=no,toolbar=no,directories=no,menubar=no,status=no,resizable=yes,width=400,height=150");
  }
  
  function call_mapplet() {
	document.mapper.submit();
  }

  function call_zmapplet() {
	document.mapper.action='/<!--|CGI_BIN_DIR_NAME|-->/view_zmapplet.cgi';
	document.mapper.submit();
  }

  function edit_linkage(link_id,oid) {
	window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-edit_linkage.apg&link_id='+link_id+'&OID='+oid)
  }

  function edit_go(oid) {
	window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-markergoentry.apg&OID='+oid)
  }

  function get_spdesc(oid) {
	window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-markerspcomments.apg&OID='+oid)
  }
  </SCRIPT>

  <?MIVAR COND="$(AND,$(NXST,$OID),$(XST,$temp_oid))" NAME=$OID>$temp_oid<?/MIVAR>

  <?MISQL SQL="select object from webPages where ID='aa-chromoscripts.apg';">$1  <?/MISQL>


  <SCRIPT>
   function info() {
	window.alert('ANONYMOUS LINKAGE:\n This linkage has not been published yet. ZFIN supports anonymous linkages to promote scientific \ncollaboration; you should contact the submitter of this mapping data (just click the link) \nto negotiate access to this information.');
   }
  //  initialize view_mapplet parameters   
   marker = '';


    function Blast(acc_num,blast_url) {
        helpwin=open(blast_url+acc_num);
    }

  </SCRIPT>
</HEAD>


<!------------------------------------------------------>   
<BODY>

<basefont size=2>
<?MIVAR name=$highlight><!--|HIGHLIGHT_COLOR|--><?/MIVAR>

<?MIVAR NAME=$MI_NOVALUE><?/MIVAR>
<?MIVAR NAME=$MI_NULL><?/MIVAR>

<?MIBLOCK COND="$(NXST,$OID)">
  <p>
  ERROR -- something bad happened -- no OID passed in!
<?/MIBLOCK>

<!-- One block till </body> ---------------------------->
<?MIBLOCK COND="$(XST,$OID)">

  <!-- set default value for variables ----------------->
  <?MIVAR COND="$(NXST,$distance)" NAME=$distance><?/MIVAR>
  <?MIVAR COND="$(NXST,$lod)" NAME=$lod><?/MIVAR>
  <?MIVAR COND="$(NXST,$metric)" NAME=$metric><?/MIVAR>
  <?MIVAR COND="$(NXST,$lg)" NAME=$lg><?/MIVAR>
  <?MIVAR COND="$(NXST,$map_comments)" NAME=$map_comments><?/MIVAR>	
  <?MIVAR NAME=$ref_map><?/MIVAR>

  <!-- default user as GUEST---------------------->
  <?MIVAR NAME=$userid>GUEST<?/MIVAR>

  <!-- NOW a slight ugliness that would go away if/when we re-implement the MAP_MARKER stuff as hierarchical classes: we don't know what type up marker we are trying to view, and yet we need to know exactly that in order to know what table to select from. So we first look at ZFIN id to determine type, which determines table
  -->

  <?MIVAR NAME=$target_table COND="$(>,$(POSITION,$OID,GENE),0)">marker<?/MIVAR>
  <?MISQL SQL="
    select mrkr_name, mrkr_type, mrkrtype_type_display, mrkr_abbrev, mrkr_comments 
      from marker, marker_types 
      where mrkr_zdb_id = '$OID'
	and mrkr_type = marker_type;">
  <?/MISQL>
  <?MIVAR NAME=$name>$1<?/MIVAR>
  <?MIVAR NAME=$marker_type>$2<?/MIVAR>
  <?MIVAR NAME=$marker_type_display>$3<?/MIVAR>
  <?MIVAR NAME=$abbrev>$4<?/MIVAR>
  <?MIVAR NAME=$comments>$5<?/MIVAR>
  <?MIVAR NAME=$id_exist COND="$(>,$MI_ROWCOUNT,0)">t<?/MIVAR>

  <?MISQL SQL="
	select * from marker_type_group_member
	 where mtgrpmem_mrkr_type_group='GENEDOM'
	   and mtgrpmem_mrkr_type = '$marker_type';
	">
  <?/MISQL>
  <?MIVAR COND="$(>,$MI_ROWCOUNT,0)" NAME=type_of_genedom>t<?/MIVAR>
   
  <!-- if no match for the entered ID, display not found msg ------>
  <?MIBLOCK COND="$(OR,$(EC,$name,$MI_NOVALUE),$(NXST,$id_exist))">
     <!-- page header display ----------------->
     <?MISQL SQL="select WebExplode(object,'') from webPages where ID='aa-htmlpageheader.apg';">$1<?/MISQL>
     <!-- look to see if replaced zdb_id -->
     <?MISQL SQL="select WebExplode(object,'') from webPages where ID='aa-zdb_history.apg';">$1<?/MISQL>
    
     <?MIBLOCK COND="$(NXST,$new_oid)">
       <form><center><font size=4>
        <?MIVAR> <b>Requested ID not found on ZFIN.<?/MIVAR></font>      
       </form>
     <?/MIBLOCK>  
 
 
  <?MIELSE> <!-- if entered ID has an entry in ZFIN------------------------>

      <SCRIPT> <!-- functions for update--------------------->
      <?MIVAR COND="$(XST,$UPDATE)">
	function doit(attr,attr_type,print_name) {
		doit(attr,attr_type,print_name,'');
	}
	function doit(attr,attr_type,print_name,xtra_param) {
		window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-markerupdate.apg&OID=$OID&attr='+attr+'&attr_type='+attr_type+'&print_name='+print_name+'&xtra_param='+xtra_param+'&target_table=marker');
	}

	function Delete_listitem(item_name,item_id) {
		window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-markerupdate.apg&OID=$OID&attr='+item_name+'&attr_type=special-listitem&old_value='+item_id+'&new_value=deleted&target_table=marker');
	}

	function Delete_alias(alias,marker_id) {
 		 window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-markerupdate.apg&OID=$OID&attr=dalias_alias&attr_type=delete-alias&old_value='+alias+'&new_value=deleted&target_table=marker');
	}
	
	function Delete_attrib(subattr,data_zdbId,source_zdbId,info) {
		window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-markerupdate.apg&OID=$OID&dataOID='+data_zdbId+'&attr='+subattr+'&attr_type=special-listitem&old_value='+source_zdbId+'&new_value=deleted&target_table=marker&info='+info);
	}

	function Delete_mrel(mrel_id, marker_id, type) {
 		 window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-markerupdate.apg&OID=$OID&attr=marker_relationship&attr_type=delete-mrkrrelation&old_value='+mrel_id+'&new_value=deleted&target_table=marker&info='+type);
	}

	function new_ortho() {
		var speciesind=document.updater1.species.selectedIndex;
		var species=document.updater1.species[speciesind].value;
		var oname=document.updater1.oname.value;
		var oabbrev=document.updater1.oabbrev.value;
		if ((oname != '') && (oabbrev != '')) {
  		 window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-markerupdate.apg&OID=$OID&attr=orthologue&attr_type=special-newortho&old_value='+species+'&new_value='+escape(oname)+'&target_table=marker&info='+oabbrev);
  		}
	}

	function new_seqnum() {
		var dbind=document.updateseq.seqdb.selectedIndex;
		var dbname=document.updateseq.seqdb[dbind].value;
		var seq_acc=document.updateseq.seq_acc.value;
		var dbind=document.updateseq.seq_super.selectedIndex;
		var seq_type=document.updateseq.seq_super[dbind].value;
		if ((seq_acc != '')&& (dbname == 'Genbank')) {
  		 window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-markerupdate.apg&ancor=sequence&OID=$OID&attr=seqnum&attr_type=special-check-newseqnum&old_value='+dbname+'&new_value='+seq_acc+'&target_table=marker&fdbcont_super='+seq_type);
  		}
		else if (seq_acc != '') {
		 window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-markerupdate.apg&ancor=sequence&OID=$OID&attr=seqnum&attr_type=special-newseqnum&old_value='+dbname+'&new_value='+seq_acc+'&target_table=marker&fdbcont_super='+seq_type);
  		}
	}

	function update_seqnum() {
		var dbind=document.updateseq.upd_seq_zdb.selectedIndex;
		var seq_zdb=document.updateseq.upd_seq_zdb[dbind].value;
		var seq_len=document.updateseq.upd_seq_length.value;
		var dbind=document.updateseq.upd_seq_type.selectedIndex;
		var seq_type=document.updateseq.upd_seq_type[dbind].value;
		if (seq_zdb != '') {
  		 window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-markerupdate.apg&anchor=sequence&OID=$OID&attr=seqnum&attr_type=special-updateseqnum&old_value=dblink_length&new_value='+seq_len+'&target_table=marker&dataOID='+seq_zdb+'&xtra_param='+seq_type);
  		}
	}

	function setChimericism(old_value) {
	<?MICOMMENT> index 0 = true; index 1 = false <?/MICOMMENT>
				
		if (document.updateseq.chimericism[0].checked) {
		  var isChimeric = 't';
		}
		else {
		  var isChimeric = 'f';
		}
		
		if (isChimeric != old_value) {
  		 window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-markerupdate.apg&anchor=sequence&OID=$OID&attr=clone_is_chimeric&attr_type=boolean&old_value='+old_value+'&new_value='+isChimeric+'&target_table=clone');
  		}
	}
	function new_proseqnum() {
		var dbind=document.updater.prt_seqdb.selectedIndex;
		var dbname=document.updater.prt_seqdb[dbind].value;
		var seq_acc=document.updater.prt_seq_acc.value;
		if (seq_acc != ''){
		  window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-markerupdate.apg&OID=$OID&attr=seqnum&attr_type=special-newseqnum&old_value='+dbname+'&new_value='+seq_acc+'&target_table=marker&fdbcont_super=protein&fdbcont_data=domain');
  		}
	}	
	function new_mrkrrel() {
		var mrkrrelind = document.updaterrel.relship.selectedIndex;
		var mrkrrel_name = document.updaterrel.relship[mrkrrelind].value;
		var mrkr_abbrev = document.updaterrel.mrkr_abbrev.value;
		mrkrrel_name.replace(/ /,"%20");
		if (mrkr_abbrev != '') {
		  window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-markerupdate.apg&OID=$OID&attr=mrkrrel&attr_type=special-newmrkrrel&old_value='+mrkrrel_name+'&new_value='+mrkr_abbrev+'&target_table=marker');
  		}
	}


	function update_nomen_comments(nomen_zdb,comments_obj) {
        	var new_comments = escape(comments_obj.value);
		if ((nomen_zdb != '') && (new_comments != '')) {
		  window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-markerupdate.apg&OID='+nomen_zdb+'&attr=comments&attr_type=textarea&old_value=$OID&new_value='+new_comments+'&target_table=marker_history&info=mhist_');
  		}
	}


	function new_attrib_nomen(nomen_zdb,pub_obj) {
        	var pub_id = escape(pub_obj.value);
		if ((nomen_zdb != '') && (pub_id != '')) {
		  window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-markerupdate.apg&OID=$OID&attr=recattrib&attr_type=special-newattrib&old_value='+nomen_zdb+'&new_value='+pub_id+'&target_table=marker&info=nomen');
  		}
	}

	function new_attrib_mrel() {
		var mrkr_abbrev=document.updaterrel.attrib_mrkr_abbrev.value;
		var pub_id=document.updaterrel.attrib_mrel_pubid.value.toUpperCase();
		if ((mrkr_abbrev != '') && (pub_id != '')) {
		  window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-markerupdate.apg&OID=$OID&attr=recattrib&attr_type=special-newattrib&old_value='+mrkr_abbrev+'&new_value='+pub_id+'&target_table=marker&info=mrel');
  		}
	}
	
	function new_attrib_ssprevname() {
		var prev_name=document.updater.attrib_ssprevname.value;
		var pub_id=document.updater.attrib_ssprevname_pubid.value.toUpperCase();
		if ((prev_name != '') && (pub_id != '')) {
		  window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-markerupdate.apg&OID=$OID&attr=recattrib&attr_type=special-newattrib&old_value='+prev_name+'&new_value='+pub_id+'&target_table=marker&info=namealias');
  		}
	}

	function new_attrib_prevname() {
		var prev_name=document.updater.attrib_prevname.value;
		var pub_id=document.updater.attrib_prevname_pubid.value.toUpperCase();
		if ((prev_name != '') && (pub_id != '')) {
		  window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-markerupdate.apg&OID=$OID&attr=recattrib&attr_type=special-newattrib&old_value='+prev_name+'&new_value='+pub_id+'&target_table=marker&info=namealias');
  		}
	}

	function new_attrib_prtnseq() {
		var seq_acc = document.updater.attrib_prtn_seqacc.value;
		var pub_id = document.updater.attrib_prtn_pubid.value.toUpperCase();
		if((seq_acc != '')&&(pub_id != '')) {
			window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-markerupdate.apg&OID=$OID&attr=recattrib&attr_type=special-newattrib&old_value='+seq_acc+'&new_value='+pub_id+'&target_table=marker&info=seqacc');
		}
	}	
	function new_attrib_seq() {
		var seq_acc = document.updateseq.attrib_seq_acc.value;
		var pub_id = document.updateseq.attrib_seq_pubid.value.toUpperCase();
		if((seq_acc != '')&&(pub_id != '')) {
			window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-markerupdate.apg&OID=$OID&attr=recattrib&attr_type=special-newattrib&old_value='+seq_acc+'&new_value='+pub_id+'&target_table=marker&info=seqacc');
		}
	}
	function new_attrib_mutant(dataid) {
		var pub_id = document.updater.attrib_mutant_pubid.value.toUpperCase();
		if((dataid != '')&&(pub_id != '')) {
			window.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-markerupdate.apg&OID=$OID&attr=colattrib&attr_type=special-newattrib&old_value='+dataid+'&new_value='+pub_id+'&target_table=marker&info=cloned_gene');
		}
	}


        <?/MIVAR> 
      </SCRIPT>

     <!-- user authorization check-------------------------------> 
 
      <?MISQL COND="$(NXST,$UPDATE)" SQL="select WebExplode(object,'page_title=View $marker_type') from webPages where ID='aa-secure_navigation.apg';">$1
      <?/MISQL>
     
      <!-- If updating, only let owner update anything -->
      <?MISQL COND="$(XST,$UPDATE)" SQL="select WebExplode(object,'page_title=Update Gene&permission=owns&rtype=marker') from webPages where ID='aa-secure_navigation.apg';">$1
      <?/MISQL>


      <?MIBLOCK COND="$(NC,$AUTHORIZED,false)"> <!-- if authorized---------->

	  <!-- title for webpage history ----------->	
          <?MIBLOCK COND="$(XST,$UPDATE)">
		<?MIVAR>
 			<TITLE>ZFIN Update: $abbrev</title>
		<?/MIVAR>
	  <?MIELSE>
		<?MIVAR>
 			<TITLE>ZFIN View: $abbrev</title>
		<?/MIVAR>
          <?/MIBLOCK>
          
	  <!-- page header display ----------------->
  	  <?MISQL SQL="select WebExplode(object,'') from webPages where ID='aa-htmlpageheader.apg';">$1<?/MISQL>

	  <!-- NOW JUST TOSS OUT THE RETRIEVED DATA IN A TABLE -->
	  <!-- FIRST THROW UP THE ZDB DATA MANAGER FOR THE RECORD -->

  	   <?MISQL COND="$(NXST,$UPDATE)" SQL="select WebExplode(object,'rtype=marker') from webPages where ID='aa-data_mgr.apg';">$1
	   <?/MISQL>

	  <!----- OKAY, NOW  THROW UP THE  MARKER INFO ------------------>

<!----------------------------------------------------------->       	   
<p>

<?MIVAR COND="$(XST,$UPDATE)"> <!---- define button to go back------>
 
   <form name=updater><!-- for buttons for update purpose----------->
   <center><font size=+2>
   <input type=button 
          value=" DONE UPDATING. Back to Viewing! " onClick="document.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-markerview.apg&OID=$OID')"> 
   </font></center>
   
<?/MIVAR>


<?MIBLOCK COND="$(NXST,$UPDATE)"> <!---- define Input Welcome button---->     
  <table width="15%" align=right>
   <tr> 
   <?MIVAR>
        <form method=post 
              action="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->" 
              target=comments>
           <input type=hidden name=subject value="$abbrev">
           <input type=hidden name=marker_id value="$OID">
           <input type=hidden name=MIval value="aa-your_input_welcome.apg">
           <input type=hidden name=page_id value="$OID">
           <td><input type=submit value="Your Input Welcome"></td>         
         </form>
    <?/MIVAR>
    </tr>
   </table>
<?/MIBLOCK> 

<!-------- Display marker name. When update, add button in front--------->   

<?MIVAR COND="$(XST,$UPDATE)">
    	<INPUT TYPE=button value=Update onClick="doit('mrkr_name','text','$marker_type_display+Name')">
<?/MIVAR>

<FONT size=+1>
<?MIBLOCK COND="$(XST,$type_of_genedom)">
    	<?MIVAR NAME=$title>$marker_type_display Name<?/MIVAR>
	<?MIVAR><b>$title: &nbsp;<i>$name</i></b><?/MIVAR>
<?MIELSE>
    	<?MIVAR NAME=$title>$marker_type_display<?/MIVAR>
	<?MIVAR><b>$title: &nbsp;$name </b><?/MIVAR>
<?/MIBLOCK>
</FONT>
<br>

<!-- If gene, Display gene symbol. When update, add button in front.----->     
<?MIVAR COND="$(AND,$(XST,$type_of_genedom),$(XST,$UPDATE))">
     	<INPUT TYPE=button value=Update onClick="doit('mrkr_abbrev','text','$marker_type_display+Abbrev')"> 
<?/MIVAR>


<?MIVAR COND="$(XST,$type_of_genedom)">
  <FONT size=+1><b>$marker_type_display Symbol:&nbsp;<i>$abbrev</i></b></FONT>
<?/MIVAR>
<br>

<!---------------------------------------------------------------->  

  


<!--------- Display previous names --------------------------------> 
<?MIVAR COND="$(XST,$UPDATE)">
  <INPUT TYPE=button 
    value=Add
    onClick="doit('dalias_alias','text','Alias','alias')">
<?/MIVAR> 

<b>Previous Names:</b>

<?MISQL SQL="
  select dalias_alias, dalias_zdb_id
    from data_alias
    where dalias_data_zdb_id = '$OID' and dalias_group = 'alias';">

  <?MIVAR COND="$(AND,$(=,$MI_CURRENTROW,1),$(XST,$UPDATE))">
    <br><b>Add Reference:</b> 
    Previous name:<input type=text name=attrib_prevname>	
    Reference:<input type=text name=attrib_prevname_pubid>
    <input type=button value="Add" onClick=new_attrib_prevname();> 
  <?/MIVAR>


  <?MIVAR NAME=$alias>$1<?/MIVAR>
  <?MIVAR NAME=$aliasId>$2<?/MIVAR>
  <?MIVAR COND="$(XST,$alias)" NAME=$alias_plus DELIMIT=" " REPLACE="+">$alias<?/MIVAR>
  <?MIVAR COND="$(XST,$UPDATE)">
    <br> 
    <INPUT TYPE=button 
      value=Delete 
      onClick="Delete_alias('$alias_plus','$OID')">
  <?/MIVAR>
  $(IF,$(AND,$(NXST,$UPDATE),$(>,$MI_CURRENTROW,1)),;) $alias

  <?MIBLOCK COND="$(XST,$aliasId)">	
      <?MISQL SQL="select WebExplode(object,'dataId=$aliasId&type=recattrib') from webPages where ID='aa-miniref_display.apg';">$1<?/MISQL>
  <?/MIBLOCK>
	

<?/MISQL>

<br>
<!----------------------------------------------------------------> 



<!--------- Display sequence similarities --------------------------------> 

<?MIVAR NAME="display_sequence_similarity">false<?/MIVAR>
<?MISQL SQL="select count(*) 
	     from data_alias 
	     where dalias_data_zdb_id = '$OID' 
	       and dalias_group = 'sequence similarity';">
<?MIVAR COND="$(>,$1,0)" NAME="display_sequence_similarity">true<?/MIVAR>
<?/MISQL>

<?MIBLOCK COND="$(EQ,$display_sequence_similarity,true)">

  <?MIVAR COND="$(XST,$UPDATE)">
      <INPUT TYPE=button 
        value=Add
        onClick="doit('dalias_alias','text','Alias','sequence+similarity')">
  <?/MIVAR> 
 
  <b>Keywords and Sequence Similarities:</b>

 <?MISQL SQL="
  select dalias_alias, dalias_zdb_id
    from data_alias
    where dalias_data_zdb_id = '$OID' and dalias_group = 'sequence similarity';">

  <?MIVAR COND="$(AND,$(=,$MI_CURRENTROW,1),$(XST,$UPDATE))">
    <br><b>Add Reference:</b> 
    Sequence similarity:<input type=text name=attrib_ssprevname>	
    Reference:<input type=text name=attrib_ssprevname_pubid>
    <input type=button value="Add" onClick=new_attrib_ssprevname();> 
  <?/MIVAR>


  <?MIVAR NAME=$alias>$1<?/MIVAR>
  <?MIVAR NAME=$aliasId>$2<?/MIVAR>
  <?MIVAR COND="$(XST,$alias)" NAME=$alias_plus DELIMIT=" " REPLACE="+">$alias<?/MIVAR>
  <?MIVAR COND="$(XST,$UPDATE)">
    <br> 
    <INPUT TYPE=button 
      value=Delete 
      onClick="Delete_alias('$alias_plus','$OID')">
  <?/MIVAR>
  $(IF,$(AND,$(NXST,$UPDATE),$(>,$MI_CURRENTROW,1)),;) $alias

  <?MIBLOCK COND="$(XST,$aliasId)">	
      <?MISQL SQL="select WebExplode(object,'dataId=$aliasId&type=recattrib') from webPages where ID='aa-miniref_display.apg';">$1<?/MISQL>
  <?/MIBLOCK>
	

<?/MISQL>

<br>
<?/MIBLOCK>


<!---------------------------------------------------> 




<!--------------- Dispalay NOMENCLATURE HISTORY -------------------->

<?MISQL SQL="select * from marker_history where mhist_mrkr_zdb_id = '$OID'">
<?/MISQL>
<?MIVAR COND="$(AND,$(XST,$type_of_genedom),$(>,$MI_ROWCOUNT,0))"><font size=-1><A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-nomenview.apg&OID=$OID&abbrev=$abbrev$(IF,$(XST,$UPDATE),&UPDATE=1)">Nomenclature History</A></font><?/MIVAR>
<br>
<!---------------- end NOMENCLATURE HISTORY ------------------------> 



<!--------- Display description  ---------------------------------> 
<?MIVAR COND="$(XST,$UPDATE)">
<INPUT TYPE=button value="Update" onClick="doit('mrkr_comments','textarea','Description')"> 
<?/MIVAR> 
<?MIVAR COND="$(OR,$(>,$(POSITION,$OID,BAC),0),$(>,$(POSITION,$OID,PAC),0))">
<b>EMBL </b>
<?/MIVAR>
<b>Description:</b>

<?MIVAR>$(IF,$(NC,$comments,NULL),$comments,None submitted.)<?/MIVAR>
<p>

<!-----------end Display description ------------------------------->



<!-------- CLONE info ------------------------------------------->
<?MIVAR NAME="SOURCE"> <?/MIVAR>
<?MISQL SQL="select WebExplode(object,'CLONE_MARKER_ID=$OID') from webPages where ID='aa-clonebox.apg' 
	     and exists (select 'x' from clone where clone_mrkr_zdb_id = '$OID');"><br><hr width=80%><b>CLONE DATA: </b>$1<?/MISQL>

<!-------- end CLONE -------------------------------------------->


<!-------- MUTANT LOCUS ------------------------------------------>

<?MISQL SQL="
   select zdb_id, locus_name, abbrev from locus where cloned_gene='$OID';">
<?/MISQL>
<?MIVAR NAME=$locus>$1<?/MIVAR>

<?MIBLOCK COND="$(>,$MI_ROWCOUNT,0)">
  
  <hr width = "80%">
  <?MIVAR>
     <TABLE width="100%" cellpadding=3 border=0 bgcolor="$highlight" cols=2 rows=1>
  <?/MIVAR>
  <TR><TD><font color="red">
  <?MIVAR>
  <b>Mutant Locus:</b></font>
  <?MIVAR COND="$(XST,$UPDATE)">
  <br><b>Add reference:</b>
  Reference:<input type=text name=attrib_mutant_pubid>
  <input type=button value="Add" onClick=new_attrib_mutant("$1");><br> 
  <?/MIVAR>	 
  The mutant locus <b><A HREf="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-locusview.apg&OID=$1">$2 ($3) </A> </b> has been shown to correspond to Gene <b>$abbrev</b>. 
  <?MISQL SQL="select WebExplode(object,'dataId=$1&type=colattrib&info=cloned_gene') from webPages where ID='aa-miniref_display.apg';">$1<?/MISQL>
  <?/MIVAR>
  </TD>
  </TR></TABLE>
<?/MIBLOCK>
<!--------------------------------------------------------------->


<!-------------- GENE PRODUCT ---------------------------------->
<!-- only for genes, and only display when there is information---->

<?MIBLOCK COND="$(XST,$type_of_genedom)">

    <?MIVAR NAME=qualifier>false<?/MIVAR>
    <?MIVAR NAME=$molgoid><?/MIVAR>
    <?MIVAR NAME=$moldisp><?/MIVAR>
    <?MIVAR NAME=$molterm><?/MIVAR>
    <?MIVAR NAME=$molmrkrgoevid><?/MIVAR>


  <?MIVAR NAME=$titledisplay>0<?/MIVAR>
  <?MISQL SQL="select fdb_db_query from foreign_db where fdb_db_name='QuickGO'">
     <?MIVAR NAME=$dbquery>$1<?/MIVAR>
  <?/MISQL>

<!-- use vector storing the three ontology and loop through -->
<?MIVAR NAME=ontologies><?/MIVAR>
<?MISQL SQL="select gont_ontology_name from go_ontology order by gont_order"> 
	$(SETVAR,$ontologies[$MI_CURRENTROW],$1)
<?/MISQL>
<?MIBLOCK INDEX=$ontology FOREACH=$ontologies>

    <?MISQL MAXROWS=1 SQL="select mrkrgoev_zdb_id from go_term,go_evidence_code,marker_go_term_evidence where mrkrgoev_mrkr_zdb_id='$OID' and mrkrgoev_go_term_zdb_id=goterm_zdb_id and mrkrgoev_evidence_code=goev_code and goterm_ontology='$ontology' order by goev_display_order"><?/MISQL>
   <?MIVAR NAME=$evid>$1<?/MIVAR>
   <?MISQL SQL="select count(*) from go_evidence_flag where goevflag_mrkrgoev_zdb_id='$evid'">
   <?MIBLOCK COND="$(>,$1,0)">
    <?MIVAR NAME=qualifier>true<?/MIVAR>
   <?/MIBLOCK>
  <?/MISQL>
<?/MIBLOCK>

  <?MISQL SQL="
        select count(distinct mrkrgoev_go_term_zdb_id) :: integer
          from marker_go_term_evidence
         where mrkrgoev_mrkr_zdb_id = '$OID'  ;">
  <?/MISQL>


 <?MIVAR NAME=$rowcount>$1<?/MIVAR> 
 <?MIBLOCK COND="$(>,$rowcount,0)">  
	<hr width = "80%"> 
  	<b>GENE PRODUCTS: </b><br> 
        <?MIVAR>$(SETVAR,$titledisplay,1)<?/MIVAR>
    <?MIVAR>
	<p><b>Gene Ontology</b><?/MIVAR>
      <?MIVAR COND="$(XST,$UPDATE)">
      <INPUT TYPE=button value="Update" onClick="edit_go('$OID')"> 
    <?/MIVAR> 
 <?MIELSE>

      <?MIBLOCK COND="$(XST,$UPDATE)">

	<hr width = "80%"> 
  	<b>GENE PRODUCTS: </b><br> 
        <?MIVAR>$(SETVAR,$titledisplay,1)<?/MIVAR>
	<b>Gene Ontology</b>
      <?MIVAR>
      <INPUT TYPE=button value="Update" onClick="edit_go('$OID')"><?/MIVAR> 
     <?/MIBLOCK>
  <?/MIBLOCK>

    <?MIBLOCK COND="$(>,$rowcount,0)">  
    <?MIVAR><TABLE width =100% border=0 bgcolor=$highlight><?/MIVAR>
    <TR bgcolor=#ccccccc>
         <TD align=left width = 15%><b><A HREF="/zf_info/GO.html">Ontology</A></b></TD>
        <?MIBLOCK COND="$(EC,$qualifier,true)">
        <TD align=left width = 13%><b>Qualifier</b></TD>           
        <?/MIBLOCK> 
         <TD><b>GO Term</b></TD> 


<!-- use vector storing the three ontology and loop through for display -->

<?MIBLOCK INDEX=$ontology FOREACH=$ontologies>
    
    <?MIVAR NAME=flgct>0<?/MIVAR>
    <?MIVAR NAME=flag><?/MIVAR>
    <?MIVAR NAME=isnot>f<?/MIVAR>
    <?MIVAR NAME=contribs>f<?/MIVAR>

    <?MISQL MAXROWS=1 SQL="select goterm_go_id,goev_display_order,goterm_name,mrkrgoev_zdb_id from go_term,go_evidence_code,marker_go_term_evidence where mrkrgoev_mrkr_zdb_id='$OID' and mrkrgoev_go_term_zdb_id=goterm_zdb_id and mrkrgoev_evidence_code=goev_code and goterm_ontology='$ontology' order by goev_display_order, goterm_name"><?/MISQL>

    <?MIVAR NAME=$molgoid>$1<?/MIVAR>
    <?MIVAR NAME=$moldisp>$2<?/MIVAR>
    <?MIVAR NAME=$molterm>$3<?/MIVAR>
    <?MIVAR NAME=$molmrkrgoevid>$4<?/MIVAR>

    <?MISQL SQL="select goevflag_gflag_name from go_evidence_flag where goevflag_mrkrgoev_zdb_id='$molmrkrgoevid'"><?/MISQL>
    <?MIVAR NAME=flgct>$MI_ROWCOUNT<?/MIVAR>
    <?MIVAR NAME=flag>$1<?/MIVAR>
    
    <?MICOMMENT>??? donot know what "'f' as mrkrgo_is_false_ref" is for ???<?/MICOMMENT> 
    <?MISQL SQL="select distinct goterm_go_id,goev_display_order,goterm_name,'f' as mrkrgo_is_false_ref from go_term,go_evidence_code,marker_go_term_evidence where mrkrgoev_mrkr_zdb_id='$OID' and mrkrgoev_go_term_zdb_id=goterm_zdb_id and mrkrgoev_evidence_code=goev_code and goterm_ontology='$ontology' order by goev_display_order"><?/MISQL>
    <?MIVAR NAME=$anncount>$MI_ROWCOUNT<?/MIVAR>
    
    <?MIBLOCK COND="$(>,$flgct,0)">
       <?MIBLOCK COND="$(=,$flgct,2)">
     	<?MIVAR NAME=$isnot>t<?/MIVAR>
     	<?MIVAR NAME=$contribs>t<?/MIVAR>
      <?MIELSE>
        <?MIBLOCK COND="$(EC,$flag,not)">
           <?MIVAR NAME=$isnot>t<?/MIVAR>
        <?/MIBLOCK>
        <?MIBLOCK COND="$(EC,$flag,contributes to)">
        	<?MIVAR NAME=$contribs>t<?/MIVAR>
        <?/MIBLOCK>
     <?/MIBLOCK>
   <?/MIBLOCK>
   <?MIBLOCK COND="$(EC,$isnot,t)">
  	<?MIVAR NAME=not><i>NOT</i><?/MIVAR>
   <?MIELSE>
  	<?MIVAR NAME=not><?/MIVAR>
   <?/MIBLOCK>
   <?MIBLOCK COND="$(>,$anncount,0)">
	<TR><TD nowrap><?MIVAR>$ontology<?/MIVAR></TD>
   <?/MIBLOCK>
   <?MIBLOCK COND="$(OR,$(EC,$contribs,t),$(EC,$isnot,t))">
     <?MIBLOCK COND="$(EC,$contribs,t)">
      <td nowrap><?MIVAR>$not<?/MIVAR><i>Contributes to</i></td>
     <?MIELSE>
      <td nowrap><i><?MIVAR>$not<?/MIVAR></i></td>
     <?/MIBLOCK>
   <?MIELSE>
     <?MIBLOCK COND="$(EC,$qualifier,true)">
       <td></td>
     <?/MIBLOCK>
   <?/MIBLOCK>

   <?MIBLOCK COND="$(>,$anncount,1)">
       <?MIVAR><TD align=left><A HREF=$dbquery$molgoid>$(TRIM,$molterm)</a>
     (<a href="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-markergoview.apg&OID=$OID"><i>more</i></a>)</TD><?/MIVAR>
   <?/MIBLOCK>

   <?MIBLOCK COND="$(=,$anncount,1)">
     <?MIVAR><TD align=left><A HREF=$dbquery$molgoid>$molterm</a>
     <a href="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-markergoview.apg&OID=$OID"></a></TD><?/MIVAR>
   <?/MIBLOCK>
   </TR>
<?/MIBLOCK>
<?-- end three functions -->
</TABLE>
  <?MIBLOCK COND="$(>,$rowcount,0)">
    <?MIVAR><TABLE width =100% border=0 bgcolor=$highlight><?/MIVAR>
	<?MIVAR><TR><TD><A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-markergoview.apg&OID=$OID">All GO Terms (<?MIVAR>$rowcount)</A><?/MIVAR><?/MIVAR></TD>
</TR></TABLE>
  <?/MIBLOCK>
<?/MIBLOCK>
  <!--------------- end of Gene Ontology --------------->


  <!-----------------  Protein Sequence  -------------->
  <?MIVAR NAME=$lastitem><?/MIVAR>
  <?MISQL SQL="
    select fdb_db_name, 
	   fdb_db_query || dblink_acc_num || 
	     (case fdb_url_suffix when NULL then '' else fdb_url_suffix end),
           dblink_acc_num_display, fdb_db_significance, dblink_zdb_id
      from db_link, foreign_db, foreign_db_contains 
      where dblink_linked_recid = '$OID' 
        and dblink_fdbcont_zdb_id = fdbcont_zdb_id
        and fdbcont_fdb_db_name = fdb_db_name
        and fdbcont_fdbdt_super_type = 'protein'
      order by fdb_db_significance, fdb_db_name, dblink_acc_num_display;">

    <?MIVAR NAME=$dblinkZdbId>$5<?/MIVAR>
    
    <?MIBLOCK COND="$(=,$MI_CURRENTROW,1)">
	
        <?MIBLOCK COND="$(=,$titledisplay,0)">
		<hr width = "80%">
  		<b>GENE PRODUCTS: </b> 
		<?MIVAR>$(SETVAR,$titledisplay,1)<?/MIVAR>
	<?/MIBLOCK>
	<p><b>Protein Families, Domains and Sites: </b>
  	<?MIVAR>
	 <?MIBLOCK COND="$(XST,$UPDATE)">
          <br>
  	  <b>Add link to Protein Seq DB:</b> &nbsp;
  	  DBname:<SELECT name=prt_seqdb>
  	  <?MISQL SQL="
	    select fdbcont_fdb_db_name 
	      from foreign_db_contains
	      where fdbcont_fdbdt_super_type = 'protein'
	      order by fdbcont_fdb_db_name;">
	    <option value="$1">$1</option>
  	  <?/MISQL>
  	  </SELECT>
 	   Accession:<input type=text size=15 name=prt_seq_acc> 
  	   <input type=button value="Add it!" onClick=new_proseqnum();>
     
 	   <?MIVAR><br>
  	  <b>Add reference to Protein Seq:</b> &nbsp;
  	   Accession: <input type=text size=15 name=attrib_prtn_seqacc>
 	   Reference: <input type=text size=15 name=attrib_prtn_pubid> 
  	   <input type=button value="Add it!" onClick=new_attrib_prtnseq();>
           <?/MIVAR>
 	 <?/MIBLOCK>
	<TABLE width = "100%" border = 0 bgcolor = "$highlight">
 	 <?/MIVAR>
        <TR> 
    <?/MIBLOCK>
    $(IF,$(AND,$(NC,$lastitem,$1),$(>,$MI_CURRENTROW,1)),</TD>)
    $(IF,$(NC,$lastitem,$1),<TD align=left>)
    <li>

    $(IF,$(XST,$UPDATE),"<input type=button value=delete onClick=Delete_listitem('db_link','"$(URLENCODE,$1:$3)"')>")
    <A HREF="$2">$1:$3</A> <?MISQL SQL="select WebExplode(object,'dataId=$5&type=recattrib') from webPages where ID='aa-miniref_display.apg';">$1<?/MISQL>

    $(SETVAR,$lastitem,$1)
 <?/MISQL>
 <?MIVAR>$(IF,$(>,$MI_ROWCOUNT,0),</TD></TR></TABLE>)<?/MIVAR>

  <!--------------end of Protein Sequences --------->

  <!--------------- Gene Product Description ------->
  <?MISQL SQL="select dblink_linked_recid 
		 from external_note, db_link
		where extnote_data_zdb_id = dblink_zdb_id
		  and dblink_linked_recid = '$OID';">
  <?/MISQL>	
  <?MIBLOCK COND="$(>,$MI_ROWCOUNT,0)">	
        <?MIBLOCK COND="$(=,$titledisplay,0)">
		<hr width = "80%">
  		<b>GENE PRODUCTS: </b> 
		<?MIVAR>$(SETVAR,$titledisplay,1)<?/MIVAR>
	<?/MIBLOCK>
	<p><?MIVAR><A HREF=/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-geneprddescription.apg&OID=$OID><b>Gene Product Description</b></A><?/MIVAR>

  <?/MIBLOCK>
  <!-----------end of Gene Product Description ------->

<?/MIBLOCK>
<p>
<!------------------ end of GENE PRODUCT ---------------------->

<!--------------- GENE EXPRESSION  ---------------------------->
<?MICOMMENT> ceate a list of chimeric clones <?/MICOMMENT>
<?MIVAR NAME=chimeric_clone_list><?/MIVAR>
<?MISQL SQL="select clone_mrkr_zdb_id from clone where clone_is_chimeric = 't';">
  $(VECAPPEND,$chimeric_clone_list,$1)
<?/MISQL>
<?MIVAR NAME=chimeric_clone_list>$(SEPARATE,$chimeric_clone_list,"','")<?/MIVAR>  

<!-------  only for cloned genes or ests. ---------->
<?MIBLOCK COND="$(OR,$(XST,$type_of_genedom),$(EC,$marker_type,EST))">

  <?MICOMMENT>******* GENE or EST **********<?/MICOMMENT>
  <?MIVAR NAME=$XPAT_ZDB_ID><?/MIVAR>

  <?MISQL SQL="
    select count(*)::integer
      from expression_pattern 
      where '$OID' in (xpat_gene_zdb_id, xpat_probe_zdb_id)">
  <?/MISQL>
  <?MIVAR NAME=$expexists>$1<?/MIVAR>

  <?MIBLOCK COND="$expexists">
    <HR width="80%">
    <b>GENE EXPRESSION: </b><font size=-1>(<a href="javascript:start_note();">current status</a></font>)
    <?MISQL SQL="
      select count(*)::integer
	from expression_pattern, expression_pattern_image
	where '$OID' in (xpat_gene_zdb_id, xpat_probe_zdb_id)
	  and xpat_zdb_id = xpatfimg_xpat_zdb_id">
    <?/MISQL>
    <?MIVAR NAME=$expWithImagesExists>$1<?/MIVAR>

    <TABLE width="100%" border="0" <?MIVAR>bgcolor="$highlight"<?/MIVAR>>
      <?MIBLOCK COND=$expWithImagesExists>
	<TR><TD><b>Gene expression patterns (images):</b></TD></TR>
	<?MISQL SQL="
	  SELECT distinct xpat_zdb_id, xpat_assay_name, stg_hours_start, stg_name, stg_zdb_id
	    FROM expression_pattern, expression_pattern_stage, stage, expression_pattern_image
	    WHERE '$OID' in (xpat_gene_zdb_id, xpat_probe_zdb_id)
	      AND xpat_zdb_id = xpatstg_xpat_zdb_id
	      AND xpatstg_start_stg_zdb_id = stg_zdb_id
	      AND xpat_zdb_id = xpatfimg_xpat_zdb_id
	    ORDER by xpat_zdb_id, stg_hours_start
	       ;">
	  <?MIVAR NAME=currentrow>$MI_CURRENTROW<?/MIVAR>
	  <?MIBLOCK COND=$(NC,$XPAT_ZDB_ID,$1)>
	    <?MIVAR NAME=$XPAT_ZDB_ID>$1<?/MIVAR>
	    <?MIVAR NAME=$XPAT_ASSAY_NAME>$2<?/MIVAR>
	    <?MIVAR NAME=$XPAT_start_time>$3<?/MIVAR>
	    <?MIVAR NAME=$XPAT_STAGE1>$4<?/MIVAR>
	    <?MIVAR NAME=$XPAT_STAGE1_ID>$5<?/MIVAR>
	    <?MIVAR NAME=$XPAT_STAGE2><?/MIVAR>
	    <?MIVAR NAME=$XPAT_end_time><?/MIVAR>

	    <?MISQL SQL="
	      SELECT s2.stg_name, s2.stg_hours_end
		FROM stage s1, stage s2, expression_pattern_stage
		WHERE '$XPAT_ZDB_ID' = xpatstg_xpat_zdb_id
		  AND '$XPAT_STAGE1_ID' = s1.stg_zdb_id
		  AND xpatstg_end_stg_zdb_id = s2.stg_zdb_id
		ORDER by s2.stg_hours_end
	      ;">

	      <?MIVAR NAME=$XPAT_STAGE2>$1<?/MIVAR>
	      <?MIVAR NAME=$XPAT_end_time>$2<?/MIVAR>

	    <?/MISQL>

	    <?MIVAR>
	      <TR><TD>
	        &nbsp;&nbsp;<A HREF=/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-xpatview.apg&OID=$XPAT_ZDB_ID>$XPAT_ASSAY_NAME</A>  -  $XPAT_STAGE1 to $XPAT_STAGE2  ($XPAT_start_time hr to $XPAT_end_time hr) 
	        <?MISQL SQL="select WebExplode(object,'dataId=$XPAT_ZDB_ID&type=recattrib') from webPages where ID='aa-miniref_display.apg';">$1<?/MISQL>
	      </TD></TR>
	    <?/MIVAR>	
	  <?/MIBLOCK>
	<?/MISQL>
        <TR><TD>&nbsp;</TD></TR>
      <?/MIBLOCK> <?MICOMMENT> end expression patterns with images exists <?/MICOMMENT>

      <?MIVAR NAME=count>0<?/MIVAR>
      <?MISQL SQL="
	select count(distinct recattrib_source_zdb_id)::integer 
	  from expression_pattern, record_attribution, publication 
	  where '$OID' in (xpat_gene_zdb_id, xpat_probe_zdb_id)
	    and xpat_zdb_id = recattrib_data_zdb_id
	    and zdb_id = recattrib_source_zdb_id
	    and jtype not in ('Curation', 'Unpublished')">
      <?/MISQL>
      <?MIVAR NAME=$count>$1<?/MIVAR>

      <?MIVAR NAME=$titleexp>Expression of <?/MIVAR>
      <?MIBLOCK COND="$(OR,$(>,$count,0),$(XST,$UPDATE))">
	<?MIVAR><p>
	  <TR><TD>
	    <b>Publications reporting expression:</b> <A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-showpubs.apg&OID=$OID&rtype=xpat&title=$(URLENCODE,$titleexp)&pubcount=$count&caller=marker&cellpad=0&name=$(URLENCODE,$name)&abbrev=$abbrev$(IF,$(XST,$UPDATE),&UPDATE=1)">($count)</A><img src="/images/new1.gif" border=0 height=15>
	  </TD></TR>
	<?/MIVAR>
      <?/MIBLOCK>
    </TABLE>
  <?/MIBLOCK> <?MICOMMENT> end expression patterns exist <?/MICOMMENT>
<?/MIBLOCK> <?MICOMMENT> end if marker is in GENEDOM or is EST <?/MICOMMENT>

<!--------------- ends GENE EXPRESSION -------------------------->


<!------------------ MARKER RELATIONSHIP ---------------------->
<?MIBLOCK COND="$(EC,'foo','foo')">

<?MIVAR NAME=$mrel_mtype><?/MIVAR>
<?MIVAR NAME=$mrel_count><?/MIVAR>


<?MISQL SQL="select count(*)::Integer from marker_relationship where mrel_mrkr_1_zdb_id = '$OID' or mrel_mrkr_2_zdb_id = '$OID';">
  <?MIVAR NAME=$mrel_count>$1<?/MIVAR>
<?MIBLOCK COND="$(OR,$(NC,$mrel_count,0),$(XST,$UPDATE))">
<HR width="80%"><b>
  <?MIBLOCK COND="$(XST,$type_of_genedom)">
    SEGMENT (CLONE AND PROBE) RELATIONSHIPS:
  <?MIELSE>
    MARKER RELATIONSHIPS
  <?/MIBLOCK>
</b>
<?/MIBLOCK>
<?/MISQL>
</form>

<?MIBLOCK COND="$(XST,$UPDATE)">
 <br><form name=updaterrel>
 <b>Add relationship:</b> &nbsp;
 Relationship:<SELECT name=relship>
 <?MISQL SQL="select unique mreltype_name, mreltype_1_to_2_comments 
	       from marker_relationship_type,
	            marker_type_group_member, marker
	      where mreltype_mrkr_type_group_1 = mtgrpmem_mrkr_type_group
	        and mrkr_type = mtgrpmem_mrkr_type
                and mrkr_zdb_id = '$OID'   ">
 <option value="1to2-$1">$1-$2
 <?/MISQL>
  
 <?MISQL SQL="select unique mreltype_name, mreltype_2_to_1_comments 
	       from marker_relationship_type,
	            marker_type_group_member, marker
	      where mreltype_mrkr_type_group_2 = mtgrpmem_mrkr_type_group
	        and mrkr_type = mtgrpmem_mrkr_type
                and mrkr_zdb_id = '$OID'   ">
 <option value="2to1-$1">$1-$2
 <?/MISQL>
 </SELECT>
 partner Symbol:<input type=text size=15 name=mrkr_abbrev> 
 <input type=button value="Add it!" onClick=new_mrkrrel();>
 
   <?MIVAR COND="$(AND,$(>,$mrel_count,0),$(XST,$UPDATE))">
     <br><b>Add Reference:</b> 
     Marker abbrev:<input type=text name=attrib_mrkr_abbrev>	
     Reference:<input type=text name=attrib_mrel_pubid>
     <input type=button value="Add" onClick=new_attrib_mrel();> 
   <?/MIVAR>
  
<?/MIBLOCK>


<TABLE border=0 width=100%>
 <?MISQL SQL="select mreltype_name from marker_relationship_type;">
   <?MIVAR NAME="$mrkrview_mrel_type">$1<?/MIVAR>
   <?MIVAR NAME=$mrkrview_last_mrkr_type><?/MIVAR>

    <?MISQL SQL="select mreltype_2_to_1_comments from marker_relationship_type where mreltype_name = '$mrkrview_mrel_type';">
    <?MIVAR NAME="$mrel2to1comments">$1<?/MIVAR>
     <?MISQL SQL="
       select count(*)::Integer 
       from marker_relationship 
       where mrel_mrkr_2_zdb_id = '$OID' 
       and mrel_type='$mrkrview_mrel_type';">
    <?MIBLOCK COND="$(>,$1,0)">

     <TR>
      <TD bgcolor=#EEEEEE>
       <?MIVAR>$(IF,$(>,$(POSITION,$OID,GENE),0),$abbrev,$name) $mrel2to1comments<?/MIVAR>
      </TD>
      <TD align=left width=80% bgcolor=#EEEEEE>
	<?MISQL SQL="
	  select mrkr_abbrev, mrkr_zdb_id, mrkr_abbrev_order, mrel_type, mreltype_name, mreltype_2_to_1_comments, mrkrtype_type_display, mrel_zdb_id, idsup_supplier_zdb_id
	  from marker, marker_relationship, marker_relationship_type, outer(int_data_supplier), marker_types
	  where mrel_mrkr_2_zdb_id = '$OID' 
	    and mrel_mrkr_1_zdb_id = mrkr_zdb_id 
	    and mrel_type = mreltype_name 
	    and mreltype_name = '$mrkrview_mrel_type'  
	    and mrel_mrkr_1_zdb_id = idsup_data_zdb_id
	    and mrkr_type = marker_type
	  group by mrkrtype_type_display, mrkr_abbrev, mrkr_zdb_id, mrkr_abbrev_order, mrel_type, mreltype_name, mreltype_2_to_1_comments, mrel_zdb_id, idsup_supplier_zdb_id
	  order by mrkrtype_type_display, mrkr_abbrev_order;">
	  
	  <?MIVAR NAME=mrkrview_segment_mrkr_zdb_id>$2<?/MIVAR> 
	  <?MIVAR NAME=mrkrview_segment_mrel_type>$4<?/MIVAR> 
	  <?MIVAR NAME=mrkrview_segment_mrkr_type>$7<?/MIVAR> 
	  <?MIVAR NAME=mrkrview_segment_mrel_zdb_id>$8<?/MIVAR> 
	  <?MIVAR NAME=mrkrview_segment_supplier>$9<?/MIVAR> 
	
	<?MIBLOCK COND="$(NE,$mrkrview_segment_mrkr_type,$mrkrview_last_mrkr_type)">
	 <?MIBLOCK COND="$(NE,$MI_CURRENTROW,1)"><br><?/MIBLOCK>
 	 <?MIVAR><font size=-1>[$mrkrview_segment_mrkr_type]</font><?/MIVAR>
        <?MIELSE>,
	<?/MIBLOCK>
	<?MIVAR NAME=$mrkrview_last_mrkr_type>$mrkrview_segment_mrkr_type<?/MIVAR>	
	
        <?MIVAR COND="$(XST,$UPDATE)">
         <INPUT TYPE=button 
         value=Delete 
         onClick="Delete_mrel('$mrkrview_segment_mrkr_zdb_id','$OID','$mrkrview_segment_mrel_type')">
        <?/MIVAR>

        <A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-markerview.apg&OID=$mrkrview_segment_mrkr_zdb_id">$1</A>
        
        <?MIBLOCK COND="$(NC,$mrkrview_segment_supplier,)">
          <?MIBLOCK COND="$(EC,$mrkrview_segment_supplier,ZDB-LAB-991005-53)">
            <A HREF="/zirc/home/guide.php">(available from)</A>
          <?MIELSE>
	    <?MIVAR>
              <A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-labview.apg&OID=$mrkrview_segment_supplier">(available from)</A>
            <?/MIVAR>
          <?/MIBLOCK>
        <?/MIBLOCK>
        
	<?MISQL SQL="select WebExplode(object,'dataId=$mrkrview_segment_mrel_zdb_id&type=recattrib') from webPages where ID='aa-miniref_display.apg';">$1<?/MISQL>
        <?/MISQL>
	</TD>
     </TR>
    <?/MIBLOCK>

   <?/MISQL>
  <?/MISQL>

  <?MIVAR>$(SETVAR,$mrkrview_last_mrkr_type,)<?/MIVAR>

  <?MISQL SQL="select mreltype_1_to_2_comments from marker_relationship_type where mreltype_name = '$mrkrview_mrel_type';">
     <?MIVAR NAME="$mrel1to2comments">$1<?/MIVAR>
     <?MISQL SQL="
       select count(*)::Integer 
       from marker_relationship 
       where mrel_mrkr_1_zdb_id = '$OID' 
         and mrel_type='$mrkrview_mrel_type';">
     <?MIBLOCK COND="$(>,$1,0)">
     
     <TR>
      <TD bgcolor=#EEEEEE>

       <?MIVAR>$(IF,$(>,$(POSITION,$OID,GENE),0),<i>$abbrev</i>,$name) $mrel1to2comments<?/MIVAR> 
       <?MIVAR NAME=$mrel_mtype><?/MIVAR>

      </TD>
      <TD align=left width=80% bgcolor=#EEEEEE>
	<?MISQL SQL="
	  select mrkr_abbrev, mrkr_zdb_id, mrkr_abbrev_order, mrel_type,  mreltype_name, mreltype_1_to_2_comments, mrkrtype_type_display, mrel_zdb_id, idsup_supplier_zdb_id, srcurl_display_text, srcurl_url 
	  from marker, marker_relationship, marker_relationship_type, outer(int_data_supplier, source_url), marker_types
	  where mrel_mrkr_1_zdb_id = '$OID' 
  	    and mrel_mrkr_2_zdb_id = mrkr_zdb_id 
	    and mrel_type = mreltype_name 
	    and mreltype_name = '$mrkrview_mrel_type'  
	    and mrel_mrkr_2_zdb_id = idsup_data_zdb_id
	    and mrkr_type = marker_type
	    and idsup_supplier_zdb_id = srcurl_source_zdb_id
	    and srcurl_purpose = 'order'
	  group by mrkrtype_type_display, mrkr_abbrev, mrkr_zdb_id, mrkr_abbrev_order, mrel_type, mreltype_name, mreltype_1_to_2_comments, mrel_zdb_id, idsup_supplier_zdb_id, srcurl_display_text, srcurl_url 
	  order by mrkrtype_type_display, mrkr_abbrev_order;">
	  
	  <?MIVAR NAME=mrkrview_segment_mrkr_zdb_id>$2<?/MIVAR> 
	  <?MIVAR NAME=mrkrview_segment_mrel_type>$4<?/MIVAR> 
	  <?MIVAR NAME=mrkrview_segment_mrkr_type>$7<?/MIVAR> 
	  <?MIVAR NAME=mrkrview_segment_mrel_zdb_id>$8<?/MIVAR> 
	  <?MIVAR NAME=mrkrview_segment_supplier>$9<?/MIVAR> 
	  <?MIVAR NAME=mrkrview_segment_supplier_display>$10<?/MIVAR> 
	  <?MIVAR NAME=mrkrview_segment_supplier_url>$11<?/MIVAR> 
	
	<?MIBLOCK COND="$(NC,$mrkrview_segment_mrkr_type,$mrkrview_last_mrkr_type)">
	  <?MIBLOCK COND="$(NE,$MI_CURRENTROW,1)"><br><?/MIBLOCK>
 	  <?MIVAR><font size=-1>[$mrkrview_segment_mrkr_type]</font><?/MIVAR>

        <?MIELSE>,
	<?/MIBLOCK>
	<?MIVAR NAME=$mrkrview_last_mrkr_type>$mrkrview_segment_mrkr_type<?/MIVAR>
        <?MIVAR COND="$(XST,$UPDATE)">
         <INPUT TYPE=button  
          value=Delete 
          onClick="Delete_mrel('$mrkrview_segment_mrkr_zdb_id','$OID','$mrkrview_segment_mrel_type')">
        <?/MIVAR>	
	 <A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-markerview.apg&OID=$mrkrview_segment_mrkr_zdb_id">$1</A>
         <font size=-1>

        <?MIBLOCK COND="$(NC,$mrkrview_segment_supplier,)">
          <?MIBLOCK COND="$(NC,$mrkrview_segment_supplier_display,)">
            <?MIVAR>
              <A HREF="$mrkrview_segment_supplier_url">($mrkrview_segment_supplier_display)</A>
            <?/MIVAR>
          <?MIELSE>
            <?MIVAR>
              <A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-labview.apg&OID=$mrkrview_segment_supplier">(available from)</A>
            <?/MIVAR>
          <?/MIBLOCK>
        <?/MIBLOCK>

         </font>
	<?MISQL SQL="select WebExplode(object,'dataId=$mrkrview_segment_mrel_zdb_id&type=recattrib') from webPages where ID='aa-miniref_display.apg';">$1<?/MISQL>
       <?/MISQL> 
       </TD>
     </TR>
    <?/MIBLOCK>
    <?/MISQL>
    <?/MISQL>

 <?/MISQL>
</TABLE>
</form>
<?/MIBLOCK>

<!------------------ end of MARKER RELATIONSHIP --------------->



<!------------- SEQUENCE INFOMATION ------------------------------->

<?MISQL SQL="
  select dblink_zdb_id
  from db_link, foreign_db_contains
  where dblink_linked_recid = '$OID'
    and dblink_fdbcont_zdb_id = fdbcont_zdb_id
    and fdbcont_fdbdt_super_type = 'sequence'
  UNION 
  select dblink_zdb_id
  from db_link, foreign_db_contains, marker_relationship
  where mrel_mrkr_1_zdb_id = '$OID'
    and dblink_linked_recid = mrel_mrkr_2_zdb_id
    and dblink_fdbcont_zdb_id = fdbcont_zdb_id
    and fdbcont_fdbdt_super_type = 'sequence'
    and mrel_type in ('gene contains small segment', 
		      'clone contains small segment',
		      'gene encodes small segment')
    and mrel_mrkr_2_zdb_id not in ('$chimeric_clone_list')
  UNION 
  select dblink_zdb_id
  from db_link, foreign_db_contains, marker_relationship
  where mrel_mrkr_2_zdb_id = '$OID'
    and dblink_linked_recid = mrel_mrkr_1_zdb_id
    and dblink_fdbcont_zdb_id = fdbcont_zdb_id
    and fdbcont_fdbdt_super_type = 'sequence'
    and mrel_type in ('clone contains gene') 
    and mrel_mrkr_1_zdb_id not in ('$chimeric_clone_list')  
  ;"> 
    
  <?MIVAR NAME=vSequence_link>1<?/MIVAR>
<?/MISQL>

<?MIBLOCK COND="$(OR,$(XST,$vSequence_link),$(XST,$UPDATE))">

<?MICOMMENT> Select URL for blast buttons <?/MICOMMENT>    
  <?MISQL SQL="select fdb_db_query from foreign_db where fdb_db_name = 'BLAST';">
    <?MIVAR NAME=fdb_url_blast>$1<?/MIVAR>
  <?/MISQL>
   
  <?MISQL SQL="select fdb_db_query from foreign_db where fdb_db_name = 'MEGA BLAST';">
    <?MIVAR NAME=fdb_url_mega_blast>$1<?/MIVAR>
  <?/MISQL>  
   
  <?MISQL SQL="select fdb_db_query from foreign_db where fdb_db_name = 'PBLAST';">
    <?MIVAR NAME=fdb_url_pblast>$1<?/MIVAR>
  <?/MISQL> 

<form name=updateseq>
<HR width="80%">
<a name=sequence><b>SEQUENCE INFORMATION:</b></a>
<?/MIBLOCK>

<?MIBLOCK COND="$(XST,$UPDATE)">
  <?MIVAR NAME=seq_tab>&nbsp;&nbsp;&nbsp;<?/MIVAR>
<br><br>
<?MIVAR>$seq_tab<?/MIVAR>
<b>Link to Seq DB:</b> &nbsp;
DBname:<SELECT name=seqdb>
  <?MISQL SQL="
    select distinct fdbcont_fdb_db_name 
      from foreign_db_contains
     where fdbcont_fdbdt_super_type = 'sequence' 
     order by fdbcont_fdb_db_name;">
    <option value="$1" $(IF,$(EC,$1,Genbank),SELECTED)>$1</option>
  <?/MISQL>
</SELECT>
Accession:<input type=text size=15 name=seq_acc> 
Type:<SELECT name=seq_super>
  <?MISQL SQL="
    select distinct fdbdt_data_type, fdbdt_super_type 
      from foreign_db_data_type
     where fdbdt_super_type = 'sequence' 
     order by fdbdt_data_type;">
    <option value="$2&fdbcont_data=$1" $(IF,$(EC,$1,cDNA),SELECTED)>$1</option>
  <?/MISQL>
</SELECT>
<input type=button value="Add it!" onClick=new_seqnum();>

<br>
<?MIVAR>$seq_tab<?/MIVAR>
<b>Update Sequence:</b> &nbsp;
AccNum:<SELECT name=upd_seq_zdb>
  <?MISQL SQL="
    select distinct fdbcont_fdb_db_name, dblink_acc_num_display, dblink_zdb_id
      from foreign_db_contains, db_link
     where fdbcont_fdbdt_super_type = 'sequence' 
       and fdbcont_fdb_db_name <> 'BLAST'
       and fdbcont_zdb_id = dblink_fdbcont_zdb_id
       and dblink_linked_recid = '$OID'
     order by fdbcont_fdb_db_name, dblink_acc_num_display;">
    <option value="$3">$1:$2</option>
  <?/MISQL>
</SELECT>
Type:<SELECT name=upd_seq_type>
  <?MISQL SQL="
    select distinct fdbdt_data_type
      from foreign_db_data_type
     where fdbdt_super_type = 'sequence' 
     order by fdbdt_data_type;">
    <option value="$1"  $(IF,$(EC,$1,cDNA),SELECTED)>$1</option>
  <?/MISQL>
</SELECT>
Length: <input type=text size=10 name=upd_seq_length>
<input type=button value="Update" onClick=update_seqnum();>

<br>
<?MIVAR>$seq_tab<?/MIVAR>
<b>Add reference:</b> &nbsp;
Accession: <input type=text size=15 name=attrib_seq_acc>
Reference: <input type=text size=15 name=attrib_seq_pubid> 
<input type=button value="Add it!" onClick=new_attrib_seq();>
<?MICOMMENT>Added CDNA for this condition (FogBugz 410) <?/MICOMMENT>

<?MIBLOCK COND="$(OR,$(EQ,$marker_type,EST),$(EQ,$marker_type,CDNA))">

  <?MISQL SQL="
    SELECT clone_is_chimeric
    FROM clone
    WHERE clone_mrkr_zdb_id = '$OID';">

    <br>    
    <?MIVAR>$seq_tab<?/MIVAR> 
    <b>Chimeric:</b> 
        Yes:<input type=radio name=chimericism value=t $(IF,$(EC,$1,t),checked)>
        No:<input type=radio name=chimericism value=f $(IF,$(EC,$1,f),checked)> 
        <input type=button value="Update" onclick=setChimericism('$1')> 
    (Chimeric links are not displayed on gene pages.)

  <?/MISQL>
<?/MIBLOCK>
<br><br>
<?/MIBLOCK>

<?MIBLOCK COND="$(XST,$vSequence_link)">

<?MIVAR NAME=$lastitem><?/MIVAR>

    <?MISQL SQL="
        select dblink_zdb_id
        from db_link, foreign_db_contains
        where dblink_linked_recid = '$OID'
          and dblink_fdbcont_zdb_id = fdbcont_zdb_id
          and fdbcont_fdbdt_super_type = 'sequence'
          and fdbcont_fdb_db_name != 'BLAST'
      UNION 
        select dblink_zdb_id
        from db_link, foreign_db_contains, marker_relationship
        where mrel_mrkr_1_zdb_id = '$OID'
          and dblink_linked_recid = mrel_mrkr_2_zdb_id
          and dblink_fdbcont_zdb_id = fdbcont_zdb_id
          and fdbcont_fdbdt_super_type = 'sequence'
          and mrel_type in ('gene contains small segment', 
		              'clone contains small segment',
			      'gene encodes small segment')
          and mrel_mrkr_2_zdb_id not in ('$chimeric_clone_list')
          and fdbcont_fdb_db_name != 'BLAST'
      UNION 
        select dblink_zdb_id
        from db_link, foreign_db_contains, marker_relationship
        where mrel_mrkr_2_zdb_id = '$OID'
          and dblink_linked_recid = mrel_mrkr_1_zdb_id
          and dblink_fdbcont_zdb_id = fdbcont_zdb_id
          and fdbcont_fdbdt_super_type = 'sequence'
          and mrel_type in ('clone contains gene') 
          and mrel_mrkr_1_zdb_id not in ('$chimeric_clone_list')  
          and fdbcont_fdb_db_name != 'BLAST'        
      ;"> 
        <?MIVAR NAME=seq_for_oid>$1<?/MIVAR>
    <?/MISQL>
    
<?MIBLOCK COND="$(XST,$seq_for_oid)">    
<?MISQL SQL="select dblink_length, fdb_db_name, fdb_db_query || dblink_acc_num || 
	     (case fdb_url_suffix when NULL then '' else fdb_url_suffix end), 
             dblink_acc_num_display, dblink_zdb_id
        from db_link, foreign_DB, foreign_db_contains
        where dblink_linked_recid = '$OID'
          and dblink_fdbcont_zdb_id = fdbcont_zdb_id
          and fdbcont_fdb_db_name = fdb_db_name
          and fdbcont_fdbdt_super_type = 'sequence'
          and fdbcont_fdb_db_name = 'RefSeq';">

        <?MIVAR NAME=refseq_dblink_length>$(IF,$(EC,$1,),,$1 bp)<?/MIVAR>
        <?MIVAR NAME=refseq_db_name>$2<?/MIVAR>
        <?MIVAR NAME=refseq_link_url>$3<?/MIVAR>
        <?MIVAR NAME=refseq_acc_num>$4<?/MIVAR>
        <?MIVAR NAME=refseq_dataId>$5<?/MIVAR>
        <?MIVAR NAME=refseq_attachto>s<?/MIVAR>
        <?MIVAR NAME=refseq_related_zdb_id>placeholder<?/MIVAR>
        <?MIVAR NAME=refseq_related_mrkr_abbrev>placeholder<?/MIVAR>
        
        <?MIVAR NAME=refseq_cdna>exists<?/MIVAR>
        
<?/MISQL>
               
<?MIVAR>
<TABLE  width="100%" border=0 bgcolor="$highlight">
  <TR>
    <TD width=30% bgcolor=#ccccccc><b>Type</b></TD>
    <TD width=40% bgcolor=#ccccccc><b>Accession #</b></TD>
    <TD width=10% bgcolor=#ccccccc><b>Length</b></TD>
    <TD width=20% bgcolor=#ccccccc>&nbsp;</TD>
<?/MIVAR>
<TR>
<?MIVAR NAME=gblinks><?/MIVAR>
<?MIVAR NAME=gbaccs><?/MIVAR>
<?MIVAR NAME=gblinkId><?/MIVAR>
<?MIVAR NAME=$count>0<?/MIVAR>
<?MIVAR NAME=$empty>1<?/MIVAR>
<?MIVAR NAME=$more>0<?/MIVAR>
<?MIVAR NAME=$accnum><?/MIVAR>
<?MIVAR NAME=$dbname><?/MIVAR>
<?MISQL SQL="
  select fdbdt_data_type, fdbdt_display_order
  from foreign_db_data_type
  where fdbdt_super_type = 'sequence'
  order by 2
  ;">
  
    <?MIVAR NAME=data_type>$1<?/MIVAR>
    
      <?MISQL SQL="
        select dblink_length, fdb_db_name, fdb_db_query || dblink_acc_num || 
	     (case fdb_url_suffix when NULL then '' else fdb_url_suffix end), 
               dblink_acc_num_display, dblink_zdb_id, 's', 'placeholder', 'placeholder', fdb_db_significance
        from db_link, foreign_DB, foreign_db_contains
        where dblink_linked_recid = '$OID'
          and dblink_fdbcont_zdb_id = fdbcont_zdb_id
          and fdbcont_fdb_db_name = fdb_db_name
          and fdbcont_fdbdt_super_type = 'sequence'
          and fdbcont_fdbdt_data_type = '$data_type'
      UNION 
        select dblink_length, fdb_db_name, fdb_db_query || dblink_acc_num || 
	     (case fdb_url_suffix when NULL then '' else fdb_url_suffix end), 
               dblink_acc_num_display, dblink_zdb_id, 'r', mrel_mrkr_2_zdb_id, mrkr_abbrev, fdb_db_significance
        from db_link, foreign_DB, foreign_db_contains, marker_relationship, marker
        where mrel_mrkr_1_zdb_id = '$OID'
          and dblink_linked_recid = mrel_mrkr_2_zdb_id
          and dblink_fdbcont_zdb_id = fdbcont_zdb_id
          and fdbcont_fdb_db_name = fdb_db_name
          and fdbcont_fdbdt_super_type = 'sequence'
          and fdbcont_fdbdt_data_type = '$data_type'
          and mrel_type in ('gene contains small segment', 
		              'clone contains small segment',
			      'gene encodes small segment')
          and mrel_mrkr_2_zdb_id = mrkr_zdb_id
          and mrel_mrkr_2_zdb_id not in ('$chimeric_clone_list')
      UNION 
        select dblink_length, fdb_db_name, fdb_db_query || dblink_acc_num || 
	     (case fdb_url_suffix when NULL then '' else fdb_url_suffix end), 
               dblink_acc_num_display, dblink_zdb_id, 'r', mrel_mrkr_1_zdb_id, mrkr_abbrev, fdb_db_significance
        from db_link, foreign_DB, foreign_db_contains, marker_relationship, marker
        where mrel_mrkr_2_zdb_id = '$OID'
          and dblink_linked_recid = mrel_mrkr_1_zdb_id
          and dblink_fdbcont_zdb_id = fdbcont_zdb_id
          and fdbcont_fdb_db_name = fdb_db_name
          and fdbcont_fdbdt_super_type = 'sequence'
          and fdbcont_fdbdt_data_type = '$data_type'
          and mrel_type = 'clone contains gene' 
          and mrel_mrkr_1_zdb_id = mrkr_zdb_id
          and mrel_mrkr_1_zdb_id not in ('$chimeric_clone_list')
          
        order by 9 asc,1 desc,4
      ;">   

       
      <?MIBLOCK COND="$(=,$MI_CURRENTROW,1)">
        <?MIBLOCK >        
          <?MIVAR NAME=dblink_length>$1<?/MIVAR>
          <?MIVAR NAME=db_name>$2<?/MIVAR>
          <?MIVAR NAME=link_url>$3<?/MIVAR>
          <?MIVAR NAME=acc_num>$4<?/MIVAR>
          <?MIVAR NAME=dataId>$5<?/MIVAR>
          <?MIVAR NAME=attachto>$6<?/MIVAR>
          <?MIVAR NAME=related_zdb_id>$7<?/MIVAR>
          <?MIVAR NAME=related_mrkr_abbrev>$8<?/MIVAR>
        <?/MIBLOCK>
      
        <?MIBLOCK COND="$(EC,$data_type,Polypeptide)">
          <?MIVAR NAME=blast_display COND="$(EC,$db_name,SWISS-PROT)">
              <input type=button value="BLAST IT!" onClick="Blast('$acc_num','$fdb_url_pblast');">
          <?/MIVAR>
          <?MIVAR NAME=blast_display COND="$(NC,$db_name,SWISS-PROT)">&nbsp;<?/MIVAR>  
        <?MIELSE COND="$(OR,$(EC,$db_name,RefSeq),
				 $(AND,$(EC,$db_name,Genbank),
				      $(OR,$(EC,$dblink_length,),
					   $(<,$dblink_length,20000)
				       )
				 )
			    )">
	  <?MIVAR NAME=blast_display>
		<input type=button value="BLAST IT!" onClick="Blast('$acc_num','$fdb_url_blast');">
	  <?/MIVAR>
	<?MIELSE COND="$(AND,$(EC,$db_name,Genbank),$(AND,$(NC,$dblink_length,),$(>,$dblink_length,19999)))">	  
	  <?MIVAR NAME=blast_display>
            <input type=button value="Mega BLAST IT!" onClick="Blast('$acc_num','$fdb_url_mega_blast');">
	  <?/MIVAR>
	<?MIELSE>
	  <?MIVAR NAME=blast_display>&nbsp;<?/MIVAR>
        <?/MIBLOCK> 
        
          <?MIVAR COND=$(EC,$data_type,cDNA) NAME=dblink_length>$(IF,$(EC,$1,),,$1 bp)<?/MIVAR>
          <?MIVAR COND=$(EC,$data_type,Genomic) NAME=dblink_length>$(IF,$(EC,$1,),,$1 bp)<?/MIVAR>
          <?MIVAR COND=$(EC,$data_type,Polypeptide) NAME=dblink_length>$(IF,$(EC,$1,),,$1 aa)<?/MIVAR>
        
        
        <?MIVAR>
        <?MICOMMENT>** 07/24/03 for some weird reasons, the column made up to distinguish the source of Genbank accession
         has to be a one-character string to behave right in EC operation. <?/MICOMMENT>
         
        <TR>
          
          <TD>
            $data_type: 
          </TD>
          <TD>
            $(IF,$(AND,$(XST,$UPDATE),$(NE,$attachto,r)),"<input type=button value=delete onClick=Delete_listitem('db_link','"$(URLENCODE,$db_name:$acc_num)"')>") 
            <A HREF="$link_url">$db_name:$acc_num</A><?/MIVAR>

   <?MIBLOCK COND="$(AND,$(XST,$UPDATE),$(EC,$attachto,r))">
        <?MISQL SQL="
	    select mrkr_abbrev, mrkr_zdb_id
              from marker
             where mrkr_zdb_id = '$related_zdb_id'; ">
            
           ( <A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-markerview.apg&OID=$related_zdb_id">$related_mrkr_abbrev</A> )
        <?/MISQL>
        <?MIVAR>$(UNSETVAR,$UPDATE)<?/MIVAR>
 	<?MISQL SQL="select WebExplode(object,'dataId=$dataId&type=recattrib') from webPages where ID='aa-miniref_display.apg';">$1<?/MISQL>
 	<?MIVAR>$(SETVAR,$UPDATE,1)<?/MIVAR>
   <?MIELSE>
     <?MISQL SQL="select WebExplode(object,'dataId=$dataId&type=recattrib') from webPages where ID='aa-miniref_display.apg';">$1<?/MISQL>
   <?/MIBLOCK>	
          </TD>
          <TD align=right>
            <?MIVAR>$dblink_length<?/MIVAR>
          </TD>
          <TD align=center>
            <?MIVAR>$blast_display<?/MIVAR>
          </TD>          
        </TR>
   <?/MIBLOCK>     
      <?/MISQL>
  <?/MISQL>
  
  <?MICOMMENT> 
    Count the number of links for each sequence type.
    If the count for a data_type is greater than 1,
    display the All Sequence link.
  <?/MICOMMENT>

  <?MISQL SQL="
    select fdbcont_fdbdt_data_type
    from foreign_db_contains
    where fdbcont_fdbdt_super_type = 'sequence'
    ;">
    <?MIVAR NAME=data_type>$1<?/MIVAR>
    
    <?MISQL SQL="
      select count(*)::integer
      from db_link, foreign_db_contains
      where dblink_linked_recid = '$OID'
        and dblink_fdbcont_zdb_id = fdbcont_zdb_id
        and fdbcont_fdbdt_data_type = '$data_type';">        
      <?MIVAR NAME=vDatatypeLinkCount>$1<?/MIVAR>
    <?/MISQL>
    <?MISQL SQL="
      select count(*)::integer
      from db_link, foreign_db_contains, marker_relationship
      where mrel_mrkr_1_zdb_id = '$OID'
        and dblink_linked_recid = mrel_mrkr_2_zdb_id
        and dblink_fdbcont_zdb_id = fdbcont_zdb_id
        and fdbcont_fdbdt_data_type = '$data_type'
        and mrel_type in ('gene contains small segment', 
                          'clone contains small segment',
                          'gene encodes small segment')
      ;">      
        <?MIVAR NAME=vDatatypeLinkCount>$(+,$1,$vDatatypeLinkCount)<?/MIVAR>
    <?/MISQL>
    <?MISQL SQL="
      select count(*)::integer
      from db_link, foreign_db_contains, marker_relationship
      where mrel_mrkr_2_zdb_id = '$OID'
        and dblink_linked_recid = mrel_mrkr_1_zdb_id
        and dblink_fdbcont_zdb_id = fdbcont_zdb_id
        and fdbcont_fdbdt_data_type = '$data_type'
        and mrel_type in ('clone contains gene')
      ;">
      
        <?MIVAR NAME=vDatatypeLinkCount>$(+,$1,$vDatatypeLinkCount)<?/MIVAR>
    <?/MISQL>
    
    <?MIVAR COND="$(>,$vDatatypeLinkCount,1)" NAME=display_all_sequences>true<?/MIVAR>
  
  <?/MISQL>
  
  <?MIBLOCK COND=$(XST,$display_all_sequences)>  

        <TR>
          <TD colspan=4>
            <?MISQL SQL="
              select dblink_acc_num
              from db_link, foreign_DB, foreign_db_contains
              where dblink_linked_recid = '$OID'
                and dblink_fdbcont_zdb_id = fdbcont_zdb_id
                and fdbcont_fdb_db_name = fdb_db_name
                and fdbcont_fdbdt_super_type = 'sequence'
              UNION
              select dblink_acc_num
              from db_link, foreign_DB, foreign_db_contains, marker_relationship
              where mrel_mrkr_1_zdb_id = '$OID' 
                and mrel_mrkr_2_zdb_id = dblink_linked_recid 
                and mrel_type in ('gene contains small segment', 
		                  'clone contains small segment',
			          'gene encodes small segment')
                and dblink_fdbcont_zdb_id = fdbcont_zdb_id
                and fdbcont_fdb_db_name = fdb_db_name
                and fdbcont_fdbdt_super_type = 'sequence'
                and mrel_mrkr_2_zdb_id not in ('$chimeric_clone_list')
              UNION
              select dblink_acc_num
              from db_link, foreign_DB, foreign_db_contains, marker_relationship
              where mrel_mrkr_2_zdb_id = '$OID' 
                and mrel_mrkr_1_zdb_id = dblink_linked_recid 
                and mrel_type = 'clone contains gene'
                and dblink_fdbcont_zdb_id = fdbcont_zdb_id
                and fdbcont_fdb_db_name = fdb_db_name
                and fdbcont_fdbdt_super_type = 'sequence'
                and mrel_type in ('clone contains gene') 
                and mrel_mrkr_1_zdb_id not in ('$chimeric_clone_list')
              ;">
            <?/MISQL>
            
            <?MIVAR>
              <A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-sequence.apg&OID=$OID$(IF,$(XST,$UPDATE),&UPDATE=1)">All Sequence Information ($MI_ROWCOUNT)</a>
            <?/MIVAR>
          </TD>
        </TR>
  <?/MIBLOCK>    

          

        
      </TABLE>
      
<?MIELSE>
  
  <TABLE border=0 bgcolor=<?MIVAR>$highlight<?/MIVAR> width=100%>
    <TR><TD>None Submitted</TD></TR>
  </TABLE>

<?/MIBLOCK>
</form>

<?/MIBLOCK> <?MICOMMENT> Sequence count > 1 <?/MICOMMENT>

<!---------------- ends of SEQUENCE INFORMATION --------------->


<!------------   OTHER MARKER PAGES   ------------------------------->

  <?MIVAR>$(UNSETVAR,dblink_other)<?/MIVAR>  

  <?MISQL SQL="
    select fdb_db_name, fdb_db_query || dblink_acc_num || 
	     (case fdb_url_suffix when NULL then '' else fdb_url_suffix end), 
           dblink_acc_num, dblink_zdb_id, dblink_acc_num_display, fdb_db_significance
    from db_link, foreign_DB, foreign_db_contains
    where dblink_linked_recid = '$OID'
      and dblink_fdbcont_zdb_id = fdbcont_zdb_id
      and fdbcont_fdb_db_name = fdb_db_name
      and fdbcont_fdbdt_data_type = 'other'
    order by 6,1,5
  ;"> 
  
    <?MIVAR NAME=db_name>$1<?/MIVAR>
    <?MIVAR NAME=link_url>$2<?/MIVAR>
    <?MIVAR NAME=acc_num>$3<?/MIVAR>
    <?MIVAR NAME=dataId>$4<?/MIVAR>
    <?MIVAR NAME=link_display>$5<?/MIVAR>
    
    
    <?MIVAR NAME=mini_ref><?MISQL SQL="select WebExplode(object,'dataId=$dataId&type=recattrib') from webPages where ID='aa-miniref_display.apg';">$1<?/MISQL><?/MIVAR>
    
    <?MIBLOCK COND="$(AND,$(XST,$vPrevDBname),$(NC,$vPrevDBname,$db_name))">
    <?MIBLOCK COND="$(NXST,$dblink_other)">
      <?MIVAR NAME=dblink_other>
        $vDBnameColumn
      <?/MIVAR>    
    <?MIELSE>
      <?MIVAR>
        $(VECAPPEND,$dblink_other,$vDBnameColumn)
      <?/MIVAR>
    <?/MIBLOCK>
      <?MIVAR>$(UNSETVAR,vDBnameColumn)<?/MIVAR>
    <?/MIBLOCK>    
    
    <?MIBLOCK COND=$(NXST,$vDBnameColumn)>
      <?MIVAR NAME=vDBnameColumn>
        <LI>
        $(IF,$(XST,$UPDATE),"<input type=button value=delete onClick=Delete_listitem('db_link','"$(URLENCODE,$db_name:$acc_num)"')>") 
        <A HREF="$link_url">$db_name:$link_display</A> $mini_ref
        </LI>      
      <?/MIVAR>
    <?MIELSE>
      <?MIVAR NAME=vDBnameColumn>
        $vDBnameColumn 
        <LI>
        $(IF,$(XST,$UPDATE),"<input type=button value=delete onClick=Delete_listitem('db_link','"$(URLENCODE,$db_name:$acc_num)"')>") 
        <A HREF="$link_url">$db_name:$link_display</A> $mini_ref
        </LI>      
      <?/MIVAR>      
    <?/MIBLOCK>

  <?MIVAR NAME=vPrevDBname>$db_name<?/MIVAR>

  <?/MISQL> 

    <?MIBLOCK COND="$(XST,$vPrevDBname)">
    <?MIBLOCK COND="$(NXST,$dblink_other)">
      <?MIVAR NAME=dblink_other>
        $vDBnameColumn
      <?/MIVAR>    
    <?MIELSE>
      <?MIVAR>
        $(VECAPPEND,$dblink_other,$vDBnameColumn)
      <?/MIVAR>
    <?/MIBLOCK>
    <?/MIBLOCK> 
  
  <?MIBLOCK COND=$(XST,$dblink_other)>
    <HR width="80%">
    <?MIVAR><b>OTHER &nbsp;<i>$abbrev</i>&nbsp; GENE / MARKER PAGES:</b><?/MIVAR>
  
    <?MIVAR NAME=dblink_other_table_row><TR><TD>$(SEPARATE,$dblink_other,</TD><TD>)</TD></TR><?/MIVAR>

    <?MIVAR>
    <TABLE  width="100%" border=0 bgcolor="$highlight"
      $dblink_other_table_row
    </TABLE>
    <?/MIVAR>
    
  <?/MIBLOCK> 

<!------------   ends   OTHER MARKER PAGES   ------------------------>


<!---------------- MAPPING INFORMATION   ---------------------->


<hr width="80%" align = center>
<b>MAPPING INFORMATION:  </b>
<!-- also sends abbrev & marker_type -->
<TABLE width="100%" bgcolor=<?MIVAR>"$highlight"<?/MIVAR>>
<TR>
<TD>
&nbsp;&nbsp;<?MISQL SQL="select WebExplode(object,'&mapdetails_mode=mini&oID=$OID') from webPages where ID='aa-mappingdetail.apg';">$1<?/MISQL>
</TD>
</TR>
</TABLE>

<!------------- ends MAPPING INFORMATION --------------->

<form name=updater1>


<!------------ ORTHOLOGUES ------------------------------------>
<!------ only for cloned genes.------------------- -->
<?MIBLOCK COND="$(XST,$type_of_genedom)">
 <HR width="80%">
 <a name=orthologue><b>ORTHOLOGUES:</b></a>
 <?MICOMMENT>at update mode, user will choose species, and invoke refresh<?/MICOMMENT>
 <?MIBLOCK COND="$(XST,$UPDATE)">
   <?MISQL SQL="select WebExplode(object,'') from webPages where ID='aa-orthoedit.apg';">$1<?/MISQL> 
 <?/MIBLOCK>

 <?MISQL SQL="select WebExplode(object,'OID=$OID') from webPages where ID='aa-orthoview.apg';">$1<?/MISQL> 
  	
<?/MIBLOCK> 

<!-------------- ends ORTHOLOGUES ------------------------------------>



<!------------------ PUBLICATION ------------------------------------>
<HR width="80%" align=center>

<?MICOMMENT> *** 09/05 Decided to count both real pub and citation fake pub, and use CITATION as title. Before any database solution, still hard code the items to extract citation pub. <?/MICOMMENT>
<?MICOMMENT> *** 08/25 curator's decision that we will not pull over publications from related markers, or the known locus. However, any attribution to data items automatically populated to the marker itself. <?/MICOMMENT>

<?MISQL SQL="

  select recattrib_source_zdb_id as zdb_id
    from record_attribution, publication p
   where recattrib_data_zdb_id = '$OID' 
     and recattrib_source_zdb_id = p.zdb_id
     and jtype not in ('Curation', 'Unpublished')
  UNION
  select colattrib_source_zdb_id as zdb_id
    from column_attribution,publication p,locus l
     where l.cloned_gene = '$OID'
       and colattrib_data_zdb_id = l.zdb_id
       and colattrib_column_name = 'cloned_gene'
       and colattrib_source_zdb_id = p.zdb_id
       into temp all_real_pubs_temp with no log;
  ">
<?/MISQL>

<?MISQL SQL="select distinct count(*) from all_real_pubs_temp;">
  <?MIVAR NAME=$count_of_real_pub>$1<?/MIVAR>
<?/MISQL>

<?MISQL SQL="
  drop table all_real_pubs_temp;">
<?/MISQL>

<?MIVAR NAME=related_data_attrib_to_OID>
      recattrib_data_zdb_id in (select mrel_zdb_id from marker_relationship where mrel_mrkr_2_zdb_id = '$OID' and mrel_mrkr_1_zdb_id not in ('$chimeric_clone_list'))
    or
      recattrib_data_zdb_id in (select mrel_zdb_id from marker_relationship where mrel_mrkr_1_zdb_id = '$OID' and mrel_mrkr_2_zdb_id not in ('$chimeric_clone_list'))
    or
      recattrib_data_zdb_id in (select dalias_zdb_id from data_alias where dalias_data_zdb_id = '$OID')
    or
      recattrib_data_zdb_id in (select dblink_zdb_id from db_link where dblink_linked_recid = '$OID')
    or
      recattrib_data_zdb_id in (select oevdisp_zdb_id from orthologue_evidence_display where oevdisp_gene_zdb_id = '$OID')
    or 
      recattrib_data_zdb_id = '$OID' 
    or
      recattrib_data_zdb_id in (select mrkrgoev_zdb_id from marker_go_term_evidence where mrkrgoev_mrkr_zdb_id='$OID')
 
 <?/MIVAR>

<?MISQL SQL="
  select count(distinct recattrib_source_zdb_id)::integer
    from record_attribution, publication
   where ($related_data_attrib_to_OID)
     and recattrib_source_zdb_id = zdb_id 
     and jtype in ('Curation', 'Unpublished');
  ">




  <?MIVAR NAME=$count_of_curation_pub>$1<?/MIVAR>
<?/MISQL>
<?MIVAR NAME=$total_count>$(+,$count_of_real_pub,$count_of_curation_pub)<?/MIVAR>
<?MIBLOCK COND="$(OR,$(>,$total_count,0),$(XST,$UPDATE))">
  <?MIVAR>
  <A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-showpubs.apg&OID=$OID&rtype=marker&title=$(URLENCODE,$title)&name=$(URLENCODE,$name)&abbrev=$abbrev$(IF,$(XST,$UPDATE),&UPDATE=1)&total_count=$total_count&count_of_real_pub=$count_of_real_pub"><b>CITATIONS</b></A>
  <?/MIVAR>
<?MIELSE>
  <b>CITATIONS</b>
<?/MIBLOCK>
<?MIVAR>	
  &nbsp; ($total_count)
<?/MIVAR>
</form>
<!----------------- ends PUBLICATION ----------------->



<?/MIBLOCK> <!-- ends cond authorize exists -->

<?/MIBLOCK> <!-- name NC novalue and romwcount > 0 -->

<?/MIBLOCK> <!-- ends cond oid exists -->


<?MISQL SQL="select WebExplode(object,'') from webPages where ID='aa-htmlpagefooter.apg';">$1<?/MISQL>

</BODY>

</HTML>

