<?MICOMMENT>
FILE:   markerselect.apg
PREFIX: mrkrsel_

search form for genes and markers

INPUT VARS:  not fully documented
  input_name      Name/symbol specified in search.  This does not exist if
                  no string was entered by the user.

OUTPUT VARS: not fully documented

OUTPUT:      not fully documented

EFFECTS:     not fully documented

DEBUGGING:
  $debug_timing is in this page, but only before results are displayed

<?/MICOMMENT>

<?MIERROR>
<html>
<script language="JavaScript" src="/javascript/header.js"></script>
<script language="JavaScript" src="/javascript/datablade_error.js"></script>
<div class="datablade-error-contents">
  <?MIVAR COND=$(XST,$MI_SQL)>
    SQL: $MI_SQL<br><br>
  <?/MIVAR>
  Code:    $MI_ERRORCODE <br>
  State:   $MI_ERRORSTATE <br>
  Message: $MI_ERRORMSG <br>
<script language="JavaScript" src="/javascript/footer.js"></script>
</div>
<script>
jQuery.ajax({
  url:'/action/devtool/datablade-error'
  ,type:'POST'
  ,data: {
           url: window.location.href
           ,message: jQuery('.datablade-error-contents').text()
         }
 });
</script>
</html>
<?/MIERROR>

<?MIBLOCK COND="$(NXST,$accession)">
 <HTML>
 <HEAD>
 <?MIVAR Name=page_name>ZFIN Marker Search $(IF,$(XST,$query_results),Results)<?/MIVAR>
 <?MIVAR><TITLE>$page_name</TITLE><?/MIVAR>

  <SCRIPT>

    function call_reset() {

	document.critform.input_name.value = "";
	document.critform.input_acc.value = "";
	document.critform.START.value = "";
	document.critform.lg.selectedIndex = 0;
	document.critform.compare.selectedIndex = 0;
	document.critform.marker_type.selectedIndex = 0;
	document.critform.WINSIZE.value = 25;
     }

      function replaceLocation(url) {
        if (navigator.userAgent.indexOf("Safari") >= 0)
          location.href = url;
        else
          location.replace(url);

      }


   </SCRIPT>

 </HEAD>

 <BODY>

  <?MISQL SQL="select WebExplode(object,'') from webPages where ID='aa-htmlpageheader.apg';">$1<?/MISQL>


<?/MIBLOCK><?MICOMMENT> end XST accession which means it is called by Accession Search <?/MICOMMENT>

<?MISQL COND=$(XST,$debug_timing) SQL="
        execute function get_time()">
<!--        <br>$1 Page Start  -->
<?/MISQL>

  <?MISQL SQL="
    select WebExplode(object,'')
      from webPages
      where ID = 'aa-identify.apg';">
    $1
  <?/MISQL>
  <?MICOMMENT>
    set userid to ZDB_ID of user or GUEST to be used by the map viewer
  <?/MICOMMENT>
  <?MIVAR NAME=$userid>GUEST<?/MIVAR>
  <?MIBLOCK COND="$(NC,$(SUBSTR,$ZDB_name,1,5),GUEST)">
    <?MIVAR NAME=$userid>$ZDB_ident<?/MIVAR>
  <?/MIBLOCK>

<?MIVAR name=$highlight><!--|HIGHLIGHT_COLOR|--><?/MIVAR>
<?MIVAR NAME=$MI_NULL><?/MIVAR>
<?MIVAR NAME=$MI_NOVALUE><?/MIVAR>
<?MIVAR NAME=$OID COND="$(NXST,$OID)"><?/MIVAR>
<?MIVAR COND="$(AND,$(XST,$accession),$(XST,$input_acc))">
  <?MICOMMENT>
    *** when called by accession search and the input is an dblink accession,
    need to unset $constraint to avoid trouble when webexplode both
    markerselect and msegselect
  <?/MICOMMENT>
  $(UNSETVAR,$constraint)
  $(UNSETVAR,$marker_type)
<?/MIVAR>


<?MICOMMENT>
  this part is executed after a search is submitted for
  gene/marker search or accession search, or when
  requested from publication page for related data list.
<?/MICOMMENT>

<?MIBLOCK COND="$(OR,$(XST,$query_results),$(XST,$pubId))">

  <?MICOMMENT>forbidden simultanious name and acc search <?/MICOMMENT>
  <?MIBLOCK COND="$(AND,$(XST,$input_acc),$(XST,$input_name))">
   <script>
     window.alert("Please modify your search for either name search or accession search.");
   </script>

  <?MIELSE>

   <?MISQL SQL="
      select dbinfo('sessionid')
        from single;">
      <?MIVAR NAME=$mrkrsel_session_id>$1<?/MIVAR>
      <?MIVAR NAME=$markerselect_temp_match>$(CONCAT,markerselect_temp_match_,$mrkrsel_session_id)<?/MIVAR>
      <?MIVAR NAME=$markerselect_temp_on_lg>$(CONCAT,markerselect_temp_on_lg_,$mrkrsel_session_id)<?/MIVAR>
      <?MIVAR NAME=$markerselect_temp_marker>$(CONCAT,markerselect_temp_marker_,$mrkrsel_session_id)<?/MIVAR>
   <?/MISQL>

   <?MIVAR COND="$(NXST,$lg)" NAME=$lg>0<?/MIVAR>
   <?MIVAR NAME=show_xpat_pato>t<?/MIVAR>

   <?MICOMMENT>
        when called from publication page, $type is passes in
	indictating for gene list or mapped data list.
   <?/MICOMMENT>
   <?MIVAR COND="$(NXST,$type)" NAME=$type>marker<?/MIVAR>

   <?MICOMMENT>
    Format of result page:
    when gene is not involved, columns of symbol-name, and map.
    when gene is involved, two more columns expression and mutant
   <?/MICOMMENT>
   <?MIVAR NAME=type_of_genedom>f<?/MIVAR>

   <?MIVAR NAME=type_of_knockdown_reagent>f<?/MIVAR>

   <?MIVAR NAME=$mrkrsel_optional_match_table><?/MIVAR>
   <?MIVAR NAME=$mrkrsel_optional_match_cols><?/MIVAR>
   <?MIVAR NAME=$mrkrsel_optional_marker_cols><?/MIVAR>

   <?MICOMMENT>
        Build up the constraint clause for gene/marker search,
	constraint for calls from pubview is build next.
   <?/MICOMMENT>

   <?MIBLOCK COND="$(AND,$(NXST,$constraint),$(NXST,$pubId))">

    <?MIVAR NAME=$constraint><?/MIVAR>

    <?MICOMMENT>
      This next part builds up a query piece by piece, based on which
      criteria were passed in
    <?/MICOMMENT>
    <?MIVAR COND="$(NXST,$compare)" NAME=$compare>contains<?/MIVAR>
    <?MIBLOCK COND="$(XST,$marker_type)">
	<?MIVAR NAME=$constraint> mrkr_type = '$marker_type'<?/MIVAR>
	<?MISQL SQL="
		select mrkrtype_type_display
		  from marker_types
		 where marker_type = '$marker_type'
		;">
	   <?MIVAR NAME=$marker_type_display>$1<?/MIVAR>
	<?/MISQL>

	<?MISQL SQL="
		select 't'
		  from marker_type_group_member
		where mtgrpmem_mrkr_type_group = 'GENEDOM'
		  and mtgrpmem_mrkr_type = '$marker_type'
		;">
	<?/MISQL>
	<?MIVAR COND="$(>,$MI_ROWCOUNT,0)" NAME=type_of_genedom>t<?/MIVAR>

	<?MISQL SQL="
		select 't'
		  from marker_type_group_member
		where mtgrpmem_mrkr_type_group = 'KNOCKDOWN_REAGENT'
		  and mtgrpmem_mrkr_type = '$marker_type'
		;">
	<?/MISQL>
	<?MIVAR COND="$(>,$MI_ROWCOUNT,0)" NAME=type_of_knockdown_reagent>t<?/MIVAR>
    <?MIELSE>
	<?MIVAR NAME=$constraint> mrkr_type not in (select mtgrpmem_mrkr_type from marker_type_group_member where mtgrpmem_mrkr_type_group ='SEARCH_SEG')<?/MIVAR>
    <?/MIBLOCK>

    <?MICOMMENT>---------------------------------------------------------------
      Create markerselect_temp_match temp table if it does not already exist.
    <?/MICOMMENT>
    <?MISQL SQL="
      execute function table_exists('$markerselect_temp_match')">
      <?MISQL COND=$(EC,$1,f) SQL="
	create temp table $markerselect_temp_match (
	  mstmatch_zdb_id varchar(50),
	  mstmatch_name varchar(255),
	  mstmatch_significance integer,
	  mstmatch_precedence varchar(80)
	) with NO LOG;">
      <?/MISQL>
    <?/MISQL>

    <?MIBLOCK COND="$(XST,$input_name)">
    <?MIVAR NAME=$input_name DELIMIT="'" REPLACE="''">$input_name<?/MIVAR>
    <?MIVAR NAME=$input_name DELIMIT="_" REPLACE="\_">$input_name<?/MIVAR>
      <?MISQL COND=$(XST,$debug_timing) SQL="
        execute function get_time()">
        <br>$1 Starting name query
      <?/MISQL>
      <?MIBLOCK COND="$(EC,$compare,starts)">
	<?MIVAR NAME=$mrkrsel_nameTable><?/MIVAR>
	<?MIVAR NAME=$mrkrsel_nameTest>
	  and allmapnm_name_lower like '$(LOWER,$input_name)%'
	<?/MIVAR>
      <?MIELSE>
	<?MIVAR NAME=$mrkrsel_nameTable>, all_name_ends<?/MIVAR>
	<?MIVAR NAME=$mrkrsel_nameTest>
	  and allmapnm_serial_id = allnmend_allmapnm_serial_id
	  and allnmend_name_end_lower like '$(LOWER,$input_name)%'
	<?/MIVAR>
      <?/MIBLOCK>
      <?MIVAR NAME=geneMchIdLast><?/MIVAR>
      <?MIVAR NAME=mrkrsel_union><?/MIVAR>
     <?MIBLOCK COND="$(>,$(POSITION,$marker_type,CONSTRCT),0)">
        <?MIVAR NAME=mrkrsel_union>
	UNION
	 select mrel_mrkr_1_zdb_id as allmapnm_zdb_id, allmapnm_name,
                allmapnm_significance, allmapnm_precedence
	  from marker_relationship, all_map_names $mrkrsel_nameTable
	 where mrel_mrkr_2_zdb_id = allmapnm_zdb_id
 	   and mrel_type in ('promoter of','coding sequence of')
           and allmapnm_precedence <> 'Accession number'
           $mrkrsel_nameTest
	UNION
	 select mrel_mrkr_2_zdb_id as allmapnm_zdb_id, allmapnm_name,
                allmapnm_significance, allmapnm_precedence
	  from marker_relationship, all_map_names $mrkrsel_nameTable
	 where mrel_mrkr_1_zdb_id = allmapnm_zdb_id
 	   and mrel_type in ('promoter of','coding sequence of')
           and allmapnm_precedence <> 'Accession number'
           $mrkrsel_nameTest
        <?/MIVAR>
      <?/MIBLOCK>

      <?MIBLOCK COND="$(OR,$(EQ,$marker_type,MRPHLNO),$(EQ,$marker_type,TALEN),$(EQ,$marker_type,CRISPR))">
        <?MIVAR NAME=mrkrsel_union>
	UNION
	 select mrel_mrkr_1_zdb_id as allmapnm_zdb_id, allmapnm_name,
                allmapnm_significance, allmapnm_precedence
	  from marker_relationship, all_map_names $mrkrsel_nameTable
	 where mrel_mrkr_2_zdb_id = allmapnm_zdb_id
 	   and mrel_type = 'knockdown reagent targets gene'
           and allmapnm_precedence <> 'Accession number'
           $mrkrsel_nameTest
        <?/MIVAR>
      <?/MIBLOCK>

      <?MISQL SQL="
	 select allmapnm_zdb_id, allmapnm_name,
		allmapnm_significance, allmapnm_precedence
           from all_map_names $mrkrsel_nameTable
	  where allmapnm_precedence <> 'Accession number'
            $mrkrsel_nameTest
            $mrkrsel_union
          order by allmapnm_zdb_id, allmapnm_significance, allmapnm_name;">
	 <?MIVAR NAME=geneMchId>$1<?/MIVAR>
	 <?MIVAR NAME=geneMchName>$2<?/MIVAR>
	 <?MIVAR NAME=geneMchSig>$3<?/MIVAR>
	 <?MIVAR NAME=geneMchPrec>$4<?/MIVAR>

         <?MISQL COND="$(NC,$geneMchId,$geneMchIdLast)" SQL="
           insert into $markerselect_temp_match
	       ( mstmatch_zdb_id, mstmatch_name,
		 mstmatch_significance, mstmatch_precedence )
	     values('$1', '$(URLENCODE,$2)', '$3', '$4'); ">
	   <?MICOMMENT> the URLENCODE encodes "'" which is problematic<?/MICOMMENT>
 	   $(SETVAR,$geneMchIdLast,$geneMchId)
         <?/MISQL>

      <?/MISQL>

      <?MIVAR NAME=$mrkrsel_optional_match_table>,$markerselect_temp_match<?/MIVAR>
      <?MIVAR>
	$(SETVAR,$mrkrsel_optional_match_cols,", mstmatch_name, mstmatch_significance, mstmatch_precedence")
	$(SETVAR,$mrkrsel_optional_marker_cols,", mstmrkr_match_name, mstmrkr_significance, mstmrkr_precedence")
	$(VECAPPEND, $constraint," mrkr_zdb_id = mstmatch_zdb_id ")
      <?/MIVAR>
      <?MICOMMENT>restore the input string for display<?/MICOMMENT>
      <?MIVAR COND="$(XST,$input_name)" NAME=input_name DELIMIT="''" REPLACE="'">$input_name<?/MIVAR>
      <?MIVAR COND="$(XST,$input_name)" NAME=input_name DELIMIT="\_" REPLACE="_">$input_name<?/MIVAR>
    <?/MIBLOCK>  <?MICOMMENT>-------------------------------------<?/MICOMMENT>



    <?MICOMMENT>---------------------------------------------------
      ** 08/27 separate accession search from name search
    <?/MICOMMENT>
    <?MIBLOCK COND="$(XST,$input_acc)">
       <?MISQL COND=$(XST,$debug_timing) SQL="
         execute function get_time()">
         <br>$1 Starting accession queries
       <?/MISQL>
       <?MISQL SQL="
	insert into $markerselect_temp_match
	    ( mstmatch_zdb_id, mstmatch_name,
	      mstmatch_significance, mstmatch_precedence )
	select allmapnm_zdb_id, allmapnm_name,
	       allmapnm_significance, allmapnm_precedence
          from all_map_names
	 where allmapnm_name_lower like '$(LOWER,$input_acc)%'
           and allmapnm_precedence = 'Accession number';">
       <?/MISQL>
       <?MISQL SQL="
	insert into $markerselect_temp_match
	    ( mstmatch_zdb_id, mstmatch_name,
	      mstmatch_significance, mstmatch_precedence )
	select mrel_mrkr_1_zdb_id, allmapnm_name,
	       allmapnm_significance, allmapnm_precedence
          from all_map_names, marker_relationship
	 where allmapnm_name_lower like '$(LOWER,$input_acc)%'
           and allmapnm_precedence = 'Accession number'
	   and mrel_mrkr_2_zdb_id = allmapnm_zdb_id
	   and mrel_type in ('gene contains small segment',
			  'gene encodes small segment',
			  'clone contains small segment');">
       <?/MISQL>
       <?MISQL SQL="
	insert into $markerselect_temp_match
	    ( mstmatch_zdb_id, mstmatch_name,
	      mstmatch_significance, mstmatch_precedence )
	select mrel_mrkr_2_zdb_id, allmapnm_name,
	       allmapnm_significance, allmapnm_precedence
          from all_map_names, marker_relationship
	 where allmapnm_name_lower like '$(LOWER,$input_acc)%'
           and allmapnm_precedence = 'Accession number'
	   and mrel_mrkr_1_zdb_id = allmapnm_zdb_id
	   and mrel_type = 'clone contains gene';">
      <?/MISQL>

      <?MIVAR NAME=$mrkrsel_optional_match_table>,$markerselect_temp_match<?/MIVAR>
      <?MIVAR>
	$(VECAPPEND, $constraint," mrkr_zdb_id = mstmatch_zdb_id ")
      <?/MIVAR>
    <?/MIBLOCK> <?MICOMMENT>---------------------------------------<?/MICOMMENT>


    <?MICOMMENT>--------------- if LG is selected -----------------<?/MICOMMENT>
    <?MIBLOCK COND="$(NC,$lg,0)">
      <?MICOMMENT>
        we do mapping info pullover between clones and genes/small segs.
	Create markerselect_temp_on_lg temp table if it does not already exist.
      <?/MICOMMENT>
      <?MISQL COND=$(XST,$debug_timing) SQL="
        execute function get_time()">
        <br>$1 Starting LG queries
      <?/MISQL>
      <?MISQL SQL="
        execute function table_exists('$markerselect_temp_on_lg')">
        <?MISQL COND=$(EC,$1,f) SQL="
	  create temp table $markerselect_temp_on_lg (
	    mstlg_mrkr_zdb_id varchar(50)
	  ) with NO LOG;">
        <?/MISQL>
      <?/MISQL>

	<?MICOMMENT> genes & transcripts on Vega Assembly<?/MICOMMENT>
      <?MISQL SQL="
	insert into $markerselect_temp_on_lg
		( mstlg_mrkr_zdb_id )
	SELECT ul_data_zdb_id 
	FROM   unique_location 
	WHERE  ul_chromosome = '$lg'">
      <?/MISQL>

       <?MIVAR NAME=$lgConstraint> mrkr_zdb_id in (select mstlg_mrkr_zdb_id from $markerselect_temp_on_lg)<?/MIVAR>
       <?MIVAR>
          $(VECAPPEND, $constraint, $lgConstraint )
       <?/MIVAR>
    <?/MIBLOCK>
    <?MICOMMENT>------------------ end LG ---------------<?/MICOMMENT>

    <?MIVAR COND="$(XST,$knownmutant)">
       $(VECAPPEND, $constraint, "mrkr_zdb_id in (select fmrel_mrkr_zdb_id from feature_marker_relationship)")
    <?/MIVAR>


    <?MIVAR NAME=constraint SEPARATE=" AND ">$constraint<?/MIVAR>

  <?/MIBLOCK> <?MICOMMENT> end build constraint for gene/marker search <?/MICOMMENT>

  <?MISQL COND=$(XST,$debug_timing) SQL="
    execute function get_time()">
    <br>$1 Done building constraint
  <?/MISQL>


  <?MICOMMENT>
    main execution of data collection
    the first block select markers match the constraint and furthur
    filter out the mapped ones if needed, the second part deals with
    the mapped data links from publication page which only collect
    linkage group mapping, and not only for marker but also mutant

    First create markerselect_temp_marker temp table if it does not already exist
  <?/MICOMMENT>

  <?MISQL SQL="
    execute function table_exists('$markerselect_temp_marker')">
    <?MISQL COND=$(EC,$1,f) SQL="
      create temp table $markerselect_temp_marker (
	mstmrkr_zdb_id varchar(50),
	mstmrkr_name varchar(255),
	mstmrkr_abbrev varchar(255),
	mstmrkr_abbrev_order varchar(255),
	mstmrkr_type varchar(10),
	mstmrkr_match_name varchar(255),
	mstmrkr_significance integer,
	mstmrkr_precedence varchar(80)
      ) with NO LOG;">
    <?/MISQL>
  <?/MISQL>
  <?MICOMMENT> right now, Morpholino is not included in SEARCH_MK group
	       yet. As seen, it is easy to forgot to add new types into
               type group. It is also a question whether knockdown reagent
               need to be listed out of marker group...As fish redo comes
               along, it is a question to resolve. Also this page needs
	       some help to be more tidy.
  <?/MICOMMENT>
  <?MIBLOCK COND="$(EC,$type,pub_mrkr)">

    <?MICOMMENT>case1581 curators suggested no xpat, pato columns<?/MICOMMENT>
    <?MIVAR>$(SETVAR,$show_xpat_pato,f)<?/MIVAR>

    <?MISQL SQL="
      insert into $markerselect_temp_marker
             (mstmrkr_zdb_id, mstmrkr_name, mstmrkr_abbrev,
	     mstmrkr_abbrev_order,  mstmrkr_type )
      select mrkr_zdb_id, mrkr_name, mrkr_abbrev,
	     mrkr_abbrev_order, mrkr_type
        from record_attribution, feature_marker_relationship, marker
       where recattrib_source_zdb_id = '$pubId'
         and recattrib_data_zdb_id = fmrel_ftr_zdb_id
         and fmrel_mrkr_zdb_id = mrkr_zdb_id
         and fmrel_type = 'is allele of'
       ;">
    <?/MISQL>

    <?MISQL SQL="
     insert into $markerselect_temp_marker
             (mstmrkr_zdb_id, mstmrkr_name, mstmrkr_abbrev,
	     mstmrkr_abbrev_order,  mstmrkr_type )
      select mrkr_zdb_id, mrkr_name, mrkr_abbrev,
	     mrkr_abbrev_order, mrkr_type
        from record_attribution, marker
       where recattrib_source_zdb_id = '$pubId'
         and recattrib_data_zdb_id = mrkr_zdb_id
 	 and mrkr_type in
	     (
	       select mtgrpmem_mrkr_type
	         from marker_type_group_member
                where mtgrpmem_mrkr_type_group = 'SEARCH_MK'
             )
           and mrkr_type <> 'MRPHLNO'
       ;">
    <?/MISQL>

    <?MISQL SQL="
     insert into $markerselect_temp_marker
             (mstmrkr_zdb_id, mstmrkr_name, mstmrkr_abbrev,
	     mstmrkr_abbrev_order,  mstmrkr_type )
    select m.mrkr_zdb_id, m.mrkr_name, m.mrkr_abbrev, m.mrkr_abbrev_order, m.mrkr_type
    from marker m
    where
    m.mrkr_zdb_id in
    (
     select mr.mrel_mrkr_2_zdb_id
    from record_attribution ra, marker_relationship mr
    where ra.recattrib_source_zdb_id = '$pubId'
    and ra.recattrib_data_zdb_id = mr.mrel_mrkr_1_zdb_id
    and mr.mrel_type =  'knockdown reagent targets gene'
    )
    ;">
    <?/MISQL>


    <?MIVAR> $(SETVAR,$type_of_genedom,t) <?/MIVAR>

  <?MIELSE COND="$(EC,$type,pub_mo)">
     <?MISQL SQL="
       insert into $markerselect_temp_marker
	   ( mstmrkr_zdb_id, mstmrkr_name, mstmrkr_abbrev,
	     mstmrkr_abbrev_order,  mstmrkr_type )
	select mrkr_zdb_id, mrkr_name, mrkr_abbrev,
	       mrkr_abbrev_order, mrkr_type
	from  record_attribution, marker
	where recattrib_source_zdb_id = '$pubId'
	  and recattrib_data_zdb_id = mrkr_zdb_id
	  and mrkr_type = 'MRPHLNO';
	">
     <?/MISQL>
     <?MIVAR NAME=$type_of_knockdown_reagent>t<?/MIVAR>
     <?MIVAR NAME=$type_of_genedom>f<?/MIVAR>

  <?MIELSE COND="$(EC,$type,pub_talen)">
     <?MISQL SQL="
       insert into $markerselect_temp_marker
	   ( mstmrkr_zdb_id, mstmrkr_name, mstmrkr_abbrev,
	     mstmrkr_abbrev_order,  mstmrkr_type )
	select mrkr_zdb_id, mrkr_name, mrkr_abbrev,
	       mrkr_abbrev_order, mrkr_type
	from  record_attribution, marker
	where recattrib_source_zdb_id = '$pubId'
	  and recattrib_data_zdb_id = mrkr_zdb_id
	  and mrkr_type = 'TALEN';
	">
     <?/MISQL>
     <?MIVAR NAME=$type_of_knockdown_reagent>t<?/MIVAR>
     <?MIVAR NAME=$type_of_genedom>f<?/MIVAR>


  <?MIELSE COND="$(EC,$type,pub_crispr)">
     <?MISQL SQL="
       insert into $markerselect_temp_marker
	   ( mstmrkr_zdb_id, mstmrkr_name, mstmrkr_abbrev,
	     mstmrkr_abbrev_order,  mstmrkr_type )
	select mrkr_zdb_id, mrkr_name, mrkr_abbrev,
	       mrkr_abbrev_order, mrkr_type
	from  record_attribution, marker
	where recattrib_source_zdb_id = '$pubId'
	  and recattrib_data_zdb_id = mrkr_zdb_id
	  and mrkr_type = 'CRISPR';
	">
     <?/MISQL>
     <?MIVAR NAME=$type_of_knockdown_reagent>t<?/MIVAR>
     <?MIVAR NAME=$type_of_genedom>f<?/MIVAR>


  <?MIELSE COND="$(EC,$type,pub_efg)" >
     <?MISQL SQL="
       insert into $markerselect_temp_marker
	   ( mstmrkr_zdb_id, mstmrkr_name, mstmrkr_abbrev,
	     mstmrkr_abbrev_order,  mstmrkr_type )
	select mrkr_zdb_id, mrkr_name, mrkr_abbrev,
	       mrkr_abbrev_order, mrkr_type
	from  record_attribution, marker
	where recattrib_source_zdb_id = '$pubId'
	  and recattrib_data_zdb_id = mrkr_zdb_id
	  and mrkr_type = 'EFG';
	">
     <?/MISQL>
  <?MIELSE COND="$(EC,$type,pub_mapped)" >
     <?MISQL SQL="
       insert into $markerselect_temp_marker
	   ( mstmrkr_zdb_id, mstmrkr_name, mstmrkr_abbrev,
	     mstmrkr_abbrev_order,  mstmrkr_type )
	select distinct mrkr_zdb_id, mrkr_name, mrkr_abbrev, mrkr_abbrev_order, mrkr_type
  	from linkage_membership_search,linkage, marker
  	where lnkg_source_zdb_id = '$pubId'
    	and lms_lnkg_zdb_id = lnkg_zdb_id
    	and lms_member_1_zdb_id = mrkr_zdb_id
	and lnkg_chromosome <> '0';">
     <?/MISQL>
     <?MISQL SQL="
       insert into $markerselect_temp_marker
	   ( mstmrkr_zdb_id, mstmrkr_name, mstmrkr_abbrev,
	     mstmrkr_abbrev_order,  mstmrkr_type )
	select mrkr_zdb_id, mrkr_name, mrkr_abbrev, mrkr_abbrev_order, mrkr_type
  	from linkage_single,linkage, marker
  	where lnkg_source_zdb_id = '$pubId'
    	and lsingle_lnkg_zdb_id = lnkg_zdb_id
    	and lsingle_member_zdb_id = mrkr_zdb_id
	and lnkg_chromosome <> '0';">
     <?/MISQL>
     <?MISQL SQL="
       insert into $markerselect_temp_marker
	   ( mstmrkr_zdb_id, mstmrkr_name, mstmrkr_abbrev,
	     mstmrkr_abbrev_order,  mstmrkr_type )
  	select feature_zdb_id, feature_name, feature_abbrev, feature_abbrev_order, 'MUTANT'
  	from linkage_membership_search, linkage, feature
  	where lnkg_source_zdb_id = '$pubId'
    	and lms_lnkg_zdb_id = lnkg_zdb_id
    	and lms_member_1_zdb_id = feature_zdb_id
	and lnkg_chromosome <> '0';">
     <?/MISQL>
     <?MIVAR NAME=$type_of_genedom>f<?/MIVAR>

  <?MIELSE>

    <?MISQL SQL="
       insert into $markerselect_temp_marker
	   ( mstmrkr_zdb_id, mstmrkr_name, mstmrkr_abbrev,
	     mstmrkr_abbrev_order,  mstmrkr_type $mrkrsel_optional_marker_cols )
	  select distinct mrkr_zdb_id, mrkr_name, mrkr_abbrev,
			  mrkr_abbrev_order, mrkr_type $mrkrsel_optional_match_cols
	   from marker $mrkrsel_optional_match_table
	  where $constraint
	;">

    <?/MISQL>

    <?MICOMMENT>
      Delete can be expensive, only do it if you actually inserted records
    <?/MICOMMENT>
    <?MISQL COND="$(OR,$(XST,$input_name),$(XST,$input_acc))" SQL="
 	delete from $markerselect_temp_match;">
    <?/MISQL>

    <?MISQL COND="$(NC,$lg,0)" SQL="
	delete from $markerselect_temp_on_lg;">
    <?/MISQL>

  <?/MIBLOCK>


  <?MICOMMENT> ===========================================================
               ===   Display Search Results
               ===========================================================
  <?/MICOMMENT>

  <?MISQL COND=$(XST,$debug_timing) SQL="
       execute function get_time()">
       <br>$1 Done database searching, start display
  <?/MISQL>

  <?MISQL SQL="
	select distinct mstmrkr_zdb_id,mstmrkr_type
	  from $markerselect_temp_marker;">
       <?MIVAR NAME=$the_marker>$1<?/MIVAR>
       <?MIVAR NAME=$the_type>$2<?/MIVAR>
  <?/MISQL>
  <?MIVAR NAME=$num_recs>$MI_ROWCOUNT<?/MIVAR>
  <?MIBLOCK COND="$(AND,$(NXST,$return_rec),$(NXST,$accession),$(=,$num_recs,1))">

     <?MIBLOCK COND="$(EC,$the_type,MUTANT)">
	<SCRIPT>
          <?MICOMMENT> when this page is called by pubview2.apg with parameter $pub_mapped, mutant record could be retrieved.
          May need more work to add the feature name to the search but better to redirect to a view page.
          <?/MICOMMENT>
          <?MIVAR>
            replaceLocation("/$the_marker")
          <?/MIVAR>
	</SCRIPT>
     <?MIELSE>
	<SCRIPT>
          <?MIVAR>
	    <?MISQL SQL="select get_mrkr_url('$the_marker') from single;">
	      replaceLocation("$1")
            <?/MISQL>
          <?/MIVAR>
	</SCRIPT>
     <?/MIBLOCK>
  <?MIELSE>

   <?MICOMMENT>return page title display<?/MICOMMENT>

   <table class="markerselect-results-table" width=100%>
     <TR>
      <TD width=90%>
          <font size="+1"><center>
	  <?MIBLOCK COND="$(XST,$pubId)">
            <?MIBLOCK COND="$(EC,$type,pub_mrkr)">
                Genes / Markers
            <?MIELSE COND="$(EC,$type,pub_mo)">
                Morpholino
            <?MIELSE COND="$(EC,$type,pub_talen)">
                TALEN
           <?MIELSE COND="$(EC,$type,pub_crispr)">
                CRISPR
            <?MIELSE COND="$(EC,$type,pub_efg)">
                Engineered Foreign Genes
            <?MIELSE>
 	        Mapping Data
            <?/MIBLOCK>
            <?MIVAR> List (<b>$num_recs</b> records)<?/MIVAR>
	  <?MIELSE COND="$(XST,$accession)">
	    <?MIVAR>Marker List (<b>$num_recs</b> records)<?/MIVAR>
	  <?MIELSE>
	    <?MIVAR>$marker_type_display Search Results (<b>$num_recs</b> records)<?/MIVAR>
	  <?/MIBLOCK></center>
          </font>
      </TD>
     <?MIBLOCK COND="$(NXST,$accession)">
       <TD width=10%>
     	 <?MICOMMENT>
            Insert a form with one button.
	    label button Your Input Welcome
	 <?/MICOMMENT>
         <?MISQL SQL="select WebExplode(object,'') from webPages where ID='aa-input_button_generic.apg';">$1<?/MISQL>
        </TD>
     <?/MIBLOCK>
    </TR>
    </TABLE>

   <?MICOMMENT> Stuff to control retrieval volume <?/MICOMMENT>
    <FORM method=post
          name=markerlister
          action="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->">
      <?MIVAR>
        <input type=hidden name=MIval value=aa-markerselect.apg>
        <input type=hidden name=userid value="$userid">

      <?/MIVAR>
    </FORM>


    <?MIVAR NAME=$ok_view_map>0<?/MIVAR>

    <?MICOMMENT> WALKING WINDOW
      Initialization
    <?/MICOMMENT>
    <?MIVAR NAME=WINSIZE DEFAULT=20>$WINSIZE<?/MIVAR>
    <?MIVAR NAME=BEGIN DEFAULT=1>$START<?/MIVAR>
    <?MIVAR NAME=page DEFAULT=1>$page<?/MIVAR>

    <?MICOMMENT> DEFINITION OF RANGES <?/MICOMMENT>
    <?MIVAR NAME=BEGIN>$(IF,$(<,$BEGIN,1),1,$BEGIN)<?/MIVAR>
    <?MIVAR NAME=END>$(+,$BEGIN,$WINSIZE)<?/MIVAR>

    <?MICOMMENT> EXECUTION
      Set outer loop variables, row_color and ok_view_map
    <?/MICOMMENT>
    <?MIVAR name=$row_color>$highlight<?/MIVAR>
    <?MIVAR NAME=$ok_view_map>0<?/MIVAR>

    <?MIVAR NAME=$rowNUM>$BEGIN<?/MIVAR>

    <?MIVAR NAME=$curviewer><?/MIVAR>

    <?MICOMMENT>============ Query Database ==================== <?/MICOMMENT>

    <?MICOMMENT> create a temp table holding feature records for phenotype display<?/MICOMMENT>
    <?MIVAR NAME=mrkrselect_temp_allele>$(CONCAT,"mrkrselect_temp_allel",$mrkrsel_session_id)<?/MIVAr>
    <?MISQL SQL="
       execute function table_exists('$mrkrselect_temp_allele')">
       <?MISQL COND=$(EC,$1,f) SQL="
	   create temp table $mrkrselect_temp_allele (
	          mta_ftr_zdb_id varchar(50)
	   ) with NO LOG;">
       <?/MISQL>
    <?/MISQL>

    <?MICOMMENT>the master sql for non-MO types with two placeholder columns<?/MICOMMENT>
    <?MIVAR NAME=$mrkrsel_master_sql>
	      select distinct mstmrkr_name, mstmrkr_abbrev, mstmrkr_type,
		      mrkrtype_type_display, mstmrkr_zdb_id,
		      mstmrkr_abbrev_order, mstmrkr_match_name,
		      mstmrkr_significance, mstmrkr_precedence, '', ''
		from $markerselect_temp_marker, marker_types mt
               where mstmrkr_type = mt.marker_type
            order by mstmrkr_significance, mstmrkr_type, mstmrkr_abbrev_order;
    <?/MIVAR>

    <?MICOMMENT> For Disruptors (Morpholino, TALEN, CRISPR), the order is only meaningful when it is by gene
                 symbol. Alternatively, we could store the expected gene symbol
                 string as the Disruptor name/abbrev order string.
    <?/MICOMMENT>
    <?MIBLOCK COND="$(OR,$(AND,$(XST,$marker_type),$(OR,$(EC,$marker_type,MRPHLNO),$(EC,$marker_type,TALEN),$(EC,$marker_type,CRISPR))),$(OR,$(EC,$type,pub_mo),$(EC,$type,pub_talen),$(EC,$type,pub_crispr)))">
	<?MIVAR NAME=$mrkrsel_master_sql>
	       select distinct mstmrkr_name, mstmrkr_abbrev, mstmrkr_type,
		      mt.mrkrtype_type_display, mstmrkr_zdb_id,
		      mg.mrkr_abbrev_order, mstmrkr_match_name,
		      mstmrkr_significance, mstmrkr_precedence,
		      mg.mrkr_zdb_id, mg.mrkr_abbrev
		from $markerselect_temp_marker, marker_types mt,
		     outer (marker_relationship, marker mg)
               where mstmrkr_type = mt.marker_type
		 and mstmrkr_zdb_id = mrel_mrkr_1_zdb_id
                 and mrel_mrkr_2_zdb_id = mg.mrkr_zdb_id
                 and mrel_type = 'knockdown reagent targets gene'
            order by mstmrkr_significance, mstmrkr_type, mg.mrkr_abbrev_order;
       <?/MIVAR>
    <?/MIBLOCK>

    <?MIVAR NAME=displayTitle>f<?/MIVAR>
    <?MISQL WINSTART=$BEGIN WINSIZE=$WINSIZE SQL="$mrkrsel_master_sql">

      <?MIVAR name=$marker_name>$1<?/MIVAR>
      <?MIVAR name=$marker_abbrev>$2<?/MIVAR>
      <?MIVAR name=$mtype>$3<?/MIVAR>
      <?MIVAR name=$mtype_display>$4<?/MIVAR>
      <?MIVAR name=$OID>$5<?/MIVAR>
      <?MIVAR name=$match_name>$(URLDECODE,$7)<?/MIVAR>
      <?MIVAR name=$match_text>$9<?/MIVAR>
      <?MIVAR name=$mrkrsel_mo_gene_zdb_id>$10<?/MIVAR>
      <?MIVAR name=$mrkrsel_mo_gene_sym>$11<?/MIVAR>

      <?MICOMMENT> ** call the html functions here so that they only get executed
                      for the results that are actually displayed ** <?/MICOMMENT>
      <?MISQL SQL="select get_mrkr_abbrev_html('$OID'),
                   get_mrkr_abbrev_html_link('$OID')
                   from single;">
         <?MIVAR NAME="$mrkrsel_mrkr_abbrev_html">$1<?/MIVAR>
         <?MIVAR NAME="$mrkrsel_mrkr_link">$2<?/MIVAR>
      <?/MISQL>


      <?MIBLOCK COND="$(EC,$displayTitle,f)">
        <?MICOMMENT> == display the "Show genes with known loci" button ==
        <?/MICOMMENT>
        <?MIBLOCK COND="$(AND,$(XST,$marker_type),$(EC,$type_of_genedom,t))">
	  <?MIVAR NAME=$mrkr_param_list>&query_results=t$(IF,$(XST,$input_name),&input_name=$(URLENCODE,$input_name))$(IF,$(XST,$input_acc),&input_acc=$(URLENCODE,$input_acc))$(IF,$(XST,$compare),&compare=$compare)$(IF,$(NC,$lg,0),&lg=$lg)<?/MIVAR>
<?MIBLOCK COND="$(EQ,$marker_type,GENE)">
          <?MIBLOCK COND="$(NXST,$knownmutant)">
	    <?MIVAR><input type=button
            value="Show genes with mutant(s)" onClick="document.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-markerselect.apg&marker_type=GENE&knownmutant=t$mrkr_param_list')">
	     <?/MIVAR>
	  <?MIELSE>

	    <?MIVAR><input type=button
            value="Show all matching genes" onClick="document.location.replace('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-markerselect.apg&marker_type=GENE$mrkr_param_list')">
	    <?/MIVAR>
          <?/MIBLOCK>
          <?/MIBLOCK>
        <?/MIBLOCK>

        <?MICOMMENT> ========== display title line ===============
        <?/MICOMMENT>
        <TABLE id="markerselect-results-table" class="rowstripes" width=100% border=0 cellspacing=0>
          <TR align=left>
           <?MIVAR COND="$(EC,$type_of_knockdown_reagent,t)">
             <th align=left width=25%>
                <b>Gene</b>
             </th>
           <?/MIVAR>

           <th align=left width=25%>
             <?MIBLOCK COND=$(EC,$type_of_knockdown_reagent,t)>
	        <b>Reagent</b>
             <?MIELSE COND=$(EC,$type_of_genedom,t)>
	        <b>Symbol - name</b>
             <?MIELSE>
	        <b>Name</b>
             <?/MIBLOCK>
           </th>

	   <?MIVAR COND="$(AND,$(EC,$type_of_genedom,t),$(NC,$show_xpat_pato,f))">
             <th align=left width=10%><B>Expression</B></th>
             <th align=left width=15%><B>Phenotype</b></th>
	   <?/MIVAR>

           <?MIVAR NAME=mksel_map_col>t<?/MIVAR>
           <?MIVAR COND="$(AND,$(XST,$marker_type),$(>,$(POSITION,$marker_type,CONSTRCT),0))">
		$(SETVAR,$mksel_map_col,f)
           <?/MIVAR>
           <?MIVAR COND="$(AND,$(EC,$type_of_knockdown_reagent,f),$(EC,$mksel_map_col,t),$(AND,$(XST,$marker_type),$(NE,$marker_type,TSCRIPT),$(NE,$marker_type,REGION),$(NE,$marker_type,EFG)))">
       	     <th align-left><b>Location</b></th>
           <?/MIVAR>
	   <?MIBLOCK COND="$(AND,$(XST,$marker_type),$(EQ,$marker_type,TSCRIPT))">
             <th align-left><b><a href="/action/marker/transcript-types">Transcript Type</a></b></th>
           <?/MIBLOCK>


           <?MIBLOCK COND="$(XST,$input_name)">
     <?MIBLOCK COND="$(AND,$(XST,$mtype),$(>,$(POSITION,$mtype,CONSTRCT),0))">
       <th align=left>&nbsp;</th>
     <?/MIBLOCK>
     <th align=left><b>Matching Text</b></th>
   <?/MIBLOCK>
 </TR>
<?/MIBLOCK><?MICOMMENT>===== end of title display ===<?/MICOMMENT>
<?MIVAR>$(SETVAR,$displayTitle,t)<?/MIVAR>

<?MICOMMENT>when this page is called from pubview2.apg with parameter pub_mapped, mutant data could be retrieved and displayed. <?/MICOMMENT>
$(IF,$(EC,$mtype,MUTANT),$(SETVAR,$curviewer,"/action/fish/search?fsel_allele_id="), $(SETVAR,$curviewer,"/action/marker/view/"))


<?MICOMMENT> == In case of MO search, list the gene symbol first,
	   == group the MO list by gene symbol, also alternate
	   == row color by gene group.
<?/MICOMMENT>

<?MIBLOCK COND="$(OR,$(>,$(POSITION,$OID,MRPHLNO),0),$(>,$(POSITION,$OID,TALEN),0),$(>,$(POSITION,$OID,CRISPR),0))">

 <?MIVAR NAME=$display_target_gene><?/MIVAR>

 <?MICOMMENT>== when starts MOs on a new gene ==<?/MICOMMENT>

     <?MIVAR NAME=$display_target_gene><i><A HREF=/action/marker/view/$mrkrsel_mo_gene_zdb_id> $mrkrsel_mo_gene_sym </A></i><?/MIVAR>

<?MICOMMENT>
     <?MIBLOCK COND="$(NC,$rowNUM,1)">
	 <?MIBLOCK COND="$(EC,$row_color,$highlight)">
	    <?MIVAR>$(SETVAR,$row_color,#FFFFFF)<?/MIVAR>
	 <?MIELSE>
	    <?MIVAR>$(SETVAR,$row_color,$highlight)<?/MIVAR>
	 <?/MIBLOCK>
     <?/MIBLOCK>
<?/MICOMMENT>
<?/MIBLOCK>

<?MICOMMENT> start new row and column <?/MICOMMENT>
<TR bgcolor="<?MIVAR>$row_color<?/MIVAR>">

<?MIBLOCK COND="$(OR,$(>,$(POSITION,$OID,MRPHLNO),0),$(>,$(POSITION,$OID,TALEN),0),$(>,$(POSITION,$OID,CRISPR),0))">
  <TD>
   <?MIVAR>$display_target_gene<?/MIVAR>
  </TD>
<?/MIBLOCK>


<?MIVAR name=$rowNUM>$(+,$rowNUM,1)<?/MIVAR>
<TD valign=top>
  <?MIVAR>
    $(IF,$(XST,$return_rec),<A HREF=/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-select.apg&return_rec=$return_rec&new_oid=$OID>SELECT</A>)

    $(IF,$(OR,$(XST,$accession),$(XST,$pubId)),$mtype_display:)
  <?/MIVAR>

  <?MIBLOCK COND=$(EC,$type_of_genedom,f)>
     <?MIBLOCK COND="$(EC,$mtype_display,Mutant)">
      <?MISQL SQL="select feature_abbrev from feature where feature_zdb_id='$OID'">
     <?MIVAR NAME=$ftrname>$1<?/MIVAR>
     <?/MISQL>
      <?MIVAR><a href=/action/feature/feature-detail?zdbID=$OID>$ftrname</a><?/MIVAR>
     <?MIELSE>
      <?MIVAR>$mrkrsel_mrkr_link<?/MIVAR>
      <?/MIBLOCK>
	  <?MIELSE> <?MICOMMENT> ** IS A GENE ** <?/MICOMMENT>
	     <?MIVAR>
                 <A HREF="$curviewer$OID"> <i>$marker_abbrev</i></A>-$marker_name</TD>
              <?/MIVAR>
          <?/MIBLOCK>

          <?MIBLOCK COND=$(AND,$(EC,$type_of_genedom,t),$(NC,$show_xpat_pato,f))>

	      <?MICOMMENT>------    Expression  ----------------------
                          --
              <?/MICOMMENT>

	      <?MIVAR NAME=$mrkrsel_xpat_fig_count>0<?/MIVAR>

          <?MICOMMENT>
          Do not show genes that are withdrawn or have withdrawn clones or chimeric clones
          <?/MICOMMENT>
	      <?MISQL SQL="
         	  select distinct xpatfig_fig_zdb_id
          	    from expression_experiment, expression_result,
                         expression_pattern_figure, marker gene
          	   where '$OID' = xpatex_gene_zdb_id
                     and gene.mrkr_abbrev[1,10] <> 'WITHDRAWN:'
		     and xpatex_zdb_id = xpatres_xpatex_zdb_id
                     and xpatres_zdb_id = xpatfig_xpatres_zdb_id
                     and xpatex_gene_zdb_id = gene.mrkr_zdb_id
             and not exists(
                 select 'x' from clone
                 where clone_mrkr_zdb_id=xpatex_probe_feature_zdb_id
                 and clone_problem_type = 'Chimeric'
             )
 		     and not exists (select 'x' from marker
                        where mrkr_zdb_id = xpatex_probe_feature_zdb_id
                                    and mrkr_abbrev[1,10] = 'WITHDRAWN:') ;">
      	      <?/MISQL>
	      <?MIVAR NAME=$mrkrsel_xpat_fig_count>$MI_ROWCOUNT<?/MIVAR>
	      <?MIVAR NAME=$mrkrsel_xpat_fig_zdb_id>$1<?/MIVAR>

              <TD nowrap>

              <?MIVAR COND="$(=,$mrkrsel_xpat_fig_count,1)"><A HREF=/$mrkrsel_xpat_fig_zdb_id>1 figure</A><?/MIVAR>

              <?MIVAR COND="$(>,$mrkrsel_xpat_fig_count,1)">
                  <A HREF=/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-xpatselect.apg&query_results=exists&gene_name=$marker_abbrev&xpatsel_geneZdbId=$OID>$mrkrsel_xpat_fig_count figures</A>
	      <?/MIVAR>

          <?MICOMMENT>
          Do not show genes that are withdrawn or have withdrawn clones or chimeric clones
          <?/MICOMMENT>
	      <?MISQL SQL="
         	  select img_zdb_id
          	    from expression_experiment, expression_result,
                         expression_pattern_figure, image, marker gene
          	   where '$OID' = xpatex_gene_zdb_id
                     and gene.mrkr_abbrev[1,10] <> 'WITHDRAWN:'
		     and xpatex_zdb_id = xpatres_xpatex_zdb_id
                     and xpatres_zdb_id = xpatfig_xpatres_zdb_id
                     and xpatfig_fig_zdb_id = img_fig_zdb_id
                     and xpatex_gene_zdb_id = gene.mrkr_zdb_id
                     and not exists(
                         select 'x' from clone
                         where clone_mrkr_zdb_id=xpatex_probe_feature_zdb_id
                         and clone_problem_type = 'Chimeric'
                     )
                     and not exists (select 'x' from marker
                        where mrkr_zdb_id = xpatex_probe_feature_zdb_id
                                    and mrkr_abbrev[1,10] = 'WITHDRAWN:') ;">

      	      <?/MISQL>
              <?MIVAR COND="$(>,$MI_ROWCOUNT,0)">
 		   <img src="/images/camera_icon.gif" border=0 alt="with image(s)">
              <?/MIVAR>

              &nbsp;
              </TD>

	      <?MICOMMENT>------    Phenotype  ----------------------
                       -- gene is related to allele by feature_marker_relationship
                       -- as well as mapped_deletion. We need another temp table,
                       -- to store allele data, then re-use the pre-empted
                       -- $mrkrselect_temp_fig to store distinct fig zdb id
              <?/MICOMMENT>


	      <?MISQL SQL="
		 insert into $mrkrselect_temp_allele (mta_ftr_zdb_id)
		      select fmrel_ftr_zdb_id
                        from feature_marker_relationship
		       where fmrel_mrkr_zdb_id='$OID';">
              <?/MISQL>

              <?MIVAR NAME=mrkrsel_pheno_img_count>0<?/MIVAR>
              <?MIVAR NAME=mrkrsel_MO_flag>0<?/MIVAR>
              <?MISQL SQL="select distinct phenox_fig_zdb_id
                             from mutant_fast_search, phenotype_experiment
                            where mfs_mrkr_zdb_id ='$OID'
      	                      and mfs_genox_zdb_id = phenox_genox_zdb_id
      	                      and exists (select NOTnormal.phenos_pk_id
                                            from phenotype_statement NOTnormal
                                           where NOTnormal.phenos_phenox_pk_id = phenox_pk_id
                                             and NOTnormal.phenos_tag != 'normal');">
                <?MIVAR NAME=mrkrsel_pheno_fig_zdb_id>$1<?/MIVAR>

                <?MICOMMENT> *** deciding on displaying camera icon or not <?/MICOMMENT>
                <?MISQL COND="$(<,$mrkrsel_pheno_img_count,1)"
                        SQL="select count(img_zdb_id) from image
                              where img_fig_zdb_id = '$mrkrsel_pheno_fig_zdb_id';">
                  <?MIVAR>$(SETVAR,$mrkrsel_pheno_img_count,$1)<?/MIVAR>
                <?/MISQL>

                <?MICOMMENT> *** deciding on displaying MO icon or not <?/MICOMMENT>
                <?MISQL COND="$(<,$mrkrsel_MO_flag,1)"
                        SQL="select count(expcond_mrkr_zdb_id)
       	                       from mutant_fast_search,genotype_experiment,experiment_condition,phenotype_experiment
       	                      where mfs_mrkr_zdb_id = '$OID'
       	                        and phenox_genox_zdb_id = mfs_genox_zdb_id
       	                        and phenox_fig_zdb_id = '$mrkrsel_pheno_fig_zdb_id'
       	                        and mfs_genox_zdb_id = genox_zdb_id
       	                        and expcond_exp_zdb_id = genox_exp_zdb_id
       	                        and expcond_mrkr_zdb_id is not null;">
                  <?MIVAR>$(SETVAR,$mrkrsel_MO_flag,$1)<?/MIVAR>
                <?/MISQL>
              <?/MISQL>

	      <?MIVAR NAME=mrkrsel_pheno_fig_count>$MI_ROWCOUNT<?/MIVAR>

              <TD nowrap>

              <?MIVAR COND="$(=,$mrkrsel_pheno_fig_count,1)"><A HREF=/$mrkrsel_pheno_fig_zdb_id>1 figure</A><?/MIVAR>

              <?MIVAR COND="$(>,$mrkrsel_pheno_fig_count,1)">
                  <A HREF=/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-pheno_summary.apg&OID=$OID>$mrkrsel_pheno_fig_count figures</A>
              <?/MIVAR>

              <?MIBLOCK COND="$(>,$mrkrsel_pheno_fig_count,0)">
                <?MIVAR COND="$(>,$mrkrsel_pheno_img_count,0)">
		   <img src="/images/camera_icon.gif" border=0 alt="with image(s)">
	        <?/MIVAR>
	      <?/MIBLOCK>
              &nbsp;
              </TD>

              <?MISQL SQL="delete from $mrkrselect_temp_allele"><?/MISQL>
              <?MIVAR>$(UNSETVAR,$mrkrsel_xpat_fig_img_zdb_id)<?/MIVAR>
              <?MIVAR>$(UNSETVAR,$mrkrsel_pheno_fig_img_zdb_id)<?/MIVAR>

	  <?/MIBLOCK><?MICOMMENT> addition for genes<?/MICOMMENT>


	  <?MICOMMENT>------ Map info ------<?/MICOMMENT>
	  <?MIBLOCK COND="$(AND,$(EC,$type_of_knockdown_reagent,f),$(AND,$(XST,$marker_type),$(NE,$marker_type,TSCRIPT),$(NE,$marker_type,REGION),$(NE,$marker_type,EFG)))">
 	      <TD width=20%>
	      <?MIVAR>
            <script type="text/javascript">
	    	    var elementName = 'mappingDetail_';
		    elementName += '$OID';
		    elementName = elementName.replace(new RegExp("-", 'g'),"_")
		    document.write('<div id="mapDetail" class="'+elementName+'"></div>');
		    elementName = "."+elementName;
                jQuery(elementName).load('/action/mapping/summary/$OID');
            </script>
	    <?/MIVAR>
              </TD>
          <?/MIBLOCK>
          <?MIBLOCK COND="$(AND,$(XST,$marker_type),$(EC,$marker_type,TSCRIPT))">
             <?MISQL SQL="select tscriptt_display
                          from transcript
                            join transcript_type
                              on tscript_type_id = tscriptt_pk_id
                          where tscript_mrkr_zdb_id = '$OID';">
               <TD width="20%">$1</TD>
             <?/MISQL>
          <?/MIBLOCK>


	  <?MICOMMENT>------ Matching Text ------<?/MICOMMENT>
            <?MIBLOCK COND="$(XST,$input_name)">
	  <TD width=20%>
	      <?MIVAR NAME=start_pos>$(POSITION,$(LOWER,$match_name),$(LOWER,$input_name))<?/MIVAR>
	      <?MIVAR NAME=str_length>$(STRLEN,$input_name)<?/MIVAR>

	      <?MIVAR>$match_text: $(SUBSTR,$match_name,1,$(-,$start_pos,1))<b>$(SUBSTR,$match_name,$start_pos,$str_length)</b>$(SUBSTR,$match_name,$(+,$start_pos,$str_length))
              <?/MIVAR>
 	  </TD>
            <?/MIBLOCK>
 	  </TR>

	  <?MICOMMENT> change row_color for non-morph case <?/MICOMMENT>
	  <?MIBLOCK COND="$(=,$(POSITION,$OID,MRPHLNO),0)">
               <?MIBLOCK COND="$(EC,$row_color,$highlight)">
		  <?MIVAR>$(SETVAR,$row_color,#FFFFFF)<?/MIVAR>
               <?MIELSE>
		  <?MIVAR>$(SETVAR,$row_color,$highlight)<?/MIVAR>
               <?/MIBLOCK>
	  <?/MIBLOCK>


    <?/MISQL> 	 <?MICOMMENT> for each search result <?/MICOMMENT>
    </TABLE>



    <?MICOMMENT>Build the bar for walk window<?/MICOMMENT>
    <?MIBLOCK COND="$(XST,$accession)">
    Removed accession search...
    <?MIELSE COND="$(XST,$pubId)">
      <?MIVAR name=selector>MIval=aa-markerselect.apg&WINSIZE=$WINSIZE<?/MIVAR>
      <?MIVAR name=$UserInput>&pubId=$pubId&type=$type<?/MIVAR>
    <?MIELSE>
      <?MIVAR name=selector>MIval=aa-markerselect.apg&WINSIZE=$WINSIZE<?/MIVAR>
      <?MIVAR name=UserInput><?/MIVAR>
      <?MIVAR name=UserInput COND=$(XST,$input_name)>$UserInput&input_name=$(URLENCODE,$input_name)<?/MIVAR>
        <?MIVAR name=UserInput COND=$(XST,$input_acc)>$UserInput&input_acc=$input_acc<?/MIVAR>
	<?MIVAR name=UserInput COND=$(XST,$compare)>$UserInput&compare=$compare<?/MIVAR>
	<?MIVAR name=UserInput COND=$(XST,$marker_type)>$UserInput&marker_type=$marker_type<?/MIVAR>
        <?MIVAR name=UserInput COND=$(XST,$lg)>	$UserInput&lg=$lg<?/MIVAR>
        <?MIVAR name=$UserInput COND=$(XST,$return_rec)>$UserInput&return_rec=$return_rec<?/MIVAR>
        <?MIVAR name=UserInput COND=$(XST,$query_results)>$UserInput&query_results=$query_results<?/MIVAR>
	<?MIVAR name=$UserInput COND=$(XST,$knownmutant)>$UserInput&knownmutant=$knownmutant<?/MIVAR>


    <?/MIBLOCK>
       <?MIVAR>
       <p/>
	<div id="pagination"></div>
	<script type="text/javascript">
	    jQuery('#pagination').load('/action/pagination?maxDisplayRecords=$WINSIZE&actionUrl=$(URLENCODE,$selector)$(URLENCODE,$UserInput)&firstPageRecord=$BEGIN&totalRecords=$num_recs&page=$page');
	</script>
 	<?/MIVAR>
       <p/>

  <?/MIBLOCK> <?MICOMMENT> if not redirect to markerview <?/MICOMMENT>

  <?MICOMMENT>
    If you get to this point, then the code at least tried to insert records
    into markerselect_temp_marker.  Therefore always do the delete.
  <?/MICOMMENT>
  <?MISQL SQL="
    delete from $markerselect_temp_marker;">
  <?/MISQL>

  <?/MIBLOCK> <?MICOMMENT> no simultanious name and acc search <?/MICOMMENT>

  <?MISQL COND=$(XST,$debug_timing) SQL="
       execute function get_time()">
       <br>$1, Done display results
  <?/MISQL>

<?/MIBLOCK> <?MICOMMENT> query results <?/MICOMMENT>



<?MICOMMENT>--------------  Query Form ----------------------------<?/MICOMMENT>
<?MIBLOCK COND="$(AND,$(NXST,$accession),$(NXST,$pubId))">
  <?MISQL SQL="select mtgrpmem_mrkr_type 
                 from marker_type_group_member 
                where mtgrpmem_mrkr_type = '$marker_type' 
                  and mtgrpmem_mrkr_type_group = 'SEARCH_MKSEG';">
  <?/MISQL>
  <?MIVAR COND="$(=,$MI_ROWCOUNT,0)">$(SETVAR,$marker_type,all)<?/MIVAR>
  <?MISQL SQL="select WebExplode(object,'page=markerselect') from webPages where ID='aa-searchform.apg';">$1<?/MISQL>
<?/MIBLOCK>

<?MISQL COND=$(XST,$debug_timing) SQL="
        execute function get_time()">
<!--        <br>$1 Page End  -->
<?/MISQL>

<?MIBLOCK COND="$(NXST,$accession)">
  <?MISQL SQL="select WebExplode(object,'') from webPages where ID='aa-htmlpagefooter.apg';">$1<?/MISQL>
<?/MIBLOCK>

<?MIBLOCK COND="$(EC,$type_of_knockdown_reagent,t)">
<script>

//stripe the MO table
jQuery(document).ready(new function() {

 jQuery('#markerselect-results-table tr').each( function() {

   //get the value of the gene column
   var value = jQuery(this).children('td:first').text().trim();
   var lastValue = jQuery(this).prev().children('td:first').text().trim();

   //clear out the existing background color, set as a style
   //jQuery(this).css("background-color","");
   //jQuery(this).removeAttr("bgcolor");

   //jQuery(this).children('td:first').append(jQuery(this).index() + " " + lastValue);

   //new gene (or first row)
   if (lastValue != value || jQuery(this).index() == 1) {
       if (jQuery(this).prev().hasClass("odd"))
         jQuery(this).addClass("even")
       else
         jQuery(this).addClass("odd")

   //same gene
   } else {
       if (jQuery(this).prev().hasClass("odd"))
         jQuery(this).addClass("odd")
       else
         jQuery(this).addClass("even")

       //also hide the contents of the cell
       jQuery(this).find('td:first a').hide();
   }

 });
});


</script>
<?/MIBLOCK>

