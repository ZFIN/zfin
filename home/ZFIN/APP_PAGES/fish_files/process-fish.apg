<!-- This script handles the all actions that arise from processing a new fish entry. Specifically, two things can happen:
1) User can ask to specify some parameter like "discoverer" or "mother". This should bring up a browser/selector for that particular data type. After browsing, it should  lead back to the submission form so user can continue submitting.
2) User can hit the "final" submit button, indicating he is done specifying new entry. This should result in creating a new FISH record (and possible CHROMOSOOME and ALTERATION records) to hold the new mutant data.
-->


<!-- First thing to ALWAYS do is to store all available values in the temp_oid record in the TEMP_FISH table. This is how we maintain state.
-->
<?MISQL SQL="select WebExplode(object,'') from webPages where ID='aa-update-fish.apg';"><?/MISQL>

<!-- OK, NOW DECIDE WHICH SUBMIT BUTTON WAS PUSHED FROM NEW-FISH -->



<!-- FIRST, if they did a "final" submit, do a bunch of processing to create the correct permanent records from the TEMP-FISH info, and then 
report success -->

<?MIBLOCK COND=$(XST,$s_done)>

<?MIVAR COND="$(NXST,$line_type)" NAME=$line_type>mutant<?/MIVAR>
<?MIVAR COND="$(NXST,$flag)" NAME=$flag>NULL<?/MIVAR>

<!-- First deal with mutants; wild type submission comes later -->
<?MIBLOCK COND="$(EC,$line_type,mutant)">

<!-- First handle the "new  mutant by mutagenesis case". Will need to build a new FISH, CHROMOSOME, and ALTERATION record and fill with right data, then adjust all intersection tables appropriately. -->
<?MIBLOCK COND="$(=,$(POSITION,$flag,by_breeding),0)">

<!-- To create ID for new fish, just modify TEMP_OID, replacing 'TEMP' with 'FISH'. This saves call to get_id and is important because we have used the adapted temp_oid to label the Filemaker file created for phenotypes during form submission. -->
<?MISQL SQL="execute function get_id('CHROMO');"><?/MISQL>
<?MIVAR NAME=$chromo_id>$1<?/MIVAR>
<?MISQL SQL="execute function get_id('ALT');"><?/MISQL>
<?MIVAR NAME=$alt_id>$1<?/MIVAR>
<?MIVAR NAME=$fish_id>$(REPLACE,$temp_oid,TEMP,FISH)<?/MIVAR>

<?MISQL SQL="insert into fish (zdb_id, name, abbrev, line_type, source, mother, father, discoverer, lab, phenotype, orig_crossnum, segregation,submitter_id,owner,comments,status,entry_time, allele,locus) select '$fish_id', name, abbrev, line_type, source, mother, father, discoverer, lab, phenotype, orig_crossnum, segregation,'$submitter_id','$submitter_id',comments,status,current,allele,locus from temp_fish where zdb_id='$temp_oid';"><?/MISQL>

<?MISQL SQL="insert into chromosome (zdb_id, name, abbrev, chrom_num, lab) select '$chromo_id', name, abbrev, chrom_num, lab from temp_fish where zdb_id='$temp_oid';"><?/MISQL>
<!-- Build/Insert a printable name,ie,abbrev plus allele in superscript. -->
<?MISQL COND="$(AND,$(XST,$allele),$(XST,$abbrev))" SQL="update chromosome set print_name='$abbrev<sup>$allele</sup>' where zdb_id='$chromo_id';"><?/MISQL>

<?MIVAR COND="$(NXST,$chrom_num)" NAME=$chrom_num>NULL<?/MIVAR>
<?MISQL SQL="insert into int_fish_chromo (source_id, target_id, info,status) values ('$fish_id','$chromo_id','$chrom_num','original');"><?/MISQL>

<?MISQL SQL="insert into alteration (zdb_id, allele, mutagen, protocol, chrom_change, locus, genetic_loc, cyto_loc, breakpoints) select '$alt_id', allele, mutagen, protocol, chrom_change, locus, genetic_loc, cyto_loc, breakpoints from temp_fish where zdb_id='$temp_oid';"><?/MISQL>
<?MISQL SQL="update alteration set chrom_id='$chromo_id' where zdb_id='$alt_id';"><?/MISQL>

<!-- Associate all of temp_oid's pubs with new chromos and alts. The new fish is similarly dealt with below. -->
<?MISQL SQL="select  '$chromo_id' as a0, target_id, info from int_data_pub  where source_id='$temp_oid' into temp select_temp_1;"><?/MISQL>
<?MISQL SQL="insert into int_data_pub (source_id, target_id, info) select * from select_temp_1;"><?/MISQL>
<?MISQL SQL="select  '$alt_id' as a0, target_id, info from int_data_pub  where source_id='$temp_oid' into temp select_temp_2;"><?/MISQL>
<?MISQL SQL="insert into int_data_pub (source_id, target_id, info) select * from select_temp_2;"><?/MISQL>

<?/MIBLOCK>  <!-- ends the mutagenesis case -->



<!-- NOW HANDLE the case where mutant generated by cross-breeding mutant lines. Here, you just get the CHROMO records from the parents and attach them to the new FISH record. All the alterations in the parents are thus automatically brought along. 
Note that new Fish id just created by altering the temp_oid -->
<?MIBLOCK COND="$(>,$(POSITION,$flag,by_breeding),0)">

<?MIVAR NAME=$fish_id>$(REPLACE,$temp_oid,TEMP,FISH)<?/MIVAR>

<!-- Make the new FISH -->
<?MISQL SQL="insert into fish (zdb_id, name, abbrev, line_type, source, mother, father, discoverer, lab, phenotype, orig_crossnum, segregation,submitter_id,owner,comments, status) select '$fish_id', name, abbrev, line_type, source, mother, father, discoverer, lab, phenotype, orig_crossnum, segregation,'$submitter_id','$submitter_id',comments,status from temp_fish where zdb_id='$temp_oid';"><?/MISQL>

<?/MIBLOCK>  <!-- ends by_breeding -->



<!-- NOW do some maintainance applicable to both mutagenizing and by-breeding
     cases
-->

<!-- Insert a new record into fish_search for it -->
<?MISQL SQL="insert into fish_search (fish_id,name,line_type,abbrev,phenotype,chrom_num,chrom_change,comments,allele,mutagen,num_images) select '$fish_id',name,'mutant',abbrev,phenotype,chrom_num,chrom_change,comments,allele,mutagen,0 from temp_fish where zdb_id='$temp_oid';"><?/MISQL>

<!-- First, link all chromo recs inherited from parents to new FISH. -->
<?MISQL SQL="select mother,father from temp_fish where zdb_id='$temp_oid';">
<?/MISQL>
<?MIVAR NAME=$mother>$1<?/MIVAR>
<?MIVAR NAME=$father>$2<?/MIVAR>
<?MISQL SQL="select  distinct '$fish_id' as a0, target_id, info, 'inherited'  as a3 from int_fish_chromo  where (source_id='$mother' or source_id='$father') into temp select_temp_3;"><?/MISQL>
<?MISQL SQL="insert into int_fish_chromo (source_id, target_id, info,status) select * from select_temp_3;"><?/MISQL>

<!-- build an abbrev for the new fish by concatting the abbrevs from all
chromos its associated with -->
<?MIVAR NAME=$print_name><?/MIVAR>
<?MISQL SQL="select b.print_name from int_fish_chromo a,chromosome b where source_id='$fish_id' and b.zdb_id=target_id;">
$(SETVAR,$print_name,$1" "$print_name)
<?/MISQL>
<?MIVAR NAME=$print_name>$(REPLACE,$(TRIM,$print_name)," ",";")<?/MIVAR>
<?MISQL SQL="update fish set abbrev='$print_name' where zdb_id='$fish_id';"><?/MISQL>

<!-- Now make any pubs (primary or related) associated with the parents into related pubs for the new fish. -->
<?MISQL SQL="select  distinct '$fish_id' as a0, target_id, 'related'  as a2 from int_data_pub  where (source_id='$mother' or source_id='$father') into temp select_temp_4;"><?/MISQL>
<?MISQL SQL="insert into int_data_pub (source_id, target_id, info) select * from select_temp_4;"><?/MISQL>


<!-- NOW deal with the weird case where you have two mutant alleles that fall
on the same chromo --- in which case you now have TWO chromo records for same chromo (one describing each allele) associated with the new FISH. Essentially need to merge two chromos into a new one. We call outside function; see func. docs for details. -->

<?MISQL SQL="execute function sysexec('ChromoUpdate', '$fish_id');"><?/MISQL>
<?MIVAR NAME=$ChromoUpdate>$1<?/MIVAR>

<?/MIBLOCK>  <!-- ends if it's a mutant -->



<!-- If it was a wild_type, do a much more limited insert, where you just insewrt the  few relevant fields from the temp_fish record. 
Note that new Fish id just created by altering the temp_oid -->
<?MIBLOCK COND="$(NC,$line_type,mutant)">

<?MIVAR NAME=$fish_id>$(REPLACE,$temp_oid,TEMP,FISH)<?/MIVAR>

<!-- Make the new FISH -->
<?MISQL SQL="insert into fish (zdb_id, name, abbrev, line_type, source, discoverer, lab, phenotype,submitter_id,owner,comments, status,orig_crossnum) select '$fish_id', name, abbrev, line_type, source, discoverer, lab, phenotype, '$submitter_id','$submitter_id',comments,status,orig_crossnum from temp_fish where zdb_id='$temp_oid';"><?/MISQL>

<?/MIBLOCK>  <!-- ends if wild_type -->


<!-- Now a few things that apply to about any fish. Change all references to the temp_fish record to point to the new fish_id. -->

<?MISQL SQL="update int_data_pub set source_id='$fish_id' where source_id='$temp_oid';"><?/MISQL>
<?MISQL COND="$(EC,$line_type,mutant)" SQL="update image set stock='$fish_id' where stock='$temp_oid';"><?/MISQL>
<?MISQL COND="$(EC,$line_type,mutant)" SQL="update expression_pat set fish_id='$fish_id' where fish_id='$temp_oid';"><?/MISQL>
<?MISQL SQL="update int_fish_source set source_id='$fish_id' where source_id='$temp_oid';"><?/MISQL>


<!-- OKAY! Now we're done processing submission, and just need to continue on.
Grab the return record (might be NULL) so we can know where to go back to -->

<?MISQL SQL="select return_rec from temp_fish where zdb_id='$temp_oid';"><?/MISQL>
<?MIVAR NAME=$return_rec>$1<?/MIVAR>

<!-- NOW just report success, and allow user to continue -->
<HTML>
<h1 align=center>Notification</h1>
<center>
<big> Your submission was successful, the new record you submitted has been added to the database.</big>
</center>
<p>

<!-- NOW IF the new FISH was initiated from some other page,ie, has a non-NULL return_rec field, give the user the option of returning to that process now. Basically, we
just return the return record and the OID of the newly created record to do-select for processing. It's up to do-select to read the return_rec and do the right thing. -->

<?MIVAR COND=$(NC,$return_rec,NULL)>
<BIG><FONT COLOR="#ff0000">PLEASE RECALL</FONT></BIG> that you were in the middle of creating or modifying some other record when you took time out to enter this new FISH record.<br>
Click <A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-select.apg&return_rec=$return_rec&new_oid=$fish_id">here</A> to return to your work in progress!
<p>
<?/MIVAR>

<?MIVAR>
Click <A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-fishview.apg&OID=$fish_id">here</A> to view the new FISH record.
<?/MIVAR>
<p>
Click <A TARGET=content HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-ZDB_home.apg">here</A> to return to the ZDB home page.

</HTML>

<!-- FINALLY, delete the temp_fish record -->
<?MISQL SQL="delete from temp_fish where zdb_id='$temp_oid';"><?/MISQL>


<?/MIBLOCK> <!-- ends the cond s_done -->






<!-- OKAY, now handle the cases where user wants to specify some value -->
<?MIBLOCK COND="$(NXST,$s_done)">

<?MIVAR NAME=$file_name>/ZFIN/ZDBB/misc_html/error.html<?/MIVAR>


<!-- ALL the work of setting up the return_rec for transfer of control to a record selector or new record creator is handled by PROCESS-FISH-AUX.html -->
<?MISQL SQL="select WebExplode(object,'') from webPages where ID='aa-process-fish-aux.apg';">$1<?/MISQL>


<!-- IF you are taking time-out to CREATE A NEW RECORD, FIRE OFF THE appropriate form. -->
<?MIBLOCK COND="$(OR,$(XST,$s_image),$(XST,$s_expat))">
<?MISQL SQL="select WebExplode(object,'temp_oid=NULL&return_rec=$return_rec&$presets') from webPages where ID='$selector';">$1<?/MISQL>
<?/MIBLOCK>


<!-- ELSE IF YOU ARE SELECTING a record, fire off the appropriate browser frameset -->
<!-- LAUNCHES THE FRAMES FOR THE ANY SELECTION BROWSER.-->
<?MISQL COND="$(NOT,$(OR,$(XST,$s_image),$(XST,$s_expat)))" SQL="select WebExplode(object,'') from webPages where ID='aa-startframes_select.apg';">$1<?/MISQL>



<?/MIBLOCK> <!-- end "other variables" submission handler" -->



