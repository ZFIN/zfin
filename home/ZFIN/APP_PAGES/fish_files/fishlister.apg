<!-- FILE: fishlister.html -->

<!-- This app-page handles the criteria collected by fishselect.html, and actually does the search, displaying the results. What makes this page very tricky is the need to potentially query on both wild type and mutant lines, the data for which is quite different. In particular, wild types will have no CHROMOSOME or ALTERATION records associated with them, so any join to these tables will knock out wild types. The solution is to do two separate queries and UNION the results. Of course, this also mean building up two different constraints clauses.
-->

<!-- ECK 1/98. Instead of searching a huge intersection table, we now search a special "search_table" that has all of the criteria culled out. Should speed things up -->

<!-- Modified to support I.E.  Naviagtor tile buttons must know all user input from the query screen.  These values are posted to the lister form.  The lister form creates the tile bar button with appropriate variables. Startframes.apg will pass this variables on to the select form.  -->


<HTML>

<basefont size=2>

<?MISQL SQL="select object from webPages where ID='aa-chromoscripts.apg';">$1<?/MISQL>

<!-- THIS NEXT PART IS EXECUTED AFTER THE PERSON ENTERS SOME CRITERIA -->

<!-- First note that they have searched persons-->
<?MISQL SQL="select WebExplode(object,'') from webPages where ID='aa-identify.apg';">$1<?/MISQL>
<?MISQL SQL="delete from int_person_places where pers_id='$ZDB_ident' and place_id='FISH';"><?/MISQL>
<?MISQL COND="$(NOT,$(EQ,$(SUBSTR,$ZDB_name,1,5),GUEST))" SQL="insert into int_person_places (pers_id,place_id,last_visit) values ('$ZDB_ident','FISH',current);"><?/MISQL>

<!-- set userid to ZDB_ID of user or GUEST to be used by the map viewer -->
<?MIVAR NAME=$userid>GUEST<?/MIVAR>
<?MIBLOCK COND="$(NOT,$(EQ,$(SUBSTR,$ZDB_name,1,5),GUEST))">
  <?MIVAR NAME=$userid>$ZDB_ident<?/MIVAR>
<?/MIBLOCK>

<!-- This next part builds up a query piece by piece, based on which criteria 
  were passed in 
-->

<?MIVAR NAME=$knowngene COND="$(NXST,$knowngene)">NULL<?/MIVAR>
<?MIVAR NAME=$previous> <?/MIVAR>

<?MIVAR COND="$(NXST,$abbrev)" NAME=$nav_abbrev><?/MIVAR>
<?MIVAR COND="$(NXST,$chrom_change)" NAME=$chrom_change>any<?/MIVAR>
<?MIVAR COND="$(NXST,$chrom_num)" NAME=$chrom_num>0<?/MIVAR>
<?MIVAR COND="$(NXST,$mutagen)" NAME=$mutagen>any<?/MIVAR>
<?MIVAR COND="$(NXST,$anon1)" NAME=$anon1>phenotype<?/MIVAR>
<?MIVAR COND="$(NXST,$selected_separator)" NAME=$selected_separator>and<?/MIVAR>

<?MIVAR NAME=$target_table>fish_search a <?/MIVAR>


<!-- First build CONSTRAINT CLAUSE common to both wild type and mutant line, ie., those constraints related only to fish. -->

<?MIBLOCK COND="$(OR,$(XST,$fname),$(XST,$anon1text),$(XST,$abbrev),$(NC,$knowngene,NULL))">

<!--  save abbrev input to pass to startframes for anv tile button -->
<?MIVAR COND="$(XST,$abbrev)" NAME=$nav_abbrev>$abbrev<?/MIVAR>


<!-- First filter name for apostrophes! -->
<?MIVAR COND="$(XST,$fname)" NAME=$fname DELIMIT="'" REPLACE="''">$fname<?/MIVAR>
<?MIVAR COND="$(XST,$fname)" NAME=$fname>$(LOWER,$fname)<?/MIVAR>
<?MIVAR NAME=$constraint> and <?/MIVAR>

<!-- first look for match in fish_search locus or locus_alias lcsali_locus_name or fish_alias fishali_fish_name_alias -->
<?MIVAR NAME=$constraint COND="$(XST,$fname)">
$constraint ((lower(a.name) like '%$fname%') or exists (select 'x' from locus_alias where (a.locus = lcsali_locus_zdb_id) and (lower(lcsali_locus_name_alias) like '%$fname%')) or exists (select 'x' from fish_alias where (a.fish_id = fishali_fish_zdb_id) and (lower(fishali_fish_name_alias) like '%$fname%')))
<?/MIVAR>

<?MIVAR NAME=$previous COND="$(XST,$fname)"> and<?/MIVAR>

<!-- change to look for abbrev within () in name  Sept. 00  -->
<?MIVAR NAME=$constraint COND="$(XST,$abbrev)">
$constraint $previous (lower(abbrev)='$(LOWER,$abbrev)') or (name like '(%$(LOWER,$abbrev)%)') or (exists (select 'x' from locus_alias where lcsali_locus_abbrev_alias like '%$(LOWER,$abbrev)%' and  (a.locus = lcsali_locus_zdb_id)))<?/MIVAR>

<?MIVAR NAME=$previous COND="$(XST,$abbrev)"> and <?/MIVAR>

<?MIVAR NAME=$constraint COND="$(AND,$(XST,$anon1text),$(EC,$anon1,phenotype))">
$constraint $previous (webhtml_like($anon1,'$anon1text'))<?/MIVAR>

<?MIVAR NAME=$constraint COND="$(AND,$(XST,$anon1text),$(NC,$anon1,phenotype))">
$constraint $previous (lower($anon1) like '%$(LOWER,$anon1text)%')<?/MIVAR>

<?/MIBLOCK> <!-- ends shared mutant/wild-type block -->


<!-- NOW for mutant queries, BUILD the mutant constraint clause by extending the basic one to constrain on mutant attributes too -->

<?MIVAR COND="$(XST,$allele)" NAME=$allele>$(LOWER,$allele)<?/MIVAR>

<?MIBLOCK COND="$(AND,$(NXST,$mut_constraint),$(EC,$line_type,mutant),$(OR,$(XST,$constraint),$(NC,$chrom_change,any),$(>,$chrom_num,0),$(XST,$allele),$(NC,$mutagen,any),$(XST,$selected)))">

<?MIVAR COND="$(NXST,$constraint)" NAME=$constraint> and <?/MIVAR>
<?MIVAR NAME=$mut_constraint>$constraint<?/MIVAR>

<?MIVAR NAME=$previous COND="$(XST,$anon1text)"> and <?/MIVAR>

<?MIVAR NAME=$mut_constraint COND="$(NC,$mutagen,any)">
$mut_constraint $previous (mutagen='$mutagen')<?/MIVAR>

<?MIVAR NAME=$previous COND="$(NC,$mutagen,any)"> and <?/MIVAR>

<?MIVAR NAME=$mut_constraint COND="$(XST,$allele)">
$mut_constraint $previous ((lower(a.allele) like '$allele%') or exists (select 'x' from allele_alias where (a.alt_zdb_id = alleali_alt_zdb_id) and (lower(alleali_allele_name_alias) like '$allele%'))) 
<?/MIVAR>

<?MIVAR NAME=$previous COND="$(XST,$allele)"> and <?/MIVAR>

<!-- change to allow a query for deficiencies to look for deficiency, translocations, and complex_rearrangements  12/06/00-->
<?MIVAR NAME=$mut_constraint COND="$(EC,$chrom_change,deficiency)">
$mut_constraint $previous (chrom_change in ('deficiency','translocation','complex_rearrangement'))<?/MIVAR>

<?MIVAR NAME=$mut_constraint COND="$(AND,$(NC,$chrom_change,any),$(NC,$chrom_change,deficiency))">
$mut_constraint $previous (chrom_change='$chrom_change')<?/MIVAR>

<?MIVAR NAME=$previous COND="$(NC,$chrom_change,any)"> and <?/MIVAR>

<?MIVAR NAME=$mut_constraint COND="$(>,$chrom_num,0)">
$mut_constraint $previous (chrom_num='$chrom_num')<?/MIVAR>

<?MIVAR NAME=$previous COND="$(>,$chrom_num,0)"> and <?/MIVAR>

<?MIVAR NAME=$mut_constraint COND="$(NC,$knowngene,NULL)">$mut_constraint $previous (gene_abbrev <> 'UNKNOWN')<?/MIVAR>

<?MIVAR NAME=$previous COND="$(NC,$knowngene,NULL)"> and <?/MIVAR>

<?MIVAR NAME=$mut_constraint COND="$(XST,$selected)">
$mut_constraint $previous ($selected)<?/MIVAR>

<?/MIBLOCK> <!-- ends mutant case -->


<!-- NOW JUST RETRIEVE AND DISPLAY ALL MATCHING ENTRIES. Do slightly different things for mutant and wild type queries  -->

<?MIVAR NAME=$constraint COND="$(NXST,$constraint)"> <?/MIVAR>
<?MIVAR NAME=$mut_constraint COND="$(NXST,$mut_constraint)"> <?/MIVAR>

<!--  DEBUGGING
<?MIVAR><p>Constraint is:$constraint
Mut constraint is:$mut_constraint<p><?/MIVAR>
-->

<?MIBLOCK COND="$(EC,$line_type,mutant)">

<?MIVAR NAME=$order_by>order by locus,allele,name,chrom_num<?/MIVAR>
<?MIVAR NAME=$order_by COND="$(AND,$(OR,$(XST,$fname),$(XST,$abbrev)),$(NXST,$allele))">order by locus,name,allele,chrom_num<?/MIVAR>

<?MIVAR>
<form method=post action="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->">
<input type=hidden name=MIval value=aa-fishlister.apg>
<input type=hidden name=mut_constraint value="$mut_constraint">
<input type=hidden name=line_type value="$line_type">

<?/MIVAR>
<?MIVAR COND="$(XST,$fname)"><input type=hidden name=fname value="$fname"><?/MIVAR>
<?MIVAR COND="$(XST,$allele)"><input type=hidden name=allele value="$allele"><?/MIVAR>
<?MIVAR COND="$(NC,$knowngene,NULL)"> <input type=hidden name=knowngene value="$knowngene"><?/MIVAR>
<?MIVAR COND="$(XST,$chrom_change)"><input type=hidden name=chrom_change value="$chrom_change"><?/MIVAR>
<?MIVAR COND="$(XST,$chrom_num)"><input type=hidden name=chrom_num value="$chrom_num"><?/MIVAR>
<?MIVAR COND="$(XST,$mutagen)"><input type=hidden name=mutagen value="$mutagen"><?/MIVAR>
<?MIVAR COND="$(XST,$anon1)"><input type=hidden name=anon1 value="$anon1"><?/MIVAR>
<?MIVAR COND="$(XST,$anon1text)"><input type=hidden name=anon1text value="$anon1text"><?/MIVAR>
<?MIVAR COND="$(XST,$nav_abbrev)"><input type=hidden name=nav_abbrev value="$nav_abbrev"><?/MIVAR>
<?MIVAR COND="$(XST,$structures)"><input type=hidden name=structures value="$structures"><?/MIVAR>
<?MIVAR COND="$(XST,$selected_separator)"><input type=hidden name=selected_separator value="$selected_separator"><?/MIVAR>


<center>
<FONT SIZE=4>Search Mutant Lines: Result Summary</font><br>

<?MISQL SQL="select count(*)::integer from $target_table  where line_type='mutant' $mut_constraint;"> <b>$1</b> matching records found.
<?MIVAR name=$num_recs>$1<?/MIVAR><?/MISQL>

<br>
(Click on individual alleles for details)
</center> 
<p>

</form>

<TABLE width=100%

><TH> </TH><TH>Allele [previous names]</TH> <TH>Locus (abbrev) [previous names]</TH> <TH>Gene</TH> <TH>Mut. Type</TH> <TH>LG</TH> <TH>Location</TH> <TH> </TH>

<?MIVAR NAME=$MI_NULL><?/MIVAR>

<!--- WALKING WINDOW --->
<!--- Initialization --->

<?MIVAR NAME=WINSIZE DEFAULT=25>$WINSIZE<?/MIVAR>
<?MIVAR NAME=BEGIN DEFAULT=1>$START<?/MIVAR>


<!--- DEFINITION OF RANGES --->
<?MIVAR NAME=BEGIN>$(IF,$(<,$BEGIN,1),1,$BEGIN)<?/MIVAR> 
<?MIVAR NAME=END>$(+,$BEGIN,$WINSIZE)<?/MIVAR>


<!--- EXECUTION --->
<!--- Query Database --->
<?MISQL WINSTART=$BEGIN WINSIZE=$WINSIZE

<?MISQL SQL="select distinct name, fish_id, abbrev, allele, chrom_change, chrom_num,locus,gene_abbrev,gene_id from $target_table where line_type='mutant' $mut_constraint $order_by;" MAXROWS=$limit>
<?MIVAR NAME=$gene_id>$9<?/MIVAR>
<?MIVAR NAME=$gene_abbrev>$8<?/MIVAR>
<?MIVAR NAME=$name>$1<?/MIVAR>
<?MIVAR NAME=$q_mutagen>$4<?/MIVAR>
<?MIVAR NAME=$q_chrom_change>$5<?/MIVAR>
<?MIVAR NAME=$q_chrom_num>$6<?/MIVAR>
<?MIVAR NAME=$locus>$7<?/MIVAR>
<?MIVAR NAME=$q_allele>$4<?/MIVAR>
<?MIVAR NAME=$fish_id>$2<?/MIVAR>

$(IF,$(>,$MI_CURRENTROW,1),"<TR><TD colspan=7> <HR width=80%> </TD> </TR>")

$(IF,$(=,$MI_CURRENTROW,1),"<TR><TD colspan=7> <HR size=5> </TD> </TR>")


<?MIVAR NAME=$q_abbrev>$3<?/MIVAR>
<?MIBLOCK COND="$(EC,$q_abbrev,NULL)">
<?MIVAR NAME=$q_abbrev>None<?/MIVAR>
<?/MIBLOCK>

<?MIBLOCK COND="$(EC,$q_abbrev,xxx)">
<?MIVAR NAME=$q_abbrev>None<?/MIVAR>
<?/MIBLOCK>


<TR align=center valign=top> 
<TD>$MI_CURRENTROW. 
$(IF,$(XST,$return_rec),"<A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-select.apg&return_rec=$return_rec&new_oid=$fish_id" TARGET=content>SELECT</A>") 
</TD>
<TD valign=top> 
<A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-fishview.apg&OID=$fish_id" TARGET=content>$q_allele</A>

<!-- allele_name contains all names pull aliases only -->
<?MISQL SQL="select distinct alleali_allele_name_alias from allele_alias , fish_search where  fish_id = '$2' and alleali_alt_zdb_id = alt_zdb_id;">
  <?MIVAR COND="$(=,$MI_CURRENTROW,1)">&nbsp;[<?/MIVAR>
  <?MIVAR COND="$(>,$MI_CURRENTROW,1)">;<?/MIVAR>$1
<?/MISQL>

<?MIVAR COND="$(>=,$MI_CURRENTROW,1)">]<?/MIVAR>

</TD> 

<TD><font size=-1><A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-locusview.apg&OID=$locus" TARGET=content>$name</A> ($q_abbrev)
<?MIVAR NAME=$found>false<?/MIVAR>
<?MISQL SQL="select distinct lcsali_locus_name_alias, lcsali_locus_abbrev_alias from locus_alias where  lcsali_locus_zdb_id = '$9';">
<?MIVAR COND="$(=,$MI_CURRENTROW,1)">&nbsp;[<?/MIVAR>
<?MIVAR COND="$(=,$MI_CURRENTROW,1)" NAME=$found>true<?/MIVAR>
<?MIVAR COND="$(>,$MI_CURRENTROW,1)">;<?/MIVAR>$1
<?MIVAR COND="$(NC,$2,"")">($2)<?/MIVAR>
<?/MISQL>
<?MISQL SQL="select distinct fishali_fish_name_alias from fish_alias where fishali_fish_zdb_id = '$2';">
<?MIVAR COND="$(AND,$(=,$MI_CURRENTROW,1),$(NC,$found,true))">&nbsp;[<?/MIVAR>
<?MIVAR COND="$(AND,$(=,$MI_CURRENTROW,1),$(EC,$found,true))">;<?/MIVAR>
<?MIVAR COND="$(=,$MI_CURRENTROW,1)" NAME=$found>true<?/MIVAR>
<?MIVAR COND="$(>,$MI_CURRENTROW,1)">;<?/MIVAR>$1
<?/MISQL>
<?MIVAR COND="$(EC,$found,true)">]<?/MIVAR>

</font></TD>

<TD><font size=-1> $(IF,$(NC,$gene_id,UNKNOWN),<A HREF=/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-markerview.apg&OID=$gene_id TARGET=content>$gene_abbrev</A>,UNKNOWN)
</font></TD>

<TD><font size=-1> $(IF,$(EC,$q_chrom_change,NULL),UNKNOWN,$q_chrom_change)</font> </TD> 
<TD><font size=-1> $(IF,$(EC,$q_chrom_num,0),UNKNOWN,$q_chrom_num)</font> </TD> 

  <?MISQL SQL="select lg_location,metric from public_paneled_markers where zdb_id = '$fish_id';">

    <?MIVAR NAME=$lg_location>$1<?/MIVAR>
    <?MIVAR NAME=$metric>$2<?/MIVAR>

    <?MIBLOCK COND="$(>,$MI_CURRENTROW,1)">
	<TR><TD> </TD><TD> </TD><TD> </TD><TD> </TD><TD> </TD><TD> </TD>
    <?/MIBLOCK>

    <TD align=center>
      <font size=-1>
	$lg_location $metric
      </font>
    </TD></TR>

    <!-- create view map buttons -->
    <?MIVAR>
      <form method=post  name="$q_allele" target="content" action="/<!--|CGI_BIN_DIR_NAME|-->/view_mapplet.cgi">
        <input type=hidden name=view_map value="view_map">
        <input type=hidden name=userid value=$userid>
        <input type=hidden name=OID value=$fish_id>
        <input type=hidden name=MGH value=1>  <!-- we currently display "mapped" mutants on MGH panel -->
        <TR><TD> </TD><TD> </TD><TD> </TD>
        <TD align=left><font size=1><input type=button value='VIEW MERGED MAP' name=view_merge_map onClick="document.$q_allele.action='/<!--|CGI_BIN_DIR_NAME|-->/view_zmapplet.cgi';document.$q_allele.submit();"></TD><TD>&nbsp;</TD><TD align=left><font size=1><input type=submit value='VIEW INDIVIDUAL MAPS' name=view_map ></TD></TR>
      </form>
    <?/MIVAR>   
  <?/MISQL>

<?/MISQL>

</TABLE>

<?MIVAR COND="$(=,$MI_ROWCOUNT,0)">No matching records found<?/MIVAR>


  <!-- ends if no overflow -->
<?/MIBLOCK>  <!-- ends the mutant case -->



<?MIBLOCK COND="$(AND,$(NC,$line_type,mutant),$(NC,$line_type,accession))">
<center>
<FONT SIZE=4>Search Wild Type Lines: Result Summary</font><br>
(Click on individual stocks for more detail)
</center> 
<p>
<TABLE width=100%>
<TH> </TH><TH align=left>Strain</TH> <TH align=left>Lab</TH>

<!--- WALKING WINDOW --->
<!--- Initialization --->

<?MIVAR NAME=WINSIZE DEFAULT=25>$WINSIZE<?/MIVAR>
<?MIVAR NAME=BEGIN DEFAULT=1>$START<?/MIVAR>


<!--- DEFINITION OF RANGES --->
<?MIVAR NAME=BEGIN>$(IF,$(<,$BEGIN,1),1,$BEGIN)<?/MIVAR> 
<?MIVAR NAME=END>$(+,$BEGIN,$WINSIZE)<?/MIVAR>


<!-- <?MIVAR>where line_type='wild type' $constraint<?/MIVAR>  use for debugging -->


<!--- EXECUTION --->
<!--- Query Database --->
<?MISQL WINSTART=$BEGIN WINSIZE=$WINSIZE
	SQL="select a.name, a.zdb_id, a.abbrev, b.name,b.zdb_id from fish a, lab b where line_type='wild type' and a.lab=b.zdb_id $constraint order by a.name;">

<TR valign=top> <TD> 
$(IF,$(XST,$return_rec),"<FONT SIZE=-1> <A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-select.apg&return_rec=$return_rec&new_oid=$2" TARGET=content>SELECT</A> </FONT>") 
</TD>
<TD valign=top> <FONT SIZE=-1> <A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-fishview.apg&OID=$2" TARGET="content">$1</A> ($3) </FONT> </TD>  
<TD><A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-labview.apg&OID=$5" TARGET="content">$4</TD>
</TR>
<?/MISQL>
</TABLE>
<?MIVAR name=$num_recs>$MI_ROWCOUNT<?/MIVAR>
<?MIVAR COND="$(=,$MI_ROWCOUNT,0)">No matching records found<?/MIVAR>

<?/MIBLOCK>  <!-- ends the wild type case -->

<!--  search for zdb id for accession lister  -->
<?MIBLOCK COND="$(EC,$line_type,accession)">
<center>
<FONT SIZE=4>Search Fish Lines: Result Summary</font><br>
(Click on individual stocks for more detail)
</center> 
<p>
<TABLE width=100%>
<TH> </TH><TH align=left>Strain</TH> <TH align=left>Lab</TH>

<!--- WALKING WINDOW --->
<!--- Initialization --->

<?MIVAR NAME=WINSIZE DEFAULT=25>$WINSIZE<?/MIVAR>
<?MIVAR NAME=BEGIN DEFAULT=1>$START<?/MIVAR>


<!--- DEFINITION OF RANGES --->
<?MIVAR NAME=BEGIN>$(IF,$(<,$BEGIN,1),1,$BEGIN)<?/MIVAR> 
<?MIVAR NAME=END>$(+,$BEGIN,$WINSIZE)<?/MIVAR>


 <!-- <?MIVAR>where $constraint<?/MIVAR> use for debugging -->


<!--- EXECUTION --->
<!--- Query Database --->
<?MISQL WINSTART=$BEGIN WINSIZE=$WINSIZE
	SQL="select a.name, a.zdb_id, a.abbrev, b.name,b.zdb_id from fish a, lab b where  a.lab=b.zdb_id and a.zdb_id = '$OID' order by a.name;">

<TR valign=top> <TD> 
$(IF,$(XST,$return_rec),"<FONT SIZE=-1> <A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-do-select.apg&return_rec=$return_rec&new_oid=$2" TARGET=content>SELECT</A> </FONT>") 
</TD>
<TD valign=top> <FONT SIZE=-1> <A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-fishview.apg&OID=$2" TARGET="content">$1</A> ($3) </FONT> </TD>  
<TD><A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-labview.apg&OID=$5" TARGET="content">$4</TD>
</TR>
<?/MISQL>
</TABLE>
<?MIVAR COND="$(=,$MI_ROWCOUNT,0)">No matching records found<?/MIVAR>

<?/MIBLOCK>  <!-- ends the accession case -->

<BR>

<Center>
<Table width="70%" border="0">
	<tr>
		<td width="45%" align=right valign=top>&nbsp;

<?MIVAR name=comment>  Build array of user data  <?/MIVAR>
	<?MIVAR name=UserInput>MIval=aa-fishlister.apg&WINSIZE=$WINSIZE<?/MIVAR>
		<?MIVAR name=UserInput COND=$(XST,$allele)>
			$UserInput&allele=$allele
		<?/MIVAR>
		<?MIVAR name=UserInput COND=$(XST,$fname)>
			$UserInput&fname=$fname
		<?/MIVAR>
		<?MIVAR name=UserInput COND=$(XST,$abbrev)>
			$UserInput&abbrev=$abbrev
		<?/MIVAR>
		<?MIVAR name=UserInput COND=$(NC,$chrom_change,UNKNOWN)>
			$UserInput&chrom_change=$chrom_change
		<?/MIVAR>
		<?MIVAR name=UserInput COND=$(EC,$chrom_change,UNKNOWN)>
			$UserInput&chrom_change=any
		<?/MIVAR>
		<?MIVAR name=UserInput COND=$(NC,$mutagen,UNKNOWN)>
			$UserInput&mutagen=$mutagen
		<?/MIVAR>
		<?MIVAR name=UserInput COND=$(EC,$mutagen,UNKNOWN)>
			$UserInput&mutagen=any
		<?/MIVAR>
		<?MIVAR name=UserInput COND=$(XST,$line_type)>
			$UserInput&line_type=$line_type
		<?/MIVAR>
		<?MIVAR name=UserInput COND=$(XST,$chrom_num)>
			$UserInput&chrom_num=$chrom_num
		<?/MIVAR>
		<?MIVAR name=UserInput COND=$(XST,$knowgene)>
			$UserInput&knowngene=$knowngene
		<?/MIVAR>
		<?MIVAR name=UserInput COND=$(XST,$anon1)>
			$UserInput&anon1=$anon1
		<?/MIVAR>
		<?MIVAR name=UserInput COND=$(XST,$anon1text)>
			$UserInput&anon1text=$anon1text
		<?/MIVAR>
	<?MIVAR name=UserInput COND=$(XST,$structures)>
			$UserInput&structures=$structures
		<?/MIVAR>
	<?MIVAR name=UserInput COND=$(XST,$selected_separator)>
			$UserInput&selected_separator=$selected_separator
		<?/MIVAR>

<!--- Return to the previous set of Rows --->
<?MIBLOCK COND="$(>,$BEGIN,1)">
	
<?MIVAR>
	<A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?START=$(-,$BEGIN,$WINSIZE)&BEGIN=$BEGIN&$UserInput">Prev</A>&nbsp;&nbsp;&nbsp;&nbsp;<br>

<!-- If current not First Page, create link to first page. -->
	<A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?START=1&BEGIN=1&$UserInput">First Page</A>
<?/MIVAR>

<?/MIBLOCK>

		</td>


<!-- Calculate 3 pages before and 3 pages after current page. -->
<?MIVAR name=$CURRENT>$(FIX,$(+,$(/,$BEGIN,$WINSIZE),1))<?/MIVAR>

<?MIBLOCK COND="$(>=,$(-,$BEGIN,$(*,$WINSIZE,3)),0)">
<td valign=top>
  <?MIVAR><A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?$UserInput&START=$(-,$BEGIN,$(*,$WINSIZE,3))"> $(-,$CURRENT,3)</A> <?/MIVAR>
		</td>
<?/MIBLOCK>

<?MIBLOCK COND="$(>=,$(-,$BEGIN,$(*,$WINSIZE,2)),0)">
<td valign=top>
  <?MIVAR><A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?$UserInput&START=$(-,$BEGIN,$(*,$WINSIZE,2))"> $(-,$CURRENT,2)</A><?/MIVAR>
		</td>
<?/MIBLOCK>

<?MIBLOCK COND="$(>=,$(-,$BEGIN,$(*,$WINSIZE,1)),0)">
<td valign=top>
  <?MIVAR><A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?$UserInput&START=$(-,$BEGIN,$(*,$WINSIZE,1))"> $(-,$CURRENT,1)</A><?/MIVAR>
		</td>
<?/MIBLOCK>

<?MIBLOCK COND="$(>,$num_recs,$WINSIZE)">
<td align=center valign=top>
	<?MIVAR>  $CURRENT  <?/MIVAR>
</td>
<?/MIBLOCK>


<?MIVAR COND=$(<=,$(+,$BEGIN,$(*,$WINSIZE,1)),$num_recs)>
<td valign=top>
<A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?$UserInput&START=$END"> $(+,$CURRENT,1)</A>
		</td>
<?/MIVAR>

<?MIVAR COND=$(<=,$(+,$BEGIN,$(*,$WINSIZE,2)),$num_recs)>
<td valign=top>
<A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?$UserInput&START=$(+,$BEGIN,$(*,$WINSIZE,2))"> $(+,$CURRENT,2)</A>
		</td>
<?/MIVAR>

<?MIVAR COND=$(<=,$(+,$BEGIN,$(*,$WINSIZE,3)),$num_recs)>
<td valign=top>
<A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?$UserInput&START=$(+,$BEGIN,$(*,$WINSIZE,3))"> $(+,$CURRENT,3)</A>
		</td>
<?/MIVAR>

		<td width="45%" align=left valign=top>&nbsp;

<!--- Get the next set of Rows --->
<?MIBLOCK COND="$(<=,$(+,$BEGIN,$WINSIZE),$num_recs)">
<?MIVAR>
	<A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?START=$END&BEGIN=$BEGIN&$UserInput">Next</A><br>
<?/MIVAR>


<!-- Calculate last page -->
<?MIVAR name=$START COND="$(=,$(MOD,$num_recs,$WINSIZE),0)">
	$(+,$(*,$(-,$(/,$num_recs,$WINSIZE),1),$WINSIZE),1)
<?/MIVAR>

<?MIVAR name=$START COND="$(!=,$(MOD,$num_recs,$WINSIZE),0)">
	$(+,$(*,$(FIX,$(/,$num_recs,$WINSIZE)),$WINSIZE),1)
<?/MIVAR>

<?MIVAR>
	<A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?START=$START&$UserInput">Last Page</A>
<?/MIVAR>
<?/MIBLOCK>

			&nbsp;

		</td>
	</tr>
</Table>
</Center>


<!-- Cause a tile for the new page to appear in the navigator frame -->
<!-- startframes.apg will pass variables on to appropriate page -->
<!-- don't want a tile if got here via the accessionlister  -->
<?MIBLOCK COND="$(AND,$(NXST,$accession),$(NC,$line_type,wild_type))">
	<?MIVAR NAME=page_title>Find MUTANT<?/MIVAR>
	<?MIVAR NAME=navtile>true<?/MIVAR>
	<?MIVAR COND="$(NXST,$fname)" NAME=$fname><?/MIVAR>
	<?MIVAR COND="$(NXST,$allele)" NAME=$allele><?/MIVAR>
	<?MIVAR COND="$(NXST,$nav_abbrev)" NAME=$nav_abbrev><?/MIVAR>
	<?MIVAR COND="$(NXST,$anon1text)" NAME=$anon1text><?/MIVAR>
	<?MIVAR COND="$(NXST,$knowngene)" NAME=$knowngene><?/MIVAR>
	<?MIVAR COND="$(NXST,$BEGIN)" NAME=$BEGIN><?/MIVAR>
	<?MIVAR COND="$(NXST,$WINSIZE)" NAME=$WINSIZE><?/MIVAR>

  <SCRIPT>
    <?MIBLOCK COND="$(XST,$structures)">
      <?MIVAR>
        var page_id=top.content.location.href+'&structures=$structures&navtile=$navtile&fname=$fname&chrom_change=$chrom_change&chrom_num=$chrom_num&mutagen=$mutagen&anon1=$anon1&anon1text=$anon1text&allele=$allele&abbrev=$nav_abbrev&line_type=$line_type&knowngene=$knowngene&selected_separator=$selected_separator&WINSIZE=$WINSIZE&BEGIN=$BEGIN';
      <?/MIVAR>
    <?/MIBLOCK>

    <?MIBLOCK COND="$(NXST,$structures)">
      <?MIVAR>
        var page_id=top.content.location.href+'&navtile=$navtile&fname=$fname&chrom_change=$chrom_change&chrom_num=$chrom_num&mutagen=$mutagen&anon1=$anon1&anon1text=$anon1text&allele=$allele&abbrev=$nav_abbrev&line_type=$line_type&knowngene=$knowngene&WINSIZE=$WINSIZE&BEGIN=$BEGIN';
      <?/MIVAR>
    <?/MIBLOCK>

    <?MIVAR>
      top.update_hist(page_id,"$page_title");
      top.controls.location.reload(true);
    <?/MIVAR>

  </SCRIPT>
<?/MIBLOCK>

</HTML>
