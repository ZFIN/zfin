<?MICOMMENT>

FILE:     xpatcurstructure.apg
PREFIX:   xpcurstr_

Display a list of anatomy (expressed and not expressed) and provide a mean of
updating the expression results for figures of this publication.

The display is a table of anatomy items; one item per line. 

The update is controlled by a series of radio buttons and a select box. The 
select box contains a distinct set of expression pattern figures (EPF). Each
anatomy item has two radio buttons: Add / Remove. When the form is submitted, 
each anatomy item checked 'Add' is attached to the EPF and each anatomy item 
checked 'Remove' is removed. 

It's important the anatomy are not removed accidentally. Javascript stores which
anatomy are attached to each EPF at the time the page loads. When an EPF is
selected, the radio buttons are updated. All attached anatomy are set to add. Non
attached anatomy are set to remove.

INPUT VARS:

  REQUIRED:
    OID :: publication zdb-id for the experiment
    AUTHORIZED :: this is a subroutine. the authorization must occur in the calling page.
    xpcur_G_fig_attrib_csv :: csv list of figures for the OID
    xpcur_c_anatitem_add_csv :: csv list anatomy_item zdb ids last selected for expression_result
    xpcur_G_structure_add :: csv list anatomy_item zdb ids recently added to the structure heap
    
  OPTIONAL:  
    none
      
OUTPUT VARS:

OUTPUT:
  A table of structures related to the publication OID.

EFFECTS  
      fig_xpat_stg :: non-null, text, combines values (figure zdb, xpat zdb, sstage zdb, estage zdb)
      "xpatres_zdb_id" radio (add/remove)
      xpcur_G_structure_add :: flag for new record
      xpcur_G_structure_add_id :: anatomy zdb
      xpcur_G_structure_add_expressed :: boolean (t/f)
      xpcur_G_structure_add_xpatex :: xpat zdb
      xpcur_G_structure_add_start_stg :: stg zdb
      xpcur_G_structure_add_end_stg :: stg zdb

<?/MICOMMENT>

<?MIERROR>
  <?MIVAR COND=$(XST,$MI_SQL)>
    SQL: $MI_SQL<br><br>
  <?/MIVAR>

  Code:    $MI_ERRORCODE <br>
  State:   $MI_ERRORSTATE <br>
  Message: $MI_ERRORMSG <br>
<?/MIERROR>

<?MIBLOCK COND="$(EC,$AUTHORIZED,root)">

  <script type="text/javascript" language="javascript">

    function updateInnerHTML(element_id,html_to_display) {
        var c1 = document.getElementById(element_id);
        c1.innerHTML = html_to_display;
    }

    <?MIVAR NAME=xpcurstrOB>[<?/MIVAR>
    <?MIVAR NAME=xpcurstrCB>]<?/MIVAR>
    
    var xpatinfArray = new Array();
    var array1 = new Array();
    var stage_hours_start = 0.0;
    <?MISQL SQL="
      select max(stg_hours_end)
      from stage;">
              
      var stage_hours_end = $1 ;
    <?/MISQL>    
    
    <?MISQL SQL="
        select xpatinf_zdb_id, s1.stg_hours_start, s2.stg_hours_end, 
           case anatitem_name
             when 'unspecified' then '<font color=orange>unspecified</font>'
             else anatitem_name
           end
        from expression_pattern_infrastructure, anatomy_item, stage s1, stage s2
        where xpatinf_pub_zdb_id = '$OID'
          and xpatinf_anatitem_zdb_id = anatitem_zdb_id
          and anatitem_start_stg_zdb_id = s1.stg_zdb_id
          and anatitem_end_stg_zdb_id = s2.stg_zdb_id;">
        <?MIVAR NAME=xpcurstr_xpatinf_zdb_minus>$(REPLACE,$1,"-","")<?/MIVAR>        
          
        var xpinf$xpcurstr_xpatinf_zdb_minus = new Array();
        xpinf$xpcurstr_xpatinf_zdb_minus$xpcurstrOB$(+,0,0)$xpcurstrCB = 'str$xpcurstr_xpatinf_zdb_minus';
        xpinf$xpcurstr_xpatinf_zdb_minus$xpcurstrOB$(+,0,1)$xpcurstrCB = $2 ;
        xpinf$xpcurstr_xpatinf_zdb_minus$xpcurstrOB$(+,0,2)$xpcurstrCB = $3 ;
        xpinf$xpcurstr_xpatinf_zdb_minus$xpcurstrOB$(+,0,3)$xpcurstrCB = '$(REPLACE,$4,"'","\'")';
        xpinf$xpcurstr_xpatinf_zdb_minus$xpcurstrOB$(+,0,4)$xpcurstrCB = '$1';
        
        xpatinfArray$xpcurstrOB$(-,$MI_CURRENTROW,1)$xpcurstrCB = xpinf$xpcurstr_xpatinf_zdb_minus ;
    <?/MISQL>

    var xpressArray = new Array();
    var array2 = new Array();
    
    <?MIVAR NAME=xpcurstr_xpress_index>0<?/MIVAR>  
    <?MISQL SQL="
          SELECT distinct xpatfig_fig_zdb_id, xpatex_zdb_id, xpatres_start_stg_zdb_id, xpatres_end_stg_zdb_id
            FROM expression_experiment, expression_pattern_figure, expression_result
           WHERE xpatres_zdb_id = xpatfig_xpatres_zdb_id
             AND xpatex_source_zdb_id = '$OID'
             AND xpatex_zdb_id = xpatres_xpatex_zdb_id
             $(IF,$(XST,$xpcur_c_gene_only),and xpatex_gene_zdb_id = '$xpcur_c_gene_only')
             ;">

          <?MIVAR NAME=xpcurstr_fig_zdb_id>$1<?/MIVAR>
          <?MIVAR NAME=xpcurstr_xpatex_zdb_id>$2<?/MIVAR>
          <?MIVAR NAME=xpcurstr_sstage_zdb_id>$3<?/MIVAR>
          <?MIVAR NAME=xpcurstr_estage_zdb_id>$4<?/MIVAR>   
           
          <?MIVAR NAME=xpcurstr_xpress_name>xpress$xpcurstr_xpress_index<?/MIVAR>
          <?MIVAR NAME=xpcurstr_anat_count>0<?/MIVAR>
          
        var $xpcurstr_xpress_name = new Array();
        $xpcurstr_xpress_name$xpcurstrOB$(+,0,0)$xpcurstrCB = '$1$2$3$4';
        
          <?MISQL SQL="
            SELECT distinct xpatinf_zdb_id, anatitem_name
              FROM expression_pattern_infrastructure, anatomy_item,
                   expression_result, expression_pattern_figure
             WHERE xpatinf_anatitem_zdb_id = xpatres_anat_item_zdb_id
               AND xpatinf_anatitem_zdb_id = anatitem_zdb_id
               AND xpatinf_expressed = xpatres_expression_found
               AND xpatinf_pub_zdb_id = '$OID'
               AND xpatres_zdb_id = xpatfig_xpatres_zdb_id
               AND xpatfig_fig_zdb_id = '$xpcurstr_fig_zdb_id'
               AND xpatres_xpatex_zdb_id = '$xpcurstr_xpatex_zdb_id'
               AND xpatres_start_stg_zdb_id = '$xpcurstr_sstage_zdb_id'
               AND xpatres_end_stg_zdb_id = '$xpcurstr_estage_zdb_id'
             ORDER BY anatitem_name;"> 
        
            <?MIVAR NAME=xpcurstr_anat_count>$(+,$xpcurstr_anat_count,1)<?/MIVAR>
            $xpcurstr_xpress_name$xpcurstrOB$xpcurstr_anat_count$xpcurstrCB = '$1'
            
          <?/MISQL>
        xpressArray$xpcurstrOB$xpcurstr_xpress_index$xpcurstrCB = $xpcurstr_xpress_name ;
        
        
        <?MIVAR NAME=xpcurstr_xpress_index>$(+,$xpcurstr_xpress_index,1)<?/MIVAR> 
    <?/MISQL>

    function openChild(childWinUrl,childWinName) {
      window.name = "expressionCuration";  //name parent window
      if (!self.childWindow) {     
        childWindow=open(childWinUrl,childWinName, 'resizable=yes,width=800,height=400,scrollbars=1');
        childWindow.focus();
      }
      else {
        childWindow.focus();
        childWindow=open(childWinUrl,childWinName, 'resizable=yes,width=800,height=400,scrollbars=1');
      }
      if (childWindow.opener == null) childWindow.opener = self;
      
    }

    //structures are a dynamic set
    function dynamic_set_value_selection(dynamic_field) {
      var structures_add = '';
      var structures_remove = '';
      //alert("(offset,span) = ("+offset+","+span+")");
      for (i=0; i<dynamic_field.length; i++) {
        if (dynamic_field[i].checked) {
          if (dynamic_field[i].value == "add") {
            if (structures_add == "") { structures_add = dynamic_field[i].name; }
            else { structures_add = structures_add+"|"+dynamic_field[i].name; }
          }
          else {
            if (dynamic_field[i].value == "remove") {
              if (structures_remove == "") { structures_remove = dynamic_field[i].name; }
              else { structures_remove = structures_remove+"|"+dynamic_field[i].name; }
            }
          }
        }
      }
      
      if (structures_add != '' || structures_remove != '') {
        fig_xpat_stg = document.panel_structures.xpcurstr_fig_xpat_stg.value;
        
        window.document.hidden_panel.xpcur_G_structures_add.value = structures_add;
        window.document.hidden_panel.xpcur_G_structures_remove.value = structures_remove;
        window.document.hidden_panel.xpcur_G_fig_xpat_stg.value = fig_xpat_stg;
        setCookie('xpatcuration_update','update');
        setCookie('anchor','structure');

        window.document.hidden_panel.submit();

      }
      else {
        alert('Please select a structure by clicking a radio button.')
      }
    
    }

    function trim (strToTrim) {
       return(strToTrim.replace(/^\s+|\s+$/g, ''));
    }  // end trim function


    function URLDecode(str) {
       return unescape(str.replace(/\+/g, " "));
    }



    //reset checked structures when experiment is selected.
    
    function reset_structures_for_panel(fig_xpat_stg_selected_array, num_expression) 
    {
                  
      var xpinfDisplay;
      for(z=0; z<xpatinfArray.length; z++)
      {
        array1 = xpatinfArray[z];

        document.forms['panel_structures'].elements[array1[4]][0].click();                
      }              
            
                      
          var xpressStructure = new Array();
          var exp_checked = new Array();
          var str_checked = new Array();
          var str_checked_index = 0;
                    
      for(i=0; i<fig_xpat_stg_selected_array.length; i++)
      {
          exp_checked = fig_xpat_stg_selected_array[i];       

          for (j=0; j<xpressArray.length; j++)
          {
            xpressStructure = xpressArray[j];
            
            if (exp_checked[6]+exp_checked[7]+exp_checked[8]+exp_checked[9] == xpressStructure[0])
            {
                if (stage_hours_start < exp_checked[10])
                {
                  stage_hours_start = exp_checked[10];
                }
                if (stage_hours_end > exp_checked[11])
                {
                  stage_hours_end = exp_checked[11];
                }
                
                for (k=1; k<xpressStructure.length; k++)
                {
                  str_checked[str_checked_index] = xpressStructure[k];
                  str_checked_index++;
                  
                } //for each expressed structure
            
            } //if checked == structure
            
          } //for structures
      } //for checked
      
                  
      for(y=0; y<xpatinfArray.length; y++)
      {
        array1 = xpatinfArray[y];
        xpinfDisplay = array1[3];
        var item_start_hour = eval(array1[1]);
        var item_end_hour = eval(array1[2]);
        
        if (num_expression != 0)
        {
              if ( stage_hours_start < stage_hours_end )
              {                
                if (item_start_hour <= stage_hours_start && item_end_hour > stage_hours_start)
                {
                  xpinfDisplay = '<b>'+array1[3]+'</b>';                
                }
              
                else
                { 
                  if (item_start_hour < stage_hours_end && item_end_hour >= stage_hours_end)
                  {
                    xpinfDisplay = '<b>'+array1[3]+'</b>';
                  }
              
                  else
                  {
                    if (item_start_hour < stage_hours_end && item_end_hour > stage_hours_start)
                    {
                      xpinfDisplay = '<b>'+array1[3]+'</b>';
                    }
                  }
                }
              }
              else
              {
                if (item_start_hour < stage_hours_end && item_end_hour > stage_hours_start)
                {
                  xpinfDisplay = '<b>'+array1[3]+'</b>';
                }
              
              }
        }      
        updateInnerHTML(array1[0],xpinfDisplay);  
      }  
      

      if ( num_expression != 0 )
      {
          for(m=0; m<xpatinfArray.length; m++)
          {
            array1 = xpatinfArray[m];
            var count = 0;
        
            for(n=0; n<str_checked.length; n++)
            {
              if (array1[4] == str_checked[n])
              {
                count++;
              }        
            }
          
            if (count == num_expression)
            {
              document.forms['panel_structures'].elements[array1[4]][2].click();
            } 
          }
      }

    } //function    

        
    function openAO () 
    {
      
        var stage = document.structure2.stage_id.value;
        openChild('/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-anatdict.apg&mode=search&type=select&OID='+stage,'AO');
      
    }
    
    function increment_radio_button(radio)    
    {
      var max = radio.length -1 ;    
      var selectIndex = max;
      
      for (i=1; i<=max; i++)
      {
        if(radio[i].checked == true)
        {
          selectIndex = i-1;
        }
      }

      radio[selectIndex].click();
      
    }
  </script>

<script src="http://<!--|DOMAIN_NAME|-->/autosuggest.js"></script>

<?MIVAR NAME=anatdict_anatList><?/MIVAR>

<?MISQL SQL="
	select anatitem_name, anatitem_name_lower as name_lower_column 
	  from anatomy_item 
        order by name_lower_column;">
   <?MIVAR NAME=xpcurstr_curAnat>"$1"<?/MIVAR>
   <?MIVAR>$(SETVAR,$xpcurstr_anatList,$(IF,$(NC,$MI_CURRENTROW,1),$xpcurstr_anatList",")$xpcurstr_curAnat)<?/MIVAR>
<?/MISQL>
    
<form name=hidden_panel action="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-xpatcuration.apg&OID=<?MIVAR>$OID<?/MIVAR><?MISQL SQL="execute function get_time();">&rand=$1<?/MISQL>#structure" method=post>
  <input type=hidden name=xpcur_G_structures_add value="">
  <input type=hidden name=xpcur_G_structures_remove value="">   
  <input type=hidden name=xpcur_G_fig_xpat_stg value=""> 
  <input type=hidden name=xpcur_G_exp_count value=""> 
  <input type=hidden name=MIval value="aa-xpatcuration.apg">
  <input type=hidden name=OID value="<?MIVAR>$OID<?/MIVAR>">
</form>

<?MIVAR NAME=xpcurstr_row_color><!--|HIGHLIGHT_COLOR|--><?/MIVAR>

<table width=100% border=0 cellspacing=0 cellpadding=3>
<form name=panel_structures>
  <tr>
    <td colspan=5>
    <input type=hidden name=xpcurstr_fig_xpat_stg value="">
<input type=button value="Update Structures for Expression(s)" onClick="if (document.panel_structures.xpcurstr_fig_xpat_stg.value != ''){dynamic_set_value_selection(document.panel_structures.elements);}">
<br><textarea name=xpcurstr_expression cols=110 rows=3 nowrap></textarea>

    </td>
  </tr>
  <tr bgcolor=#CCCCCC>

    <td align=center><b>&Phi;</b></td>
    <td align=center><b><font color=red>&otimes;</font></b></td>
    <td align=center><b><font color=green>+</font></b></td>
    <td>Modifier</td>
    <td width=80%>Structure</td>

  </tr>  
  
<?MIVAR NAME=xpcurstr_previous_anatitem><?/MIVAR>  
<?MIVAR NAME=xpcurstr_field_count>0<?/MIVAR>  
<?MIVAR COND=$(NXST,$xpcur_c_anatitem_add_csv) NAME=xpcur_c_anatitem_add_csv><?/MIVAR>
<?MISQL SQL="
    select xpatinf_zdb_id
    from expression_pattern_infrastructure, anatomy_item
    where xpatinf_pub_zdb_id = '$OID'
      and xpatinf_anatitem_zdb_id = anatitem_zdb_id
      and anatitem_name = 'unspecified';">
    <?MIVAR NAME=xpcurstr_unspecied_id>$1<?/MIVAR>
<?/MISQL>

<?MIVAR NAME=xpcur_c_anatitem_add_csv DELIMIT="'" REPLACE="">$xpcur_c_anatitem_add_csv<?/MIVAR>  
<?MISQL SQL="
    select anatitem_zdb_id, 
           case anatitem_name
             when 'unspecified' then '<font color=orange>unspecified</font>'
             else anatitem_name
           end,
           xpatinf_expressed, anatitem_name_order, xpatinf_zdb_id, 
           s1.stg_abbrev, s2.stg_abbrev 
    from expression_pattern_infrastructure, anatomy_item, stage s1, stage s2
    where xpatinf_anatitem_zdb_id = anatitem_zdb_id
      and xpatinf_pub_zdb_id = '$OID'
      and anatitem_start_stg_zdb_id = s1.stg_zdb_id
      and anatitem_end_stg_zdb_id = s2.stg_zdb_id
    order by anatitem_name_order, xpatinf_expressed;">

    <?MIVAR NAME=$xpcurstr_anatitem_zdb_id>$1<?/MIVAR>
    <?MIVAR NAME=$xpcurstr_anatitem_name>$2<?/MIVAR>
    <?MIVAR NAME=$xpcurstr_expression_found>$3<?/MIVAR>
    <?MIVAR NAME=$xpcurstr_xpatinf_zdb_id>$5<?/MIVAR>
    <?MIVAR NAME=xpcurstr_xpatinf_zdb_minus>$(REPLACE,$5,"-","")<?/MIVAR>
    <?MIVAR NAME=$xpcurstr_start_stg_name>$6<?/MIVAR>
    <?MIVAR NAME=$xpcurstr_end_stg_name>$7<?/MIVAR>
    <?MIVAR>

    <tr bgcolor="$xpcurstr_row_color" 
        onmouseover="this.style.background='$xpcur_G_active_row_color';" 
        onmouseout="this.style.background='$xpcurstr_row_color';"
        >
      <td align=center>
        <input type=radio 
                 name="$xpcurstr_xpatinf_zdb_id" 
                 value="ignore" 
                 $(IF,$(=,0,$(POSITION,$xpcur_c_anatitem_add_csv,$xpcurstr_anatitem_zdb_id$xpcurstr_expression_found,1)),CHECKED)>
      </td>
      <td align=center>
         <input type=radio 
                 name="$xpcurstr_xpatinf_zdb_id" 
                 value="remove">
      </td>
      <td align=center>
         <input type=radio 
               name="$xpcurstr_xpatinf_zdb_id" 
               value="add" 
               <?MIVAR COND="$(AND,$(XST,$xpcurstr_unspecied_id),$(NC,$xpcurstr_xpatinf_zdb_id,$xpcurstr_unspecied_id))">onClick="document.forms['panel_structures'].elements['$xpcurstr_unspecied_id'][1].click();"<?/MIVAR>
               $(IF,$(!=,0,$(POSITION,$xpcur_c_anatitem_add_csv,$xpcurstr_anatitem_zdb_id$xpcurstr_expression_found,1)),CHECKED)>
      </td>
      
      <td align=center onClick="increment_radio_button(document.forms['panel_structures'].elements['$xpcurstr_xpatinf_zdb_id']);"> $(IF,$(EC,$xpcurstr_expression_found,t),,<font color=red>not</font>) </td>
      
      <td onClick="increment_radio_button(document.forms['panel_structures'].elements['$xpcurstr_xpatinf_zdb_id']);">
        <?MIBLOCK COND="$(AND,$(XST,$xpcur_G_structure_add),$(!=,0,$(POSITION,$xpcur_G_structure_add,$xpcurstr_anatitem_zdb_id)))">
          <?MIVAR><span id="str$xpcurstr_xpatinf_zdb_minus"><b>$xpcurstr_anatitem_name</b></span> ($xpcurstr_start_stg_name - $xpcurstr_end_stg_name) <?/MIVAR>
        <?MIELSE>
          <?MIVAR><span id="str$xpcurstr_xpatinf_zdb_minus">$xpcurstr_anatitem_name</span> ($xpcurstr_start_stg_name - $xpcurstr_end_stg_name) <?/MIVAR>
        <?/MIBLOCK>
      </td>
    </tr>
    <?/MIVAR>
    <?MIVAR NAME=xpcurstr_row_color>$(IF,$(EC,$xpcurstr_row_color,#FFFFFF),<!--|HIGHLIGHT_COLOR|-->,#FFFFFF)<?/MIVAR>
  <?/MISQL>    

  <tr>
    <td colspan=5>
      <input type=button value="Update Structures for Expression(s)" onClick="if (document.panel_structures.xpcurstr_fig_xpat_stg.value != ''){dynamic_set_value_selection(document.panel_structures.elements);}">
    </td>
  </tr>

</form>


  <tr>
    <td colspan=5><HR></td>
  </tr>
<?MICOMMENT> ==| Enter a New Structure |== <?/MICOMMENT>
<form action="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->#structure" method=post name=structure2 onSubmit="setCookie('xpatcuration_update','update');setCookie('anchor','structure');">
    <INPUT TYPE=HIDDEN NAME=MIval VALUE="aa-xpatcuration.apg">
    <INPUT TYPE=HIDDEN NAME=OID VALUE="<?MIVAR>$OID<?/MIVAR>"> 
  <tr>
    <td colspan=2 valign=top>
      <input name="xpcur_G_structure_add_button" type=submit value="Add">
    </td>
    <td colspan=3 align=left>
        <input type=textbox name="xpcur_G_structure_add_name" size=80>
        <input type=hidden name="xpcur_G_structure_add">   
        <br>
        
	<input name="structure_expressed" value=t type=radio CHECKED> Detected 
        <input name="structure_expressed" value=f type=radio> <font color=red>not</font>
    </td>
  </tr>
  <tr>
    <td colspan=5>&nbsp;</td>
  </tr>
  <tr>
    <td colspan=4>
        <a href="javascript:onClick=openAO('stage');">Open AO to stage</a>
    </td>
    <td>
        
          <select name=stage_id>
            <?MISQL SQL="
              select stg_zdb_id, stg_abbrev, stg_name_ext
  	      from stage
              where stg_name <> 'Unknown' 
              order by stg_hours_start;">
              <option value="$1" $(IF,$(AND,$(XST,$xpcur_G_panel_add_start_stg),$(EC,$xpcur_G_panel_add_start_stg,$1)),SELECTED)>$2 $3</option>
            <?/MISQL>        
          </select>
    </td>
  </tr>
  <tr>
    <td colspan=4>
        <?MIVAR>
        Add Term: 
    </td>
    <td>
            <input type=textbox name="xpcur_G_AO_term" id=AOterm size=30>
            <DIV id="autosuggest"><ul></ul></DIV>

	    <script>
		  var anatomyList = new Array($xpcurstr_anatList);
		  new AutoSuggest(document.getElementById("AOterm"),anatomyList);
            </script>        
        <?/MIVAR>    
    </td>
  </tr>
  
  </form>
  
</table>
<?/MIBLOCK> <?MICOMMENT> end authorize <?/MICOMMENT>
