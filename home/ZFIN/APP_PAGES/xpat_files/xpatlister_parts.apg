<!-- FILE:<HTML>
 xpatlister.apg -->

<!-- This app-page displays a list of genes and their assay research links. 
  -->

<!-- modified to use web datablade walking windows  -->
<!-- Input variable names:gene_lg,gene_name,searchtype,stage_end,stage_start,user_entered -->

<HTML>

<HEAD>


<?MISQL SQL="
  select WebExplode(object,'') 
    from webPages 
    where ID='aa-chromoscripts.apg';">
  $1
<?/MISQL>

<?MIVAR name=comments> 
  Set stage and lg variables if they don't exist. 
  -this page is linked to from genelister.apg
<?/MIVAR>

  <?MISQL SQL="
     select stg_zdb_id, stg_hours_start, stg_hours_end
       from stage
      where stg_name != 'Any stage'
      order by 2 asc,3 asc;
          ">
    <?MIvar NAME=$earliest_stage COND=$(=,$MI_CURRENTROW,1)>$1<?/MIvar>
    <?MIvar NAME=$latest_stage>$1<?/MIvar>
  <?/MISQL>
<?MIVAR COND="$(NXST,$stage_start)" NAME=$stage_start>$earliest_stage<?/MIVAR>
<?MIVAR COND="$(NXST,$stage_end)" NAME=$stage_end>$latest_stage<?/MIVAR>
<?MIVAR COND="$(OR,$(NC,$stage_start,$earliest_stage),$(NC,$stage_end,$latest_stage))" NAME=$user_stg_rng>exists<?/MIVAR>
<?MIVAR COND="$(NXST,$gene_lg)" NAME=$gene_lg>0<?/MIVAR>

<SCRIPT>
  function popup_stage_comments(relative_url) {
    open(relative_url,"StageDescription","toolbar=yes,scrollbars=yes,resizable=yes");
  }
</SCRIPT>

</HEAD>

<body bgcolor="white" TEXT="black"> 
<basefont COLOR="#000000" size=2>

<!-- THIS NEXT PART IS EXECUTED AFTER THE PERSON ENTERS SOME CRITERIA -->

<?MISQL SQL="
  select WebExplode(object,'') 
    from webPages 
    where ID='aa-identify.apg';">
  $1
<?/MISQL>


<!-- set userid to ZDB_ID of user or GUEST to be used by the map viewer -->
<?MIVAR NAME=$userid>GUEST<?/MIVAR>
<?MIBLOCK COND="$(NOT,$(EQ,$(SUBSTR,$ZDB_name,1,5),GUEST))">
  <?MIVAR NAME=$userid>$ZDB_ident<?/MIVAR>
<?/MIBLOCK>



<!-- This next part builds up a query piece by piece, based on which criteria 
  -- were passed in, an inner constraint must be used to account for the 
	-- the possibility that the user leaves all fields blank; in that instance 
	-- the constraint isn't set, thus an error results when the inner query
	-- attempts to append an additional constraint to a non-existant constraint. 
  -->
<!-- Check for existance  of expected variables.  -->
<?MIVAR name=comments> $stage_start <br> $stage_end <?/MIVAR>

<?MIVAR NAME=$query_from><?/MIVAR>
<?MIVAR NAME=$query_where><?/MIVAR>
<?MIVAR>   $(SETVAR,gene_count,1)   <?/MIVAR>

<?MIVAR NAME=$structure_bool default=or>$structure_bool<?/MIVAR>

<?MIBLOCK COND="$(XST,$structure_list)">
  <?MIVAR NAME=str_count>1<?/MIVAR>
  <?MIBLOCK INDEX=$parti FOREACH=$structure_list>
    <?MIVAR COND="$(AND,$(NC,$parti,deleteme),$(NC,$parti,----------------------------------------------))">
      <?MIVAR NAME=$partii DELIMIT="'" REPLACE="''">$parti<?/MIVAR>
      $(SETVAR,str_dlmt_list[$str_count],$partii)
      $(SETVAR,str_list[$str_count],$parti)
      $(SETVAR,str_count,$(+,$str_count,1))
    <?/MIVAR>
  <?/MIBLOCK>
<?/MIBLOCK>

<?MIBLOCK COND="$(XST,$user_entered)">
  <?MIVAR NAME=$user_dat DELIMIT="'" REPLACE="''">$user_entered<?/MIVAR>
  <?MIBLOCK COND="$(XST,$str_dlmt_list)">
    <?MIVAR>
      $(SETVAR,str_dlmt_list[$str_count],$user_dat)
      $(SETVAR,str_list[$str_count],$user_entered)
      $(SETVAR,str_count,$(+,$str_count,1))
    <?/MIVAR>
  <?MIELSE>
    <?MIVAR>
      $(SETVAR,str_dlmt_list[1],$user_dat)
      $(SETVAR,str_list[1],$user_entered)
      $(SETVAR,str_count,2)
    <?/MIVAR>
  <?/MIBLOCK>
<?/MIBLOCK>

<?MIBLOCK COND="$(XST,$str_dlmt_list)">
    <?MIVAR NAME=$anatitem_constraint>$(SEPARATE,$str_dlmt_list,"' 
       )       
     "$structure_bool" exists
       (
         select * 
         from expression_pattern_anatomy, anatomy_item, stage s1, stage s2, stage st, stage ed
         where xp.xpat_zdb_id = xpatanat_xpat_zdb_id
           and xpatanat_anat_item_zdb_id = anatitem_zdb_id
           and xpatanat_xpat_start_stg_zdb_id = s1.stg_zdb_id
           and xpatanat_xpat_end_stg_zdb_id = s2.stg_zdb_id
           and st.stg_zdb_id = '"$stage_start"'
           and ed.stg_zdb_id = '"$stage_end"'
           and (       s2.stg_hours_end <= ed.stg_hours_end
                   and s2.stg_hours_end > st.stg_hours_start
                or
                       s1.stg_hours_start >= st.stg_hours_start
                   and s1.stg_hours_start < ed.stg_hours_end
                or 
                       s1.stg_hours_start <= st.stg_hours_start
                   and s2.stg_hours_end   >= ed.stg_hours_end
                 ) 
           and anatitem_name = '")<?/MIVAR>
    <?MIVAR NAME=$anatitem_constraint> and (
      exists
       (
         select * 
         from expression_pattern_anatomy, anatomy_item, stage s1, stage s2, stage st, stage ed
         where xp.xpat_zdb_id = xpatanat_xpat_zdb_id
           and xpatanat_anat_item_zdb_id = anatitem_zdb_id
           and xpatanat_xpat_start_stg_zdb_id = s1.stg_zdb_id
           and xpatanat_xpat_end_stg_zdb_id = s2.stg_zdb_id
           and st.stg_zdb_id = '$stage_start'
           and ed.stg_zdb_id = '$stage_end'
           and (       s2.stg_hours_end <= ed.stg_hours_end
                   and s2.stg_hours_end > st.stg_hours_start
                or
                       s1.stg_hours_start >= st.stg_hours_start
                   and s1.stg_hours_start < ed.stg_hours_end
                or 
                       s1.stg_hours_start <= st.stg_hours_start
                   and s2.stg_hours_end   >= ed.stg_hours_end
                 ) 
           and anatitem_name = '$anatitem_constraint'
        )
      )
     <?/MIVAR>
<?MIELSE>
 <?MIVAR>$(UNSETVAR,$structure_list)<?/MIVAR>
<?/MIBLOCK>

<?MIBLOCK COND="$(XST,$gene_name)">
  <?MIVAR NAME=$gene_name DELIMIT="'" REPLACE="''">$gene_name<?/MIVAR>
  <?MIVAR NAME=$wild_card><?/MIVAR>
  <?MIBLOCK COND="$(XST,$searchtype)">
    <?MIVAR COND="$(NC,$searchtype,begins)" NAME=$wild_card>%<?/MIVAR>
    <?MIVAR NAME=$gene_name_constraint> 
      and ( mrkr_name like '$wild_card$(LOWER,$gene_name)%'
      or
          exists 
          ( select *
            from all_map_names
            where mrkr_zdb_id = allmapnm_zdb_id 
              and allmapnm_name like '$wild_card$(LOWER,$gene_name)%' 
          )
        )        
    <?/MIVAR>
  <?MIELSE>
    <?MIVAR NAME=$searchtype>equals<?/MIVAR>
    <?MIVAR NAME=$gene_name_constraint> 
      and ( mrkr_name = '$(LOWER,$gene_name)'
      or
          exists 
          ( select *
            from all_map_names
            where mrkr_zdb_id = allmapnm_zdb_id 
              and allmapnm_name = '$(LOWER,$gene_name)' 
          )
        )        
    <?/MIVAR>
  <?/MIBLOCK> 

 <?MIVAR cond=$(=,1,0)> $gene_count <br><br><!-- $MI_SQL <br><br> --> <?/MIVAR>
<?/MIBLOCK>


<!--   SET QUERY FROM / WHERE VARIABLES   -->
<?MIBLOCK COND="$(OR,$(XST,$gene_name),$(XST,$str_dlmt_list))">
  <?MIBLOCK COND="$(XST,$gene_name)">
    <?MIBLOCK COND="$(XST,$str_dlmt_list)">

      <?MIVAR NAME=$query_where>where mrkr_zdb_id = mrkrlbl_marker_zdb_id
             and mrkrlbl_label_zdb_id = lbl_zdb_id
             and lbl_zdb_id = xp.xpat_label_zdb_id
             $anatitem_constraint
             $gene_name_constraint
      <?/MIVAR>

    <?MIELSE>

      <?MIVAR NAME=$query_where>where mrkr_zdb_id = mrkrlbl_marker_zdb_id
             and mrkrlbl_label_zdb_id = lbl_zdb_id
             and lbl_zdb_id = xp.xpat_label_zdb_id
             and xp.xpat_zdb_id = xpatstg_xpat_zdb_id 
             and xpatstg_start_stg_zdb_id = s1.stg_zdb_id
             and xpatstg_end_stg_zdb_id = s2.stg_zdb_id
             and st.stg_zdb_id = '$stage_start'
             and ed.stg_zdb_id = '$stage_end'
             and (       s2.stg_hours_end <= ed.stg_hours_end
                     and s2.stg_hours_end > st.stg_hours_start
                  or
                         s1.stg_hours_start >= st.stg_hours_start
                     and s1.stg_hours_start < ed.stg_hours_end
                  or 
                         s1.stg_hours_start <= st.stg_hours_start
                     and s2.stg_hours_end   >= ed.stg_hours_end
                   ) 
             $gene_name_constraint
      <?/MIVAR>
      <?MIVAR NAME=$query_from>, expression_pattern_stage, stage s1, stage s2, stage st, stage ed<?/MIVAR>

    <?/MIBLOCK>
  <?MIELSE> <!-- NXST gene_name -->

      <?MIVAR NAME=$query_where>where mrkr_zdb_id = mrkrlbl_marker_zdb_id
             and mrkrlbl_label_zdb_id = lbl_zdb_id
             and lbl_zdb_id = xp.xpat_label_zdb_id
             $anatitem_constraint
      <?/MIVAR>

  <?/MIBLOCK>

  <?MIVAR NAME=$query_from>from marker, marker_label, label, expression_pattern xp$query_from
  <?/MIVAR>

<?MIELSE>

  <?MIVAR NAME=$query_where>where mrkr_zdb_id = mrkrlbl_marker_zdb_id
             and mrkrlbl_label_zdb_id = lbl_zdb_id
             and lbl_zdb_id = xp.xpat_label_zdb_id
             and xp.xpat_zdb_id = xpatstg_xpat_zdb_id 
             and xpatstg_start_stg_zdb_id = s1.stg_zdb_id
             and xpatstg_end_stg_zdb_id = s2.stg_zdb_id
             and st.stg_zdb_id = '$stage_start'
             and ed.stg_zdb_id = '$stage_end'
             and (       s2.stg_hours_end <= ed.stg_hours_end
                     and s2.stg_hours_end > st.stg_hours_start
                  or
                         s1.stg_hours_start >= st.stg_hours_start
                     and s1.stg_hours_start < ed.stg_hours_end
                  or 
                         s1.stg_hours_start <= st.stg_hours_start
                     and s2.stg_hours_end   >= ed.stg_hours_end
                   )             
  <?/MIVAR>
  <?MIVAR NAME=$query_from>from marker, marker_label, label, expression_pattern xp, expression_pattern_stage, stage s1, stage s2, stage st, stage ed$query_from
  <?/MIVAR>

<?/MIBLOCK>

<?MIBLOCK COND="$(NE,$gene_lg,0)">
  <?MIVAR NAME=$query_from>$query_from, all_mapped_markers amm<?/MIVAR>
  <?MIVAR NAME=$query_where>$query_where and mrkr_zdb_id = amm.zdb_id 
                           and amm.OR_lg = $gene_lg<?/MIVAR>
<?/MIBLOCK>

<?MIVAR COND=$(=,0,1)>from: $query_from<br>where: $query_where <?/MIVAR>


<!-- RETRIEVE AND DISPLAY ALL MATCHING ENTRIES. -->

<center>
<font size=4>Expression Patterns Search: Result Summary</font>

<br>

<!--QUERY DATABASE AND CONSTRUCT TABLE BASED ON USER CONSTRIANTS. -->

<!-- Count the number of xpats that will be returned. -->
<?MISQL SQL="
      select count(distinct mrkr_zdb_id)::integer
      $query_from
      $query_where
      ;">
<?/MISQL>

<?MIVAR NAME=$num_recs>$1<?/MIVAR>

<?MIVAR> 
	<b>$num_recs</b> matching record(s) found.
	<!--  <br> QUERY: $MI_SQL  -->
<?/MIVAR>


<?MIBLOCK COND="$(=,1,1)">

<?MIBLOCK COND="$(>,$num_recs,0)">
  <br>(Click on individual Assay Types for details.) 
	<br>
  </center>
  <p>

    <TABLE width=100% border=0 cellspacing=0 cellpadding=3>

      <TR>
        <TH>&nbsp;</TH>
      	<!-- <TH align=left>Marker Type</TH> -->
      	<TD align=left>
	  <b>Gene symbol - name</b>
	  <br>[previous names / orthologues] 
        </TD>
      <!--	<TH align=left>Putative Gene Name</TH>  -->
      	<TH align=left>Expression Data</TH>
      	<TH align=center>Stage Range</TH> 
      </TR>


<?MIVAR NAME=WINSIZE DEFAULT=20>$WINSIZE<?/MIVAR>
<?MIVAR NAME=BEGIN DEFAULT=1>$START<?/MIVAR>

<!--- DEFINITION OF RANGES --->
<?MIVAR NAME=BEGIN>$(IF,$(<,$BEGIN,1),1,$BEGIN)<?/MIVAR> 
<?MIVAR NAME=END>$(+,$BEGIN,$WINSIZE)<?/MIVAR>

<!--- EXECUTION --->
<!-- set row_color to green -->
<?MIVAR name=$row_color>#FFCCFF<?/MIVAR>

<?MIVAR NAME=$rowNUM>$BEGIN<?/MIVAR>
<?MIVAR NAME=$ROWCOUNT>1<?/MIVAR>
<?MIVAR NAME=$GENE_OID><?/MIVAR>
<?MIVAR NAME=$GENE_TYPE><?/MIVAR>
<?MIVAR NAME=$GENE_LINK><?/MIVAR>
<?MIVAR NAME=$XPAT_X><?/MIVAR>
<?MIVAR NAME=$xpat_zdb><?/MIVAR>
<?MIVAR NAME=$assay_name><?/MIVAR>
<?MIVAR NAME=$first_stage><?/MIVAR>
<?MIVAR NAME=$second_stage_name><?/MIVAR>
<?MIVAR NAME=$second_stage_url><?/MIVAR>
<?MIVAR NAME=$second_stage_hour_end><?/MIVAR>
<?MIVAR NAME=$lab_zdb><?/MIVAR>
<?MIVAR NAME=$lab_name><?/MIVAR>
<?MIVAR NAME=$inagural>1<?/MIVAR>

<?MIVAR NAME=$query_from>$query_from, expression_pattern_assay<?/MIVAR>
<?MIVAR NAME=$query_where>$query_where
                          and xp.xpat_assay_name = xpatassay_name
<?/MIVAR>       

<!--   QUERY DATABASE FOR EXPRESSION PATTERN DATA ON GENE_X   -->
<!--     EXECUTE A DOUBLE LOOP.   -->
<!--       OUTER LOOP RETREIVES ASSAY_TYPES, CHANGES ROW COLOR, PRINTS ROWS   -->
<!--       INNER LOOP CREATES A TABLE ROW FOR EACH ASSAY_TYPE   -->



<?MIBLOCK>
<?MISQL WINSTART=$BEGIN WINSIZE=$WINSIZE SQL="
        select distinct xpatassay_name, xpatassay_display_order, xp.xpat_zdb_id, mrkr_name, mrkr_abbrev, mrkr_zdb_id, mrkr_type, mrkr_abbrev_order
        $query_from
        $query_where
        order by mrkr_type,mrkr_abbrev_order
        ;">

  <?MIVAR NAME=$GENE_OID>$6<?/MIVAR>
  <?MIVAR NAME=$GENE_NAME>$4<?/MIVAR>
  <?MIVAR NAME=$GENE_ABREV>$5<?/MIVAR>
  <?MIVAR NAME=$GENE_TYPE>$7<?/MIVAR>
  <?MIVAR NAME=$XPAT_X>$3<?/MIVAR>


	        <?MIVAR>
		  <?MIBLOCK COND="$(>,$(POSITION,$GENE_OID,GENE),0)">
                    <?MIVAR NAME=$GENE_LINK>
                      <i><a href="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-markerview.apg&OID=$GENE_OID">$GENE_ABREV</a> &nbsp;&nbsp;- $GENE_NAME</i>
                    <?/MIVAR>
	            <?MIVAR name=$aliases> <?/MIVAR>
		  <?MIELSE>
                    <?MIVAR NAME=$GENE_LINK>
	              <a href="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-markerview.apg&OID=$GENE_OID">$GENE_ABREV</a> <!-- &nbsp;&nbsp; - $GENE_NAME -->
                    <?/MIVAR>
		    <?MIVAR name=$aliases> <?/MIVAR>
                  <?/MIBLOCK>
	        <?/MIVAR>

		<?MISQL SQL="
		  select mrkrali_marker_name_alias,mrkrali_marker_zdb_id
		    from marker_alias 
		    where mrkrali_marker_zdb_id = '$GENE_OID'
		  union 
		  select putgene_putative_gene_name,putgene_pub_zdb_id
		    from putative_gene
		    where putgene_mrkr_zdb_id = '$GENE_OID';">
		  <?MIVAR NAME=$alias>$(IF,$(=,$(POSITION,$2,GENE),0),$1,<i>$1</i>)<?/MIVAR>
		  <?MIVAR NAME=$aliases>$(IF,$(=,$MI_CURRENTROW,1),$aliases $alias,$aliases; $alias)<?/MIVAR>
		<?/MISQL>

		<?MISQL SQL="
		  select distinct ortho_name, ortho_abbrev 
		    from orthologue 
		    where c_gene_id = '$GENE_OID' 
		      and (   lower(ortho_name) <> '$(LOWER,$GENE_NAME')
			   or lower(ortho_abbrev) <> '$(LOWER,$GENE_ABREV'));">

		  <?MIVAR NAME=$ortho_name>$1<?/MIVAR>
		  <?MIVAR NAME=$ortho_abbrev>$2<?/MIVAR>
		  <?MIBLOCK COND="$(=,$MI_CURRENTROW,1)">
		    <?MIVAR NAME=$aliases>$aliases / <?/MIVAR>
		  <?MIELSE>
		    <?MIVAR NAME=$aliases>$aliases; <?/MIVAR>
		  <?/MIBLOCK>
		  <?MIVAR NAME=$aliases>$aliases $ortho_name ($ortho_abbrev)<?/MIVAR>
		<?/MISQL>
		<?MIBLOCK COND="$(NE,$aliases, )">
		  <?MIBLOCK COND="$(>,$(POSITION,$GENE_OID,GENE),0)">
		    <?MIVAR name=$aliases>
		      [$aliases]
		    <?/MIVAR>
		  <?MIELSE>
		    <?MIVAR name=$aliases>
		      [$aliases]
		    <?/MIVAR>
		  <?/MIBLOCK>
		<?MIELSE>
		  <?MIVAR name=$aliases>
                    []
                  <?/MIVAR>
		<?/MIBLOCK>


<?MIBLOCK INDEX=$maven FOREACH=$xpat_zdb>
  <?MIVAR COND="$(EC,$maven,$XPAT_X|$GENE_OID)" NAME=$inagural>0<?/MIVAR>
<?/MIBLOCK>


<?MIBLOCK COND="$(=,$inagural,1)">

  <?MIVAR>$(SETVAR,$xpat_zdb[$(+,$(VECSIZE,$xpat_zdb),1)],$XPAT_X|$GENE_OID)

  <?MISQL SQL="
	select xpat_assay_name, s1.stg_name, s1.stg_comments_relative_url, s1.stg_hours_start, s2.stg_name, s2.stg_comments_relative_url, s2.stg_hours_end, s1.stg_zdb_id, s3.stg_hours_start, s2.stg_zdb_id
	from   expression_pattern, expression_pattern_stage, stage s1, stage s2, stage s3
	where      '$XPAT_X' = xpat_zdb_id
               and xpat_zdb_id = xpatstg_xpat_zdb_id
               and xpatstg_start_stg_zdb_id = s1.stg_zdb_id
               and xpatstg_end_stg_zdb_id = s2.stg_zdb_id
               and s3.stg_zdb_id = '$stage_start'
      order by xpat_assay_name,s1.stg_hours_start
              ;">
      <?MIBLOCK COND="$(=,$ROWCOUNT,1)">
        <?MIVAR NAME=$first_stage><a href="javascript:popup_stage_comments('$3')">$2</a><?/MIVAR>
      <?/MIBLOCK>

      <?MIBLOCK COND="$(AND,$(NXST,$ancor_stage_id),$(>=,$7,$9))">
        <?MIBLOCK COND="$(XST,$structure_list)">
          <?MIVAR NAME=$xpatstg_start>$8<?/MIVAR>
          <?MIVAR NAME=$xpatstg_end>$10<?/MIVAR>
          <?MISQL SQL="
               select anatitem_name
               from expression_pattern_anatomy, anatomy_item
               where xpatanat_xpat_zdb_id = '$XPAT_X'
                 and xpatanat_xpat_start_stg_zdb_id = '$xpatstg_start'
                 and xpatanat_xpat_end_stg_zdb_id = '$xpatstg_end'
                 and xpatanat_anat_item_zdb_id = anatitem_zdb_id">

            <?MIBLOCK INDEX=$anatitem FOREACH=$str_list>
               <?MIVAR COND="$(EC,$anatitem,$1)" 
                       NAME=$ancor_stage_id>$xpatstg_start<?/MIVAR>
            <?/MIBLOCK>
          <?/MISQL>
        <?MIELSE>
          <?MIVAR COND="$(XST,$user_stg_rng)" NAME=$ancor_stage_id>$8<?/MIVAR>
        <?/MIBLOCK><!-- xst structure list -->
      <?/MIBLOCK><!-- nxst ancor & end stage > user start stage -->

    <?MIVAR NAME=$ROWCOUNT>0<?/MIVAR>
    <?MIVAR NAME=$assay_name>$1<?/MIVAR>
    <?MIVAR NAME=$second_stage_name>$5<?/MIVAR>
    <?MIVAR NAME=$second_stage_url>$6<?/MIVAR>
    <?MIVAR NAME=$second_stage_hour_end>$7<?/MIVAR>


  <?/MISQL>

    <?MIVAR NAME=$ROWCOUNT>1<?/MIVAR>
    <?MIVAR>
      <TR bgcolor=$row_color> 

        <TD>
          &nbsp;
        </TD>
        <TD>
          $GENE_TYPE:$GENE_LINK $aliases
        </TD>
    <?/MIVAR>

<?MIBLOCK COND="$(=,1,0)">
        <TD>
    <?MIVAR NAME="$put_gene_name">-<?/MIVAR>
    <?MISQL SQL="select putgene_putative_gene_name
                 from putative_gene
                 where putgene_mrkr_zdb_id = '$GENE_OID';">
      <?MIVAR NAME="$put_gene_name">$1<?/MIVAR>
    <?/MISQL>
          $put_gene_name &nbsp;
        </TD>
<?/MIBLOCK>

     <?MIVAR>
        <TD>
          <a href="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-xpatview.apg&OID=$XPAT_X$(IF,$(XST,$ancor_stage_id),#$ancor_stage_id)">$assay_name</a>
        </TD>
     <?/MIVAR>

     <?MIVAR>
        <TD>
          $first_stage to
          <a href="javascript:popup_stage_comments('$second_stage_url')">$second_stage_name</a>
        </TD>

      </TR>
     <?/MIVAR>

  <?/MIVAR>

<!--    change row_color    -->
<?MIVAR NAME=$row_color>$(IF,$(EC,$row_color,#FFCCFF),#FFFFFF,#FFCCFF)<?/MIVAR>

<?/MIBLOCK>  <!-- end inagural occurance of xpat -->
<?MIVAR NAME=$inagural>1<?/MIVAR>
<?MIVAR>$(UNSETVAR,$ancor_stage_id)<?/MIVAR>

<!-- end gene_X SQL -->
<?/MISQL>

<?/MIBLOCK>

</TABLE>

  <BR>

  <Center>
  <Table width="70%" border="0">
    <tr>
      <td width="45%" align=right valign=top>&nbsp;

	<?MIVAR name=comment>  Build array of user data  <?/MIVAR>

	<!-- to be used by walking windows and nav tile page_id -->
	<!-- javascript of nav tile logic can not deal with preformed string 
	  -- using urlencode so save non-urlencoded string for use by nav tile
	  -- others will be appended -->
	<!-- want GET string as short as possible - append only when variable 
	  -- exists, buffer overflow may cause segmentation fault -->


	<?MIVAR name=selector>MIval=aa-xpatlister_parts.apg&WINSIZE=$WINSIZE<?/MIVAR>
	<?MIVAR name=$UserInput><?/MIVAR>
	<?MIVAR name=$UserInput COND=$(XST,$gene_name)>$UserInput&gene_name=$(URLENCODE,$gene_name)<?/MIVAR>
	<?MIVAR name=$UserInput COND=$(XST,$gene_lg)>$UserInput&gene_lg=$gene_lg<?/MIVAR>
	<?MIVAR name=$UserInput COND=$(XST,$searchtype)>$UserInput&searchtype=$searchtype<?/MIVAR>
  <?MIBLOCK COND=$(XST,$user_stg_rng)>
	<?MIVAR name=$UserInput>$UserInput&stage_start=$stage_start<?/MIVAR>
	<?MIVAR name=$UserInput>$UserInput&stage_end=$stage_end<?/MIVAR>
  <?/MIBLOCK>
	<?MIVAR name=$UserInput COND=$(XST,$structure_bool)>$UserInput&structure_bool=$structure_bool<?/MIVAR>
	<?MIVAR name=$UserInput COND=$(XST,$query_results)>$UserInput&query_results=$query_results<?/MIVAR>
	<?MIVAR name=UserInput COND=$(XST,$user_entered)>$UserInput&user_entered=$(URLENCODE,$user_entered)<?/MIVAR>


<?MIBLOCK COND="$(AND,$(XST,$structure_list),$(NE,$structure_list,-))">
  <?MIVAR COND="$(NXST,$s_list)" NAME=$s_list><?/MIVAR>

  <?MIBLOCK INDEX=$parti FOREACH=$structure_list >

      <?MIVAR>
        <?MIVAR NAME=$parti DELIMIT="'" REPLACE="''">$parti<?/MIVAR>
        $(SETVAR,gene_list[$gene_count],$parti)
        <?MIVAR name=$s_list>$s_list&structure_list[$gene_count]=$(URLENCODE,$parti)<?/MIVAR>
        $(SETVAR,gene_count,$(+,$gene_count,1))
      <?/MIVAR>

  <?/MIBLOCK>

  <?MIVAR NAME=UserInput>$UserInput&structure_list=$s_list<?/MIVAR>
<?/MIBLOCK>


	<!--- Return to the previous set of Rows --->
	<?MIBLOCK COND="$(>,$BEGIN,1)">
	
	  <?MIVAR>
	    <A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?START=$(-,$BEGIN,$WINSIZE)&BEGIN=$BEGIN&$selector$UserInput">Prev</A>&nbsp;&nbsp;&nbsp;&nbsp;<br>

	    <!-- If current not First Page, create link to first page. -->
	    <A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?START=1&BEGIN=1&$selector$UserInput">First Page</A>
	  <?/MIVAR>

	<?/MIBLOCK>

      </td>


      <!-- Calculate 3 pages before and 3 pages after current page. -->
      <?MIVAR name=$CURRENT>$(FIX,$(+,$(/,$BEGIN,$WINSIZE),1))<?/MIVAR>

      <?MIBLOCK COND="$(>=,$(-,$BEGIN,$(*,$WINSIZE,3)),0)">
        <td valign=top>
	  <?MIVAR><A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?$selector$UserInput&START=$(-,$BEGIN,$(*,$WINSIZE,3))"> $(-,$CURRENT,3)</A> <?/MIVAR>
	</td>
      <?/MIBLOCK>

      <?MIBLOCK COND="$(>=,$(-,$BEGIN,$(*,$WINSIZE,2)),0)">
	<td valign=top>
	  <?MIVAR><A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?$selector$UserInput&START=$(-,$BEGIN,$(*,$WINSIZE,2))"> $(-,$CURRENT,2)</A><?/MIVAR>
	</td>
      <?/MIBLOCK>

      <?MIBLOCK COND="$(>=,$(-,$BEGIN,$(*,$WINSIZE,1)),0)">
	<td valign=top>
	  <?MIVAR><A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?$selector$UserInput&START=$(-,$BEGIN,$(*,$WINSIZE,1))"> $(-,$CURRENT,1)</A><?/MIVAR>
	</td>
      <?/MIBLOCK>

      <?MIBLOCK COND="$(>,$num_recs,$WINSIZE)">
	<td align=center valign=top>
	  <?MIVAR>  $CURRENT <?/MIVAR>
	</td>
      <?/MIBLOCK>

      <?MIVAR COND="$(<=,$(+,$BEGIN,$(*,$WINSIZE,1)),$num_recs)">
	<td valign=top>
	  <A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?$selector$UserInput&START=$END"> $(+,$CURRENT,1)</A>
	</td>
      <?/MIVAR>

      <?MIVAR COND="$(<=,$(+,$BEGIN,$(*,$WINSIZE,2)),$num_recs)">
	<td valign=top>
	  <A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?$selector$UserInput&START=$(+,$BEGIN,$(*,$WINSIZE,2))"> $(+,$CURRENT,2)</A>
	</td>
      <?/MIVAR>

      <?MIVAR COND="$(<=,$(+,$BEGIN,$(*,$WINSIZE,3)),$num_recs)">
	<td valign=top>
	  <A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?$selector$UserInput&START=$(+,$BEGIN,$(*,$WINSIZE,3))"> $(+,$CURRENT,3)</A>
	</td>
      <?/MIVAR>

      <td width="45%" align=left valign=top>&nbsp;

	<!--- Get the next set of Rows --->
	<?MIBLOCK COND="$(<=,$(+,$BEGIN,$WINSIZE),$num_recs)">
	  <?MIVAR>
	    <A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?START=$END&BEGIN=$BEGIN&$selector$UserInput">Next</A><br>
	  <?/MIVAR>

	  <!-- Calculate last page -->
	  <?MIVAR name=$START COND="$(=,$(MOD,$num_recs,$WINSIZE),0)">$(+,$(*,$(-,$(/,$num_recs,$WINSIZE),1),$WINSIZE),1)<?/MIVAR>


	  <?MIVAR name=$START COND="$(!=,$(MOD,$num_recs,$WINSIZE),0)">$(+,$(*,$(FIX,$(/,$num_recs,$WINSIZE)),$WINSIZE),1)<?/MIVAR>

	  <?MIVAR>
	    <A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?START=$START&$selector$UserInput">Last Page</A>
	  <?/MIVAR>
	<?/MIBLOCK>

      </td>
    </tr>
  </Table>
  </Center>

<!-- row count gt 0 -->
<?MIELSE> <!-- Query suggestions -->
<!-- Examine which fields were used by the user to determine the most appropriate help message. -->
<basefont size=2>

<?MIBLOCK COND="$(XST,$gene_name)">
  <?MIVAR>
    <p>
      <b>To search gene records independent of expression data - 
      <A HREF="/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-genelister.apg&searchtype=$searchtype&name=$(URLENCODE,$gene_name)&lg=$gene_lg">Click here</a>.</b>
    </p>
  <?/MIVAR>
<?/MIBLOCK>

<?/MIBLOCK>




<!-- Cause a tile for the xpat select page to appear in the navigator frame -->

<?MIVAR NAME=page_title>EXPRESSION List<?/MIVAR>

<?MIVAR COND="$(XST,$(URLENCODE,$gene_name))" NAME=$(URLENCODE,$gene_name)><?/MIVAR>
<?MIVAR COND="$(NXST,$gene_name)" NAME=$gene_name><?/MIVAR>
<?MIVAR COND="$(NXST,$gene_lg)" NAME=$gene_lg>0<?/MIVAR>


<?MIVAR COND="$(XST,$nav_gene_name)" NAME=$gene_name>$nav_gene_name<?/MIVAR>

<?MIVAR>$(SETVAR,gene_count,1)<?/MIVAR>


<?MIBLOCK COND="$(AND,$(XST,$structure_list),$(NE,$structure_list,-))">
  <?MIVAR COND="$(NXST,$s_list)" NAME=$s_list><?/MIVAR>

  <?MIBLOCK INDEX=$parti FOREACH=$structure_list >

      <?MIVAR>
        <?MIVAR NAME=$parti DELIMIT="'" REPLACE="''">$parti<?/MIVAR>
        $(SETVAR,gene_list[$gene_count],$parti)
        <?MIVAR name=$s_list>$s_list&structure_list[$gene_count]=$(URLENCODE,$parti)<?/MIVAR>
        $(SETVAR,gene_count,$(+,$gene_count,1))
      <?/MIVAR>

  <?/MIBLOCK>
    <?MIVAR name=$s_list>$s_list&gene_count=$gene_count<?/MIVAR>
<?/MIBLOCK>

<!-- create search expression button -->
<?MIvar NAME=$page_title>Search Expression<?/MIvar>
<?MIBLOCK COND="$(XST,$s_list)">
  <?MIVAR>
    <SCRIPT>
      var page_id='/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-xpatselect.apg&nav_gene_name=$(URLENCODE,$gene_name)&gene_lg=$gene_lg&stage_start=$stage_start&stage_end=$stage_end$s_list';
      top.update_hist(page_id,"$page_title");
    </SCRIPT>
  <?/MIVAR>
<?MIELSE>
  <?MIVAR>
    <SCRIPT>
      var page_id='/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-xpatselect.apg&nav_gene_name=$(URLENCODE,$gene_name)&gene_lg=$gene_lg&stage_start=$stage_start&stage_end=$stage_end';
      top.update_hist(page_id,"$page_title");
    </SCRIPT>
  <?/MIVAR>
<?/MIBLOCK>

<!-- create expression list button -->
<?MIvar NAME=$page_title>Expression List<?/MIvar>
<?MIBLOCK COND="$(XST,$s_list)">
  <?MIVAR>
    <SCRIPT>
      var page_id='/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-xpatlister_parts.apg&gene_name=$(URLENCODE,$gene_name)&gene_lg=$gene_lg&stage_start=$stage_start&stage_end=$stage_end$s_list';
      top.update_hist(page_id,"$page_title");
      top.controls.location.reload(true);
    </SCRIPT>
  <?/MIVAR>
<?MIELSE>
  <?MIVAR>
    <SCRIPT>
      var page_id='/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-xpatlister_parts.apg&gene_name=$(URLENCODE,$gene_name)&gene_lg=$gene_lg&stage_start=$stage_start&stage_end=$stage_end';
      top.update_hist(page_id,"$page_title");
      top.controls.location.reload(true);
    </SCRIPT>
  <?/MIVAR>
<?/MIBLOCK>

<?/MIBLOCK>

</HTML>

