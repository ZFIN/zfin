<?MICOMMENT>

  FILE:  pheno_summary_sql.apg

  INPUT:    
    phenosum_sql_select
    phenosum_sql_from_spec - optional 
    phenosum_sql_where_spec - optional 
    phenosum_sql_from_outer_genofeat - optional 
    envID - optional
    anatID - optional
  OUTPUT:
    phenosum_sql

<?/MICOMMENT>

<?MICOMMENT>-- In one case,phenotype_summary.apg calls this page with genofeat_zdb_id in the select 
            -- list, we special handle it so that we only outer join genotype_feature in that case.
<?/MICOMMENT>
<?MIBLOCK COND=$(XST,$phenosum_sql_from_outer_genofeat)>
   <?MIVAR NAME=phenosum_sql_where_outer_genofeat>and genofeat_geno_zdb_id = genox_geno_zdb_id<?/MIVAR>
<?MIELSE>
  <?MIVAR NAME=phenosum_sql_from_outer_genofeat><?/MIVAR>
  <?MIVAR NAME=phenosum_sql_where_outer_genofeat><?/MIVAR>
<?/MIBLOCK>

<?MIVAR NAME=phenosum_sql_from>
      from apato_figure, atomic_phenotype, genotype_experiment $(IF,$(XST,$phenosum_sql_from_spec),$phenosum_sql_from_spec)
<?/MIVAR>

<?MIVAR NAME=phenosum_sql_where>
     where apatofig_apato_zdb_id = apato_zdb_id
       and apato_genox_zdb_id = genox_zdb_id
       $(IF,$(XST,$phenosum_sql_where_spec),$phenosum_sql_where_spec)
<?/MIVAR>

<?MIBLOCK COND=$(NC,$(SUBSTR,$OID,1,8),ZDB-GENO)>

  <?MIVAR NAME=phenosum_sql_from>$phenosum_sql_from, mutant_fast_search<?/MIVAR> 

  <?MIVAR NAME=phenosum_sql_where>$phenosum_sql_where
       and mfs_genox_zdb_id = genox_zdb_id
       and mfs_mrkr_zdb_id = '$OID'
       and exists (select NOTnormal.apato_zdb_id
                     from atomic_phenotype NOTnormal
                    where NOTnormal.apato_genox_zdb_id = mfs_genox_zdb_id 
                      and NOTnormal.apato_tag != "normal"
                      and apatofig_apato_zdb_id = NOTnormal.apato_zdb_id)
  <?/MIVAR>   
  
<?MIELSE>

  <?MICOMMENT> *** Link from the anatomy page. Only find Morpholinos with a specified environment <?/MICOMMENT>
  <?MIBLOCK COND=$(XST,$envID)>
  
    <?MIVAR NAME=phenosum_sql_where>$phenosum_sql_where 
       and genox_exp_zdb_id = '$envID'
       and (apato_subterm_zdb_id = '$anatID' or apato_superterm_zdb_id = '$anatID')
       and not exists  (select expcond_zdb_id
                          from experiment_condition 
                         where expcond_exp_zdb_id = genox_exp_zdb_id
                           and expcond_mrkr_zdb_id = '')
    <?/MIVAR>
    
  <?MIELSE COND=$(XST,$anatID)>
  
    <?MIVAR NAME=phenosum_sql_where>$phenosum_sql_where 
       and (apato_subterm_zdb_id = '$anatID' or apato_superterm_zdb_id = '$anatID')
    <?/MIVAR>
  
  <?/MIBLOCK>

  <?MIVAR NAME=phenosum_sql_from>$phenosum_sql_from $phenosum_sql_from_outer_genofeat<?/MIVAR>

  <?MIBLOCK COND="$(OR, $(NXST, $includingMO), $(EC, $includingMO, false) )">
    <?MIVAR NAME=phenosum_sql_where>$phenosum_sql_where
           and genox_geno_zdb_id = '$OID' 
           $phenosum_sql_where_outer_genofeat
           and not exists (select 'x' from genotype_feature GenoFtr, feature_marker_relationship PhenotypicTg
	                    where GenoFtr.genofeat_geno_zdb_id = '$OID' 
	                      and GenoFtr.genofeat_feature_zdb_id = PhenotypicTg.fmrel_ftr_zdb_id 
                              and PhenotypicTg.fmrel_type = 'contains phenotypic sequence feature')           
           and not exists(select Generic.exp_name
                            from experiment Generic
                           where Generic.exp_zdb_id = genox_exp_zdb_id
                             and Generic.exp_name not like "\_%")
           and exists (select 'x' from atomic_phenotype NOTnormal
                        where NOTnormal.apato_genox_zdb_id = genox_zdb_id 
                          and NOTnormal.apato_tag != "normal"
                          and apatofig_apato_zdb_id = NOTnormal.apato_zdb_id)  
    <?/MIVAR>
  
  <?MIELSE>
  
    <?MIBLOCK COND=$(AND,$(XST,$tagetGeneID),$(NE,$tagetGeneID,))>
      <?MIVAR NAME=phenosum_sql_where_morphant>$phenosum_sql_where
        and genox_geno_zdb_id = '$OID' 
        $phenosum_sql_where_outer_genofeat
        and not exists (select 'x' from genotype_feature GenoFtr, feature_marker_relationship PhenotypicTg
	                 where GenoFtr.genofeat_geno_zdb_id = '$OID' 
	                   and GenoFtr.genofeat_feature_zdb_id = PhenotypicTg.fmrel_ftr_zdb_id 
                           and PhenotypicTg.fmrel_type = 'contains phenotypic sequence feature')
        and exists(select 'x' from experiment_condition ThisMO, marker_relationship ThisGene 
                    where ThisMO.expcond_exp_zdb_id = genox_exp_zdb_id
                      and ThisMO.expcond_mrkr_zdb_id = ThisGene.mrel_mrkr_1_zdb_id
                      and ThisGene.mrel_type = "knockdown reagent targets gene"
                      and ThisGene.mrel_mrkr_2_zdb_id = "$tagetGeneID")       
        and not exists(select 'x' from experiment_condition MOonly, condition_data_type MO 
                        where MOonly.expcond_exp_zdb_id = genox_exp_zdb_id
                          and MOonly.expcond_cdt_zdb_id = MO.cdt_zdb_id
                          and MO.cdt_group != "morpholino")
        and exists (select 'x' from atomic_phenotype NOTnormal
                     where NOTnormal.apato_genox_zdb_id = genox_zdb_id 
                       and NOTnormal.apato_tag != "normal"
                       and apatofig_apato_zdb_id = NOTnormal.apato_zdb_id) 
      <?/MIVAR>
      
    <?MIELSE>
      <?MIVAR NAME=phenosum_sql_where_morphant>$phenosum_sql_where
        and genox_geno_zdb_id = '$OID' 
        $phenosum_sql_where_outer_genofeat
        and not exists (select 'x' from genotype_feature GenoFtr, feature_marker_relationship PhenotypicTg
	                 where GenoFtr.genofeat_geno_zdb_id = '$OID' 
	                   and GenoFtr.genofeat_feature_zdb_id = PhenotypicTg.fmrel_ftr_zdb_id 
                           and PhenotypicTg.fmrel_type = 'contains phenotypic sequence feature')  
        and exists (select 'x' from experiment_condition MOonly 
	                      where MOonly.expcond_exp_zdb_id = genox_exp_zdb_id
	                        and MOonly.expcond_mrkr_zdb_id is not null)
        and not exists (select 'x' from experiment_condition MOonly, condition_data_type MO 
                         where MOonly.expcond_exp_zdb_id = genox_exp_zdb_id
                           and MOonly.expcond_cdt_zdb_id = MO.cdt_zdb_id
                           and MO.cdt_group != "morpholino")
        and exists (select 'x' from atomic_phenotype NOTnormal
                     where NOTnormal.apato_genox_zdb_id = genox_zdb_id 
                       and NOTnormal.apato_tag != "normal"
                       and apatofig_apato_zdb_id = NOTnormal.apato_zdb_id ) 
      <?/MIVAR> 

    <?/MIBLOCK>  <?MICOMMENT> *** end of condition check for $tagetGeneID <?/MICOMMENT>

    <?MIVAR NAME=phenosum_sql_where_nonMorphant><?/MIVAR>
    <?MIBLOCK COND="$(OR, $(NXST, $morphantsOnly), $(EC, $morphantsOnly, false) )">
      <?MIVAR NAME=phenosum_sql_where_nonMorphant>
          UNION
  
          $phenosum_sql_select
          $phenosum_sql_from 
          $phenosum_sql_where      
          and genox_geno_zdb_id = '$OID' 
          $phenosum_sql_where_outer_genofeat
          and not exists (select 'x' from genotype_feature GenoFtr, feature_marker_relationship PhenotypicTg
	                   where GenoFtr.genofeat_geno_zdb_id = '$OID' 
	                     and GenoFtr.genofeat_feature_zdb_id = PhenotypicTg.fmrel_ftr_zdb_id 
                             and PhenotypicTg.fmrel_type = 'contains phenotypic sequence feature')          
          and not exists(select 'x' from experiment Generic
                          where Generic.exp_zdb_id = genox_exp_zdb_id
                            and Generic.exp_name not like "\_%")
          and exists (select 'x' from atomic_phenotype NOTnormal
                       where NOTnormal.apato_genox_zdb_id = genox_zdb_id 
                         and NOTnormal.apato_tag != "normal"
                         and apatofig_apato_zdb_id = NOTnormal.apato_zdb_id)   

      <?/MIVAR>       
      
    <?/MIBLOCK><?MICOMMENT>  *** end of condition check for $morphantsOnly <?/MICOMMENT> 
      
    <?MIVAR>$(SETVAR,$phenosum_sql_where,$(CONCAT,$phenosum_sql_where_morphant,$phenosum_sql_where_nonMorphant))<?/MIVAR>

  <?/MIBLOCK> <?MICOMMENT> *** end of condition check for $includingMO <?/MICOMMENT>

<?/MIBLOCK>  <?MICOMMENT> *** end of condition check for $OID type <?/MICOMMENT>

<?MIVAR NAME=phenosum_sql>
  $phenosum_sql_select
  $phenosum_sql_from
  $phenosum_sql_where
<?/MIVAR>

<?MIVAR>
  $(UNSETVAR,$phenosum_sql_select)
  $(UNSETVAR,$phenosum_sql_from_spec)
  $(UNSETVAR,$phenosum_sql_where_spec)
  $(UNSETVAR,$phenosum_sql_from_outer_genofeat)
  $(UNSETVAR,$tagetGeneID)
<?/MIVAR>