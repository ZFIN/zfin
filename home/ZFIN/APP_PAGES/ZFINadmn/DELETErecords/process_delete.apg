<?MICOMMENT>
  FILE: process-delete.html

  This file processes a record deletion. Since the (root) user has confirmed that the record needs to be deleted, all we do is go ahead and blast it out of there. Control then is returned to the ZFIN home page.

  VARIABLES EXPECTED:
    OID (REQUIRED) -- the ZFIN id of the record to delete.
    rtype (REQUIRED) -- the data type of the record.
    merge_oid (REQUIRED) -- the zdb id of the record that the current OID would be
                          merged into. 
    return_page (OPTIONAL) -- the page to return to after the deletion, by default,
                             it is the ZDB_home.apg    

  NOTE:
    Because this page drops temporary tables it cannot be webexploded from
    inside a select statement.  This page must first be retrieved with a 
    select statement and then passed to webexplode from an execute function 
    statement.  See discussion of the MIqry2pass variable in the Web
    Datablade documentation.

<?/MICOMMENT>


<?MIERROR>
<html>
<script src="/javascript/header.js"></script>
<p>Looks like we are having trouble processing your request. You can...</p>
<ul>
    <li>try reloading the page to see if the problem persists</li>
    <li>head back to the <a href="/">home page</a></li>
    <li>send us an <a href="mailto:zfinadmn@zfin.org">email</a> and tell us about it</li>
</ul>

<?MIBLOCK COND="$(EC,$AUTHORIZED,root)">
    <p class="error">ROOT ONLY DEBUGGING</p>
    <pre><?MIVAR>
SQL:     $MI_SQL
Code:    $MI_ERRORCODE
State:   $MI_ERRORSTATE
Message: $MI_ERRORMSG
<?/MIVAR></pre>
<?/MIBLOCK>
<script src="/javascript/footer.js"></script>
</html>
<?/MIERROR>


<?MISQL SQL="
  select WebExplode(object,'permission=root') 
    from webPages where ID='aa-secure_navigation.apg';">
    $1
<?/MISQL>

<?MIBLOCK COND="$(NC,$AUTHORIZED,false)">

  <?MIBLOCK COND="$(AND,$(XST,$OID),$(XST,$rtype))">


    <?MICOMMENT>=========================================================
                == for Markers only
                =========================================================
    <?/MICOMMENT>

      <?MICOMMENT> =====    MERGE  ======== <?/MICOMMENT>


         <?MIBLOCK COND="$(OR,$(EC,$(SUBSTR,$OID,1,8),ZDB-CRIS),$(EC,$(SUBSTR,$OID,1,8),ZDB-TALE),$(EC,$(SUBSTR,$OID,1,8),ZDB-MRPH))">
               <?MISQL SQL="select fstr1.fishstr_fish_zdb_id from fish_str fstr1
                             where fstr1.fishstr_str_zdb_id = '$merge_oid'
                               and exists(select 'x' from fish_str fstr2
                                           where fstr2.fishstr_str_zdb_id = '$OID'
                                             and fstr2.fishstr_fish_zdb_id = fstr1.fishstr_fish_zdb_id)
                                    ;">
                   <?MIVAR NAME="$fish_str_delete">$1<?/MIVAR>
                   <?MISQL SQL="delete from fish_str
                                 where fishstr_str_zdb_id = '$merge_oid'
                                   and fishstr_str_zdb_id = '$fish_str_delete'
                    ;">
                   <?/MISQL>
               <?/MISQL>

         <?/MIBLOCK>
         
         <?MICOMMENT> =====  Record attribution is effected by triggers so do it first.  ======== <?/MICOMMENT>
         <?MISQL SQL="select mms_sql, mms_pk_id from merge_markers_sql 
                      where mms_mrkr_1_zdb_id = '$OID'
                        and mms_mrkr_2_zdb_id = '$merge_oid'
                        and mms_sql like '%record_attribution%'
                      order by 2;">
         
         	<?MIVAR NAME=$update_sql>$1<?/MIVAR>
         	<?MIVAR NAME=$update_sql DELIMIT='"' REPLACE="'">$update_sql<?/MIVAR>
         	<?MISQL SQL="$update_sql" COND="$(=,$(POSITION,$update_sql,xpatres_zdb_id),0)"> <?/MISQL>
         	<?MISQL COND="$(EC,$(SUBSTR,$update_sql,1,6),delete)"
         	        SQL="insert into updates (
				submitter_id ,
				rec_id ,
				new_value ,
				comments ,
				when ,
				submitter_name )
			    Values (
			    	'$ZDB_ident',
			    	'$merge_oid',
			    	'DELETE',
			    	'$update_sql',
			    	CURRENT,
			    	'$ZDB_name');">
		<?/MISQL>
         
         <?/MISQL>
         
         <?MICOMMENT> =====  delete root GO term from either of the party if there is non-root GO term, FB case 11048.  ======== <?/MICOMMENT>
         
         <?MICOMMENT> =====  biological process  ======== <?/MICOMMENT>

         <?MISQL SQL="select * from marker_go_term_evidence, term where mrkrgoev_mrkr_zdb_id = '$OID' and mrkrgoev_term_zdb_id != 'ZDB-TERM-091209-6070'
                                and mrkrgoev_term_zdb_id = term_zdb_id and term_ontology = 'biological_process';">
         <?/MISQL>
         <?MIBLOCK COND="$(>,$MI_ROWCOUNT,0)">
              <?MISQL SQL="select mrkrgoev_zdb_id from marker_go_term_evidence where mrkrgoev_mrkr_zdb_id = '$merge_oid' and mrkrgoev_term_zdb_id = 'ZDB-TERM-091209-6070';">                               
                    <?MISQL SQL="delete from zdb_active_data where zactvd_zdb_id = '$1';">
                    <?/MISQL>
              <?/MISQL>
         <?/MIBLOCK>

         <?MISQL SQL="select * from marker_go_term_evidence, term where mrkrgoev_mrkr_zdb_id = '$merge_oid' and mrkrgoev_term_zdb_id != 'ZDB-TERM-091209-6070'
                                and mrkrgoev_term_zdb_id = term_zdb_id and term_ontology = 'biological_process';">
         <?/MISQL>
         <?MIBLOCK COND="$(>,$MI_ROWCOUNT,0)">
              <?MISQL SQL="select mrkrgoev_zdb_id from marker_go_term_evidence where mrkrgoev_mrkr_zdb_id = '$OID' and mrkrgoev_term_zdb_id = 'ZDB-TERM-091209-6070';">                               
                    <?MISQL SQL="delete from zdb_active_data where zactvd_zdb_id = '$1';">
                    <?/MISQL>
              <?/MISQL>
         <?/MIBLOCK>

         <?MICOMMENT> =====  molecular function ======== <?/MICOMMENT>
         <?MISQL SQL="select * from marker_go_term_evidence, term where mrkrgoev_mrkr_zdb_id = '$OID' and mrkrgoev_term_zdb_id != 'ZDB-TERM-091209-2432'
                                and mrkrgoev_term_zdb_id = term_zdb_id and term_ontology = 'molecular_function';">
         <?/MISQL>
         <?MIBLOCK COND="$(>,$MI_ROWCOUNT,0)">
              <?MISQL SQL="select mrkrgoev_zdb_id from marker_go_term_evidence where mrkrgoev_mrkr_zdb_id = '$merge_oid' and mrkrgoev_term_zdb_id = 'ZDB-TERM-091209-2432';">                               
                    <?MISQL SQL="delete from zdb_active_data where zactvd_zdb_id = '$1';">
                    <?/MISQL>
              <?/MISQL>
         <?/MIBLOCK>

         <?MISQL SQL="select * from marker_go_term_evidence, term where mrkrgoev_mrkr_zdb_id = '$merge_oid' and mrkrgoev_term_zdb_id != 'ZDB-TERM-091209-2432'
                                and mrkrgoev_term_zdb_id = term_zdb_id and term_ontology = 'molecular_function';">
         <?/MISQL>
         <?MIBLOCK COND="$(>,$MI_ROWCOUNT,0)">
              <?MISQL SQL="select mrkrgoev_zdb_id from marker_go_term_evidence where mrkrgoev_mrkr_zdb_id = '$OID' and mrkrgoev_term_zdb_id = 'ZDB-TERM-091209-2432';">                               
                    <?MISQL SQL="delete from zdb_active_data where zactvd_zdb_id = '$1';">
                    <?/MISQL>
              <?/MISQL>
         <?/MIBLOCK>
         
         <?MICOMMENT> =====  cellular component  ======== <?/MICOMMENT>

         <?MISQL SQL="select * from marker_go_term_evidence, term where mrkrgoev_mrkr_zdb_id = '$OID' and mrkrgoev_term_zdb_id != 'ZDB-TERM-091209-4029'
                                and mrkrgoev_term_zdb_id = term_zdb_id and term_ontology = 'cellular_component';">
         <?/MISQL>
         <?MIBLOCK COND="$(>,$MI_ROWCOUNT,0)">
              <?MISQL SQL="select mrkrgoev_zdb_id from marker_go_term_evidence where mrkrgoev_mrkr_zdb_id = '$merge_oid' and mrkrgoev_term_zdb_id = 'ZDB-TERM-091209-4029';">                               
                    <?MISQL SQL="delete from zdb_active_data where zactvd_zdb_id = '$1';">
                    <?/MISQL>
              <?/MISQL>
         <?/MIBLOCK>

         <?MISQL SQL="select * from marker_go_term_evidence, term where mrkrgoev_mrkr_zdb_id = '$merge_oid' and mrkrgoev_term_zdb_id != 'ZDB-TERM-091209-4029'
                                and mrkrgoev_term_zdb_id = term_zdb_id and term_ontology = 'cellular_component';">
         <?/MISQL>
         <?MIBLOCK COND="$(>,$MI_ROWCOUNT,0)">
              <?MISQL SQL="select mrkrgoev_zdb_id from marker_go_term_evidence where mrkrgoev_mrkr_zdb_id = '$OID' and mrkrgoev_term_zdb_id = 'ZDB-TERM-091209-4029';">                               
                    <?MISQL SQL="delete from zdb_active_data where zactvd_zdb_id = '$1';">
                    <?/MISQL>
              <?/MISQL>
         <?/MIBLOCK>         
         
         <?MISQL SQL="select mms_sql, mms_pk_id from merge_markers_sql 
                      where mms_mrkr_1_zdb_id = '$OID'
                        and mms_mrkr_2_zdb_id = '$merge_oid'
                        and mms_sql not like '%record_attribution%'
                      order by 2;">

         	<?MIVAR NAME=$update_sql>$1<?/MIVAR>
         	<?MIVAR NAME=$update_sql DELIMIT='"' REPLACE="'">$update_sql<?/MIVAR>
         	<?MISQL SQL="$update_sql"> <?/MISQL>
         	<?MISQL COND="$(EC,$(SUBSTR,$update_sql,1,6),delete)"
         	        SQL="insert into updates (
				submitter_id ,
				rec_id ,
				new_value ,
				comments ,
				when ,
				submitter_name )
			    Values (
			    	'$ZDB_ident',
			    	'$merge_oid',
			    	'DELETE',
			    	'$update_sql',
			    	CURRENT,
			    	'$ZDB_name');">
		<?/MISQL>        	
         <?/MISQL>  
  
         <?MICOMMENT> =====  clean up duplicate GO evidence  ========
         <?MISQL SQL="select mrkrgoev_zdb_id from marker_go_term_evidence m1
                      where mrkrgoev_mrkr_zdb_id = '$merge_oid'
                        and exists (select 'x' from marker_go_term_evidence m2
                                    where m2.mrkrgoev_mrkr_zdb_id = '$merge_oid'
                                      and m2.mrkrgoev_zdb_id != m1.mrkrgoev_zdb_id
                                      and m2.mrkrgoev_inferred_composite = m1.mrkrgoev_inferred_composite
                                      and m2.mrkrgoev_inferred_composite is not null
                                      and m1.mrkrgoev_inferred_composite is not null
                                      and m2.mrkrgoev_date_modified > m1.mrkrgoev_date_modified)"> 
                
               <?MISQL SQL="delete from marker_go_term_evidence where mrkrgoev_zdb_id = '$1';"><?/MISQL>
         <?/MISQL>         
          <?/MICOMMENT>
         
         
         
         
         
         <?MICOMMENT> ====== Common action ====== <?/MICOMMENT>
         <?MICOMMENT> ------    Alias   -----------  
                      -- a. get rid of duplication
                      -- b. update the data id 
                      -- c. add mergee as a new alias
         <?/MICOMMENT>
         <?MISQL SQL="
                 SELECT dbinfo('sessionid') 
                   FROM single;">
         <?/MISQL>
      	 <?MIVAR NAME=$dalias_session_id>$1<?/MIVAR>
         <?MIVAR NAME=$tmp_delete_these_aliases>$(CONCAT,tmp_delete_these_aliases_,$dalias_session_id)<?/MIVAR>
   	    
         <?MISQL SQL="
                execute function table_exists('$tmp_delete_these_aliases')">
         <?/MISQL>  
         <?MISQL COND=$(EC,$1,f) SQL="
        	create temp table $tmp_delete_these_aliases (
          	   tmpdalias_zdb_id varchar(50),
          	   tmpdalias_alias_name varchar(100),
          	   tmpdalias_data_zdb_id varchar(50)
                ) with NO LOG;">
      	 <?/MISQL>
         <?MISQL SQL="
		INSERT INTO $tmp_delete_these_aliases
			    (tmpdalias_zdb_id, tmpdalias_alias_name,
			     tmpdalias_data_zdb_id)
	  	     SELECT dalias_zdb_id, dalias_alias, dalias_data_zdb_id
		       FROM data_alias 
		      WHERE dalias_data_zdb_id = '$merge_oid';">
	 <?/MISQL>
	 <?MISQL SQL="
		DELETE from data_alias
		    WHERE dalias_alias in (SELECT tmpdalias_alias_name
					     FROM $tmp_delete_these_aliases)
		    AND dalias_data_zdb_id = '$OID';">
	 <?/MISQL>

         <?MICOMMENT>historical code that I didn't spend time to understand
         <?/MICOMMENT>
	 <?MISQL COND="$(OR,$(XST,$input_name),$(XST,$input_acc))" SQL="
       			 DELETE from $tmp_delete_these_aliases;">
   	 <?/MISQL>

     	 <?MISQL SQL="
                 UPDATE data_alias 
                    SET dalias_data_zdb_id = '$merge_oid' 
                  WHERE dalias_data_zdb_id = '$OID';">
         <?/MISQL>  

         <?MICOMMENT>Check for a data alias record that has the same name as the merging marker.
                     If a data_alias record is found, use that record. Otherwise create a new
                     data_alias record.
         <?/MICOMMENT>
              <?MIVAR NAME=dalias_id>NOVALUE<?/MIVAR>

         <?MISQL SQL="
             SELECT going.mrkr_zdb_id 
             FROM data_alias, marker going, marker staying
             WHERE dalias_alias = lower(going.mrkr_abbrev)
               and dalias_data_zdb_id = staying.mrkr_zdb_id
               and going.mrkr_zdb_id = '$OID'
               and staying.mrkr_zdb_id = '$merge_oid';">  <?MIVAR NAME=dalias_id>$1<?/MIVAR>
         <?/MISQL>
             
         <?MICOMMENT> IF no Dalias_id is set, then make one.<?/MICOMMENT>
         <?MIBLOCK COND="$(NC,$dalias_id,$OID)">
             <?MISQL SQL="
   		  EXECUTE FUNCTION get_id('DALIAS');">
             <?/MISQL>
             <?MIVAR NAME=dalias_id>$1<?/MIVAR>
             <?MISQL SQL="
                  INSERT INTO zdb_active_data VALUES('$dalias_id');">
             <?/MISQL>
             <?MISQL SQL="
                 INSERT INTO data_alias (
                     		dalias_zdb_id, dalias_data_zdb_id,
                    		dalias_alias, dalias_group_id,
		     		dalias_alias_lower ) 
                      SELECT '$dalias_id','$merge_oid',mrkr_abbrev,(select aliasgrp_pk_id from alias_group where aliasgrp_name ='alias'),
			      lower(mrkr_abbrev)
                        FROM marker
                       WHERE mrkr_zdb_id = '$OID';">
             <?/MISQL>
         <?MIELSE>
             <?MISQL SQL="
             SELECT dalias_zdb_id 
             FROM data_alias, marker going, marker staying
             WHERE dalias_alias = lower(going.mrkr_abbrev)
               and dalias_data_zdb_id = staying.mrkr_zdb_id
               and going.mrkr_zdb_id = '$OID'
               and staying.mrkr_zdb_id = '$merge_oid';">  <?MIVAR NAME=dalias_id>$1<?/MIVAR>
             <?/MISQL>         
         <?/MIBLOCK>
         <?MICOMMENT> End set data_alias <?/MICOMMENT>              


         <?MICOMMENT> =====  end Common Action  ===== <?/MICOMMENT>


         <?MICOMMENT> =========    Marker   ========= <?/MICOMMENT>

         <?MIBLOCK COND="$(EC,$rtype,marker)">

            <?MICOMMENT> --- get marker name --- <?/MICOMMENT>
	    <?MISQL COND="$(=,1,0)" SQL="
	         select mrkr_name 
                   from marker 
                  where mrkr_zdb_id = '$OID';">
	    <?/MISQL>
            <?MIVAR NAME=old_name>$1<?/MIVAR>

           <?MICOMMENT> --- marker_history --- <?/MICOMMENT>
        
           <?MISQL SQL="
                EXECUTE FUNCTION get_id('NOMEN');">
           <?/MISQL>
           <?MIVAR NAME=mhist_id>$1<?/MIVAR>
           <?MISQL SQL="
              INSERT INTO zdb_active_data VALUES('$mhist_id');">
           <?/MISQL>
           <?MISQL SQL="
              INSERT INTO marker_history (  
                     mhist_zdb_id, mhist_mrkr_zdb_id, 
                     mhist_event, mhist_reason, mhist_date,
                     mhist_mrkr_name_on_mhist_date,
                     mhist_mrkr_abbrev_on_mhist_date,
                     mhist_comments,mhist_dalias_zdb_id )
                  SELECT 
                       '$mhist_id',  mrkr_zdb_id,
                       'merged','same marker', CURRENT, 
                        mrkr_name,  mrkr_abbrev,
                        'none', '$dalias_id'
                    FROM marker
                   WHERE mrkr_zdb_id = '$merge_oid';">
           <?/MISQL>  

           <?MISQL SQL="
                 UPDATE marker_history 
                    SET mhist_mrkr_zdb_id = '$merge_oid' 
                  WHERE mhist_mrkr_zdb_id = '$OID';">
	   <?/MISQL>
	
           <?MICOMMENT> --- regen_names_marker --- <?/MICOMMENT>
           <?MISQL SQL="
              execute procedure regen_names_marker('$merge_oid');">
            <?/MISQL>  
            
           <?MICOMMENT> --- regen_genox_marker --- <?/MICOMMENT>
           <?MISQL SQL="
              execute procedure regen_genox_marker('$merge_oid');">
            <?/MISQL>              

          <?/MIBLOCK> 
          <?MICOMMENT> ========= end Marker ============== <?/MICOMMENT>

        
         <?MICOMMENT> ========  Common Action (cont) ========= <?/MICOMMENT>
	 <?MIVAR NAME="old_name">$(REPLACE,$old_name,','')<?/MIVAR>
	 <?MISQL SQL="
                   update zdb_replaced_data 
	              set zrepld_new_zdb_id = '$merge_oid',
		          zrepld_old_name = '$old_name'
	            where zrepld_new_zdb_id = '$OID';">
         <?/MISQL>

	 <?MISQL SQL="
	      delete from zdb_active_data
	            where zactvd_zdb_id = '$OID';">
	 <?/MISQL>
	 <?MISQL SQL="
	      insert into zdb_replaced_data 
                          (zrepld_old_zdb_id, zrepld_new_zdb_id, zrepld_old_name)
                   values ('$OID','$merge_oid','$old_name');">
	 <?/MISQL>  
         <?MICOMMENT> ====== end Common Action (cont) ========= <?/MICOMMENT>
     
         <?MICOMMENT> ========  end  MERGE  ======== <?/MICOMMENT>


    <?MICOMMENT> =========   Next page  ========== <?/MICOMMENT>
    <?MIVAR NAME=return_page COND="$(NXST,$return_page)">ZDB_home.apg<?/MIVAR>
    <?MIVAR NAME=returnOIDstring COND="$(NXST,$returnOID)"><?/MIVAR>
    <?MIVAR NAME=returnOIDstring COND="$(XST,$returnOID)">&OID=$returnOID<?/MIVAR>

    <SCRIPT>
        <?MIVAR> window.location.href='/<!--|WEBDRIVER_PATH_FROM_ROOT|-->?MIval=aa-newmrkrselect.apg'<?/MIVAR>;
    </SCRIPT> 

  <?/MIBLOCK> <?MICOMMENT> ====  end OID & rtype Exist  ===== <?/MICOMMENT>


  <?MIVAR COND="$(OR,$(NXST,$OID),$(NXST,$rtype))">
    <H1 align=center>ERROR: Insufficient input; no action taken </H1>
  <?/MIVAR>
  
  <?MICOMMENT> =====  Clean up the merge_markers_sql table ========<?/MICOMMENT>               
  <?MISQL SQL="delete from merge_markers_sql;"><?/MISQL>  

<?/MIBLOCK> <?MICOMMENT> =======  end Authorization ======== <?/MICOMMENT>

