<HTML>
<HEAD>
<TITLE> Data Descriptions for 
The Zebrafish Database (ZDB)
</TITLE>
</HEAD>
<BODY>
<CENTER><H1><BIG>Data Descriptions for 
The Zebrafish Database (ZDB)</BIG></H1>
<H2>The Zebrafish Information Network (ZFIN)</H2>
<H3>Eck Doerry, Ted Kirkpatrick, Sarah Douglas and Monte Westerfield
University of Oregon</H3>
<H3>May 30, 1997, Draft</H3>
</CENTER>
<hr>
For questions or comments, email 
<a href=mailto:edwards@uoneuro.uoregon.edu> edwards@uoneuro.uoregon.edu</a> or contact:<p>
  Pat Edwards<br>
  Institute of Neuroscience<br>
  University of Oregon<br>
  Eugene, OR 97403 USA<br>
  fax: 503-346-4548<br>
<hr>
<P><B>Purpose: </B>The purpose of this document is to provide a detailed description of the data categories designed for the database, how data are specified and by whom, how they are entered, and their intended use within the context of a database query.  
	
<P>	<B>How to use this document:</B>  This is a working document which changes as the design and implementation of the database change.  It is divided into sections which describe groups of data classes.  Each class of data is first described in general terms of its purpose and use. The attributes for each class are then listed and discussed individually.  Our working notes, conversations and open issues are recorded at the end of each data class description.
	
<H3><P><BR>Terminology:</H3>
<UL><BR>• “<B>BOLD</B>” refers to the names of data classes
<BR>• “<B>bold</B>” refers to the names of attributes of data classes
<BR>• The name of each attribute is followed by a description of how it is represented in the database (data type, required or optional).
<BR>• The term “validation”  refers to verification or error-checking of submitted data by the system. For instance, if an attribute is stated to receive “no validation”, then values provided during data entry are blindly inserted into the database, with no further policing by the system.
<BR>• The term “DB Admin”  refers to the database administrator who is the person(s) responsible for keeping this database up to date.
<BR>•  Any attribute value of any data record may be edited or removed from the database by the DB Admin, even if the description for a given attribute does not explicitly say so.  </UL>

<CENTER><H2>Table of Contents</H2></CENTER>


<B><BR>OVERVIEW: </B>
<LI>Proposed contents of Zebrafish Database
<LI>Graphical Overview of Class Structure
<LI>Abstract Class:  GENERIC_OBJECT
<B><BR>SECTION I: The Zebrafish Community</B>
<LI>Abstract Class:  SOURCE
<LI>Class:  PERSON
<LI>Class:  LAB	
<LI>Class:  COMPANY
<LI>Class:  PUBLICATION
<B><BR>SECTION II: Experimental Data</B>
<LI>Abstract Class:  DATA_ITEM
<B><BR>OVERVIEW: Handling of Map Markers</B>
<LI>Class:  MAP_MARKER
<LI>Class:  CLONED_GENE
<LI>Class:  EST	
<LI>Class:  ORTHOLOG
<LI>Class:  SEQUENCE
<LI>Class:  AMP_PRODUCT
<LI>Class:  PRIMER_SEQ
<B><BR>OVERVIEW: Mutants and Chromosomes</B>
<LI>Class:  FISH
<LI>Class:  CHROMOSOME
<LI>Class:  ALTERATION
<LI>Abstract Class:  LABEL
<LI>Class:  ANTIBODY
<LI>Class:  RNA PROBE
<LI>Class:  IMAGES
<LI>Class:  PHYSIOLOGICAL RECORDS
<B><BR>SECTION III: The Zebrafish Reference Resource</B>
<LI>Class:  Part	
<LI>Class:  Phys_Structure
<B><BR>SECTION IV: Behind the Scenes</B>
<LI>Data Object: ID MANAGER
<LI>HIDDEN TABLE: PERSON-LAB
<LI>HIDDEN TABLE: ATTR_UPDATE
<LI>HIDDEN TABLE: DATA-PUB
<LI>APPENDIX

<H1><CENTER>OVERVIEW: Proposed contents of Zebrafish Database</CENTER></H1>

<H2>I. The Zebrafish Community:</H2>
			<H3>Sources</H3>
			<P><B>People:</B> name, address, phone, fax, email, URL, nicknames, lab, bio sketch, publications, snapshot.
			<P><B>Labs: </B>name, address, phone, fax, email, URL, members, publications, contact person, snapshot.
			<P><B>Companies:</B> name, address, phone, fax, email, URL, description, contact person, logo.
			<P><B>Publications: </B>authors, date, title, source, keywords, abstract, content, news & views, errata and notes.
<BR>
<BR>		
<BR>		
<H2>II. Experimental Data</H2>
			<H3>Map Markers and Related Info:</H3> 
			<P><B>Cloned Gene:</B> name, map_location, amplification_product, abbreviation, allele, expression_pattern, cDNA_sequence, genomic_sequence, protein_sequence, source.
			<P><B>EST: </B>name, map_location, amplification_product, EST_sequence, source.
			<P><B>Amplification Product: </B> marker_id, forward_primer, reverse_primer, band_size, restriction_enzyme.
			<P><B>Primer_sequence:</B>  name, sequence, source.
			<P><B>Ortholog:</B>  cloned_gene_id, organism, othologue_name, accession_number.
			<P><B>Sequence:</B>marker_id, sequence_type (genomic, protein, cDNA, EST), genbank_number, start_codon, stop_codon, introns.
<BR>			
			<H3>Mutant and Wild-Type Stocks</H3>  
			<P><B>Fish: </B>name, abbreviation, line_type (mutant, wild type), source, mother, father, discoverer, lab, phenotype, segregation, original_cross_number.
			<P><B>Chromosome:</B> name, abbreviation, chromosome#, phenotype, expression_pattern, lab.
			<P><B>Alteration:</B> allele, mutagen, protocol, chromosome_change, locus, genetic_location, cytological_location, breakpoints, affected_genes.
<BR>
			<H3>Labels</H3>
			<P><B>Antibodies: </B> source, primary publication, related publications, comments, name, structures labeled, type, immunogen.
			<P><B>RNA probes: </B> source, primary publication, related publications, comments, name, structures labeled, gene, vector.
			<P><B>Images:</B>  stock, specimen (LM section, EM section, whole-mount), state (live, fixed), type (still, movie, optical series, 3-D),  orientation (dorsal - anterior to top, ventral - anterior to top, sagittal - anterior to left, sagittal - anterior to right, parasagittal - anterior to left, parasagittal - anterior to right, transverse - dorsal to top, dorsal oblique, ventral oblique, transverse oblique - dorsal to top), resolution, stage, stage_hours_start, stage_hours_end, labeling, visible structures, primary publication, related publications, comments.
			<P><B>Physiological records:</B>  source, primary publication, related publications, comments, kind (current, voltage, optical), description.
<BR>
<BR>
<BR>
<H2>III. Reference Resources</H2>

			<P><B>Developmental Atlas:</B>
			<P><B>Staging series:</B>
			<P><B>Adult Atlas:</B>
			<P><B>Anatomical parts:</B> name,  abbreviation(s), description, stage(s)
<BR>
<BR>
<BR>
<H1>Graphical Overview of Class Structure</H1>

<img src="fig1.gif">

 <H2>Abstract Class:  GENERIC_OBJECT </H2>

	<P><B>Role: </B> The abstract category GENERIC_OBJECT defines a common superclass for <I>all</I> of the data classes within ZDB. Consequently, it defines attributes common to all data 
	
<P>	<B>How entered: </B> There are no actual GENERIC_OBJECT records; GENERIC_OBJECT serves purely as an abstract class in which we specify attributes and functionality common to all data items.  Data items in non-abstract classes like IMAGE, GENE, etc., all gain these attributes through inheritance. 
	
<BR><H3><B>Superclasses: </B> NONE</H3>
	
	<H4><B>OVERVIEW:</H4></B>
<BR>

<img src="fig2.gif">

<BR>
<H3>ATTRIBUTES:</H3>
	<P><B>ZDB_ID  (TEXT, REQUIRED). </B>Hold a ZDB_ID for the object -- see the documentation on the ID MANAGER object in Section IV. Briefly, this ID has a strictly defined format and is generated by the system (via a call to get_id) at the time the data object is initially created. It uniquely identifies the data object; no two ZDB_IDs may be identical. For the most part, the ZDB_ID is for system use only, though, in theory, users could utilize the IDs to identify and search for data records.
	<P><B>owner  (TEXT, REQUIRED). </B> This field is also filled in by the system. It specifies the login name of the PERSON who initially submitted this data record. This is known to the system because the person must provide a submitter name and login before being allowed to submit anything. 
<P>	<B>birthdate (DATE, REQUIRED). </B> This field is automatically filled by the system with a time stamp to mark the time and date at which this record was created. Note that we cannot just rely on the Illustra system’s “tmin” timestamp, which records when a row was inserted because we may move tables to flat files, and reload them into new tables many times. Each reload would then in a new tmin date.
	
<H3>Open Issues/Questions:</H3>
<BR>
<BR>
<H1>SECTION I:  The Zebrafish Community</H1>

<P>	<H3>Purpose:</H3> The purpose of the data classes described in this section is to establish a searchable directory of the zebrafish research community and their publications. It should provide community members with ways of finding out who their colleagues are, where they are currently working, what work they are doing and have done in the past, and how to contact them. For example, having just read a journal paper, a researcher might use the database to find other papers that author has published or to locate and contact one of the authors to ask questions, request materials, etc. 
			
<P>			From the standpoint of the database project, a main goal of maintaining this information is to support the EXPERIMENTAL DATA (see Section II) contained in the database more robustly. For example, when a researcher submits information about a new gene or mutant to the database, it is much more useful (and secure) to tag the new data item with a pointer to the submitter’s record in the PERSON catalog, rather than merely tagging it with the submitter’s name. That way a researcher later viewing the gene or mutant could follow up by asking the database for the submitter’s current contact information, subsequent publications, etc.
			
<P>			To support these activities, two primary types of data are maintained:
<P>			1) Data about people or places. The generic SOURCE class and its subclasses, PERSON, LAB, and COMPANY, catalog all of the research groups and sources within the zebrafish community. 
<P>			2) The PUBLICATIONS class catalogs all of the publications that have been produced by the community. 

	<H3>NOTES:  </H3>
<BR>
<H2>Abstract Class:  SOURCE</H2>

	<P><B>Role:</B>  The abstract category, SOURCE, defines a common superclass for the classes PERSON, LABS, and COMPANY. This abstraction is valuable because in some cases , such as identifying the source of a mutant, RNA probe, marker, etc., users want to specify <I>either</I> a person, lab, or company as the source, depending on which is more practical. 
	
<P>	<B>How entered:</B>  There are no actual SOURCE records; they serve purely as an abstract class in which we specify attributes and functionality common to the PERSON, LABS, and COMPANY classes. That is, records of PERSON, LABS and COMPANY, rather than SOURCE exist in the database.
	
<P>	<H4>Superclasses: GENERIC_OBJECT</H4>
	
	<H4>OVERVIEW:</H4>
<BR>

<img src="fig3.gif">

<BR>
<H4>ATTRIBUTES:</H4>
<P>	<B>Full_name (TEXT, REQUIRED).</B>  Contains a PERSON’s full name. The format is constrained to be “LAST, FIRST, INITIALS”; it is important to follow this format to streamline searching and printing. If desired, the PERSON may provide full middle names rather than just initials. No validation (e.g. to be sure source really exists) is performed, because entry of new PERSON, LAB, and COMPANY records are done only by DB Admin.  Name can be altered only by DB Admin.
<P>	<B>address  (TEXT, REQUIRED). </B>Holds SOURCE surface mail address, as determined by user (i.e. could be home, work, whatever). No validation is performed by system. A SOURCE can update this field remotely.
<P>	<B>phone (TEXT, OPTIONAL). </B> Holds SOURCE’s telephone. No validation. A SOURCE can update this field remotely.
<P>	<B>fax  (TEXT, OPTIONAL).</B>  Holds SOURCE’s Fax number. No validation. A SOURCE can update this field remotely.
<P>	<B>email (TEXT, OPTIONAL).</B> Holds SOURCE’s email. No validation. A SOURCE can update this field remotely.
<P>	<B>URL (TEXT, OPTIONAL).</B> Holds a SOURCE’s home page URL. No validation. A SOURCE can update this field remotely.
<P>	<B>logo (IMAGE, OPTIONAL).</B> Holds a GIF image (1.5"x 1.5", <50k) supplied by the source. In the case of a PERSON, it is presumably a picture of the person, for COMPANY or LAB is usually a logo. If no logo is supplied, then the database uses a default image.
	
<H3>Open Issues/Questions:  </H3>
<BR>
<BR>
<H2>Class:  PERSON</H2>

<P>	<B>Role:</B>  The PERSON Class captures contact information on past and current members of the zebrafish community. It can not be considered formally as a complete set of researchers relevant to the community, because new members appear continually and frequently, and because many papers are co-authored by people who are not really in the zebrafish community. Thus, for instance, not all persons (e.g. co-authors who work on other systems) listed as PUBLICATION authors occur as PERSONs
	
<P>	<B>How entered: </B> The vast majority of PERSONs are entered by DB Admin from existing contact lists maintained by the Institute of Neuroscience. New PERSON entries are also generated (if necessary) when a person submits a request for an authorization code, which is needed to enter data. Even people who are not registered submitters may appear in the PERSON list; they email a request to the DB Admin.
	
<P>	<B>Security: </B> Only the DB Admin is able to add and delete PERSON records. However, users are allowed to alter all attributes, except their name, to reflect changes in their situation.
<BR>	
<BR>
<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>GENERIC_OBJECT</B></BIG></TD></TR>
<TR><TD></TD><TD><B>SOURCE</B></TD><TD>	name, address, phone, fax, email, URL</TD></TR>
</TABLE>
			
<H4>ATTRIBUTES :</H4>
	<P><B>name (TEXT, REQUIRED). </B> Holds the MEDLINE format of the person’s name (i.e. what you see in a MEDLINE paper author list); this is to support automated connection of new publications to existing authors. 
<P>	<B>nicknames (TEXT, OPTIONAL).</B> Contains a semicolon separated list of alternate names for the individual. The goal is to track individuals who use a pen name, alternative spellings, or whose name has changed due to marriage or other circumstances. 
<P>	<B>bio (TEXT, OPTIONAL).</B> Holds a person’s biographical sketch. This attribute is not filled in when the new PERSON entry is initially created; it is the responsibility of the person to connect to the database and provide this information to update his/her record. No validation.
<P>	<B>nonZF_pubs (TEXT, OPTIONAL).</B> A text field in which a PERSON may list other non-zebrafish publications they have produced. Though no formatting is enforced, we presume (and perhaps should recommend) that people type in semicolon-separated citations in standard MEDLINE format. Provides an essentially non-searchable place for people to list non-zebrafish publications. 

<H4>IMPLICIT ATTRIBUTES :</H4>
<P>	<B>publications: </B> All PERSONs are cross-indexed to the PUBLICATIONs which they have authored. This is implemented using the “intersection table” PERSON-PUB (see section IV), which allows a PERSON’s list of publications to be constructed dynamically. No explicit list of publications needs to be maintained in a PERSON’s record. 
<P>	<B>lab: </B> All PERSONs  are cross-indexed with the LABs in which they work. This allows each PERSON to be a member of zero or more LABs. Again, this is implemented using the intersection table PERSON-LAB, so that no explicit tracking of LAB is required in the PERSON data record.

<H3>PRIVATE ATTRIBUTES (System only)</H3>
<P>	<B>login (CHAR(8), OPTIONAL).</B> This field contains the persons login name. It is non-NULL only if the person has been registered as an authorized submitter to the database. This field may not contain spaces or other weird characters, and is never publicly displayed.
<P>	<B>password (CHAR(8), OPTIONAL).</B> This field contains the current password of an authorized submitter. It is used by the system to verify authenticity of submissions. The password is assigned when the person becomes an authorized submitter and is given an “account” by the DB admin. This field is never publicly displayed.
<P>	<B>last_submit (DATE, OPTIONAL).</B> This field allows the system to record when the person last entered a submission into the database. This is used to track usage and purge inactive accounts after some period.

<H3>Open Issues/Questions:  </H3>
<P>			•  Do we REALLY want to list the nonZF_pubs field? Could we do away with it, and just assume that people list such pubs on their personal home pages, the URL for which is part of their record? Seems like this approach would be useful from the perspective of avoiding data overload.
<BR>
<BR>
<BR>
<H2><B>Class:  LAB</B></H2>

<P>	<B>Role:</B>  The LAB Class supports a listing of labs that are doing zebrafish research. The goal is to provide users with a means for systematically finding basic information about labs.
	
<P>	<B>How/Who enters:</B>  A new LAB is initially created via a formal request to the DB Admin by the head of the lab. This request includes enough information to create a PERSON entry for each of the lab members. Fields except name, location, and contact person are editable by the contact person for the lab (who essentially “owns”  the record). It is this person’s responsibility to keep the lab information up to date; the DB Admin does not routinely do so but can provide help if necessary.
	
<P>	<B>Security: </B> Only the DB Admin can create (i.e. insert) a new LAB record in the database. Other than DB admin., only the lab contact person can change the editable fields. Accordingly, no error checking or validation of any fields is deemed necessary.
<BR>	
<BR>
<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>GENERIC_OBJECT</B></BIG></TD></TR>
<TR><TD></TD><TD><B>SOURCE</B></TD><TD>	name, address, phone, fax, email, URL</TD></TR>
</TABLE>
			
<H4>ATTRIBUTES:</H4>
<P>	<B>nonZF_pubs (TEXT, OPTIONAL).</B> Contains unformatted text references to other non-zebrafish publications the LAB has produced, that is, publications that are not, and should not be in the database. 
	<P><B>contact person (ZDB ID#, REQUIRED).</B> Contains a reference to the researcher who is the public liaison for the lab. This is usually the head of the lab. In any case, this is the person responsible for updating the LAB information; this is the only other person (besides the DB Admin) who may change the editable attributes of the lab.
	
<H4>IMPLICIT ATTRIBUTES:</H4>
<P>	<B>members.</B>  A list of a LABs current members is dynamically constructed by way of the PERSON-LAB intersection table (see section IV). Note that this implies that all lab members who want to be listed must be known as PERSONs to the system. A mechanism is provided to allow the designated contact person to update the lab membership.
<P>	<B>publications. </B>By joining across the PERSON-PUB and PERSON-LAB intersection tables, the database dynamically constructs the list of publications produced by a LAB.

<H3>Open Issues/Questions:  </H3>
<P>			•  Should we really allow the LAB’s contact person to update members remotely? Makes sense, but is a bit out of step with our general and very conservative policy of routing all changes to data through the DB Admin.
<BR>
<BR>
<BR>
<H2>Class:  COMPANY</H2>

<P>	<B>Role: </B> The COMPANY Class supports a listing of companies that produce various biological materials like dyes, probes, and markers. The goal is to provide users a way of finding basic information they need to contact a specific company to order materials. 
	
<P>	<B>How/Who enters:</B>  A new COMPANY is initially created via a formal request to the DB Admin. This request would likely be generated when someone attempts to add a new labeling reagent or commercially available marker to the database, but then finds that the company that produces that reagent is not yet in the database. It is expected that such occasions are quite rare, because the number of such companies is relatively small and stable. 
	
<P>	<B>Security: </B> Only the DB Admin can create (i.e. insert) a new COMPANY entry into the database, so no error checking or validation of any fields is deemed to be necessary.
	
<BR>	
<BR>
<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>GENERIC_OBJECT</B></BIG></TD></TR>
<TR><TD></TD><TD><B>SOURCE</B></TD><TD>	name, address, phone, fax, email, URL</TD></TR>
</TABLE>
			
<H4>ATTRIBUTES:</H4>
<P>	<B>Description (TEXT, OPTIONAL).</B> Holds a brief text description of the company, its history and its mission. Could be supplied by the company, or extracted from a sales brochure.
<P>	<B>contact person (ZDB ID#, REQUIRED).</B> Holds a reference to a PERSON who is responsible for maintaining the company’s information on the server. For instance, this user could change the COMPANY’s URL or mailing address.
	
	
<H3>Open Issues/Questions:  </H3>
			•  
<BR>
<BR>
<BR>
<H2> Class:  PUBLICATION</H2>

<P>	<B>Role: </B> The PUBLICATION class implements a bibliographical database for zebrafish research articles. The goal is to catalog publications that are related to other data contained in the database (i.e. listing where those data were formally published), as opposed to providing a fully functional bibliographical database.  The PUBLICATION class allows advanced searching and browsing. 
	
<P>	<B>How/Who enters: </B> There are two ways in which new PUBLICATION records are created. First, DB Admin downloads, processes, and locates references electronically from various commercial and private sources, and incorporates those into the publications database. For example, DB Admin retrieves publications from a publication service, then augments these with abstracts from MEDLINE when they become available.
			
<P>Second, authorized contributors may, if necessary, email a request to the DB Admin asking to have specific publications (presumably related to the data they are submitting) entered into the database. This would happen if a submitter is unable to find the publication in the PUBLICATION database which documents a piece of data being submitted (i.e. the database is incomplete). See Appendix for details on how to enter missing publications.
	
<P>	<B>Security: </B> All new publications are entered into the database by the DB Admin. See Appendix for details on entering missing publications. This avoids a number of security as well as accuracy problems. Anytime someone (e.g. in the course of submitting some related data) finds that a publication is missing from the database, they can e-mail the DB Admin the relevant information in a request to have a new PUBLICATION added.
<BR>
<BR>	
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>GENERIC_OBJECT</B></BIG></TD></TR>
			
<H4>ATTRIBUTES:</H4>
<P>	<B>authors (TEXT, REQUIRED). </B>Contains the MEDLINE format author list. Note that a PUBLICATION is connected with the PERSON records of authors dynamically, via the PERSON-PUB intersection table.
<P>	<B>date (DATE, REQUIRED). </B>Holds the date that the paper was published. 
<P>	<B>title (TEXT, REQUIRED). </B> Gives the formal title of the work. No validation.
<P>	<B>source (TEXT, REQUIRED). </B>Describes the journal or other forum in which the paper was originally published. The system expects source information to be entered in standard MEDLINE format (although it is unclear to what extent we can enforce this).
<P>	<B>keywords (TEXT, OPTIONAL).</B> A semicolon-separated list of key words or phrases that are used to index and access the citation.
<P>	<B>abstract (TEXT, OPTIONAL). </B>Holds a short (350 words or less) description of the publication, presumably the abstract of the piece.
<P>	<B>content (URL, OPTIONAL).</B> May contain a hyperlink to either (a) a WWW site (e.g. belonging to author or some publisher) where the actual paper is available in electronic form or (b) a Postscript version of the article, which would be downloaded to one’s own client for viewing or printing. 
<P>	<B>News and Views (TEXT, OPTIONAL).</B>  Contains citations to other publications which have subsequently published rebuttals, commentaries, or other discussion on this specific publication.
<P>	<B>Errata and Notes (TEXT, OPTIONAL).</B>  Contains a text paragraph describing any errata associated with the publication. 

<H3>Open Issues/Questions:  </H3>
<P>			• We have said that only the DB Admin can create or edit the PUBLICATION records. Is this realistic? In particular, can we expect DB Admin to stay abreast of all the errata, News and Views for<I> every</I> article in the database?
<P>			• It would be nice to put the actual text of the publication in here as well, possibly minus figures. This is a bad idea, because if the entry contains ONLY plain text all formatting, fonts, etc., are lost. Better to have a link to the postscript version that can be downloaded and printed locally. On the other hand, there is no reason that the link couldn’t point to an HTML version that the author or publisher has made available on some site. In sum, having an HTML hyperlink in this field seems to allow maximum flexibility. 
<BR>
<BR>
<BR>
<H1>SECTION II:  Experimental Data</H1>

<P>	<B><H3>Purpose: </H3></B> The data classes described in this section represent the heart of the database project; they intend to capture experimental data and to organize and render it accessible to researchers in the community. 
			
<P>			A distinguishing feature of the data classes described in this section is that they all allow new records to be added remotely by authorized submitters around the world. For example, a researcher in Tübingen (who has previously become an authorized submitter) who has just discovered a new mutant strain could connect to the database and submit a new MUTANT record describing the new strain, before or regardless of whether the new mutant ever becomes officially known through the regular publication process. In this way, researchers in the zebrafish community can share new and unpublished information much more rapidly than through traditional channels.
			
<P>			The information captured in the data classes described in this section are abstractly organized as follows:
	
<P>			1) <B>Genetic Map Data. </B> Descriptions of genes and map markers that define the zebrafish genetic map.
<P>			2) <B>Stock information.</B>  Descriptions of the strains of fish that have been developed to date in the zebrafish community, including information on where each strain is currently available.
<P>			3) <B>Label information.</B>  Descriptions of cell and tissue labels and stains that have been developed and characterized.
<P>			4) <B>Experimental Results.</B>  Data in this group include mostly photographic images, but also includes other types of data like graphs and electrical measurements.
	
<P>			Importantly, the data in each of these groups are carefully organized and indexed, allowing users to pose abstract queries to extract precisely those data records of interest to them.
	
<P>	<H3><B>NOTES:</B></H3>  The relationships among these classes of data are not completely established yet.  This section is still under development.
<BR>
<BR>
<BR>
<H2>Abstract Class:  DATA_ITEM</H2>

<P>	<B>Role:</B>  The purpose of the abstract class DATA_ITEM is to represent the attributes and functionality that are common to many of the data items that authorized users submit to the database. For instance, all such items come from some SOURCE.
<P>	<B>How/Who enters:</B>  Because this is an abstract class, there are no instances of DATA_ITEM instantiated. See the descriptions for the subclasses for further information.
<P>	<B>Security: </B> Only authorized submitters are allowed to add new records of any subclass of DATA_ITEM to the database; as always, submissions are tagged with the time and the identity of the submitter. 
	
<BR>
<BR>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>GENERIC_OBJECT</B></BIG></TD></TR>
	
	<H4>OVERVIEW:</H4>
<BR>

<img src="fig4.gif">

<BR>
<H4>ATTRIBUTES:</H4>
<P>	<B>comments (TEXT, OPTIONAL). </B>Contains arbitrary text that further describes the DATA_ITEM, how it was found or derived, or other comments. It may also direct readers to publications or interesting discussions that the submitter feels are of particular interest. This field may be remotely changed by the original submitter.
<P>	<B>primary_pub (PUBLICATION), OPTIONAL).</B> Contains a pointer to the first or primary publication in which this DATA_ITEM was described. If this field is NULL, it is assumed that the DATA_ITEM is as yet unpublished. 
<P>			THIS FIELD NO LONGER PHYSICALLY EXISTS. With the addition of the DATA-PUBS intersection table, this function is accomplished by adding another entry to that table, marked as the first (primary) publication for the given data item. 
<P>	<B>related_pubs  (listof (PUBLICATION), OPTIONAL).</B> Contains a semicolon-separated list of references to other publications related to the DATA_ITEM in question. 
	<P>		THIS FIELD NO LONGER PHYSICALLY EXISTS. With the addition of the DATA-PUBS intersection table, this function is accomplished by adding more entries to that table, marked as the related (secondary) publications for the given data item.  This field may be remotely changed by the original submitter to reflect new publications.
<P>	<B>record_status (TEXT,REQUIRED). </B>This attribute is maintained by the system, and can be used to mark a data item as “viable”, “updated”, or “withdrawn”. This allows the maintenance of older or erroneous data, so that people can still retrieve it and note its non-viable status.
	
<H3>Open Issues/Questions:  </H3>
	•  Sometimes probes derived from genes in other species are used.  Thus, the primary_pub would not be listed in PUBLICATIONS.
<BR>
<BR>
<BR>
<H2>OVERVIEW: Representation of Map Markers</H2>

<H3>Introduction:</H3>
<P>The notion of “map markers” broadly includes any genetic material that can be used to sort the genotype of the offspring of a cross, including cloned genes, RAPDs, SSCPs, RFLPs, STSs, ESTs, and mapped mutations.  The schema we have constructed to represent this information has become somewhat abstract, moving away from a one-to-one correspondence between the above entities and representative data classes. Rather, we have a more general, distributed representation of genetic information which capitalizes efficiently on the commonalties of these components. A given gene, for instance, is not represented as a single record in some GENE table, but is dynamically generated by drawing the information associated with that gene from several closely-related tables. The main advantages of this approach is that it allows us to (a) representationally factor out entities (e.g. sequences) common to all Map Markers and (b) avoid the abundance of NULL fields that would result in many records from forcing the various kinds of map markers into one or two general data classes.

<H3>Schematic Overview:</H3>
<BR>

<img src="fig5.gif">

<BR>
<H4>Discussion:</H4>

<P>As indicated in the above diagram, the data model supports description of three related categories of map markers: <B>Cloned Genes, ESTs, and generic map markers. </B>

<P><B>Generic Map Markers</B> represent all markers that are not cloned genes or ESTs; namely, RAPDs, STSs, RFLPs, and SSCPs. In terms of content, Generic Map Markers are created by instantiating the MAP_MARKER class, which captures information associated with all map markers (i.e., there are no attributes that generic map markers have that are not shared by cloned genes and ESTs as well). As shown in the above diagram, generic map markers must have exactly one AMP_PRODUCT associated with them, which describes the primer(s) that define the marker. They do not have any sequence records associated with them.

<P><B>Cloned genes</B> represent pieces of genetic material known to contain genes. As shown in the data hierarchy schematic (see DATA ITEM class description), cloned genes contain a variety of specialized information in addition to the information shared by all map markers; new cloned genes are created by instantiating the CLONED_GENE class described in the following pages. As shown in the diagram above, cloned genes may have from zero to N ORTHOLOG records associated with them, documenting orthologous relationships to other species. They may also have between zero and three SEQUENCE records associated with them, to represent cDNA, genomic, and protein sequences which may be known for the cloned gene. They may have any number of AMP_PRODUCTs associated with them (if amplification rather than gene expression was used to segregate the marker), listing the various primer sets useful for segregating the marker.

<P><B>ESTs</B> are generated from pieces of cDNAs. In many ways, they are very similar to cloned genes, except that it is unknown whether these pieces actually contain one or more genes, i.e., genetic material that codes for some phenotypic feature. As indicated in the above schematic, they may have a SEQUENCE record associated with them to represent their EST sequence, if known. Like cloned genes, they may have any number of AMP_PRODUCTs associated with them to describe the primer(s) used to segregate the marker.

<P>The schematic above also illustrates the relationship between map markers and the primers used to segregate them. The notion of amplification product, or AMP_PRODUCT, is introduced as a way of grouping primers because two primers are often used to generate a marker. In this case, it is useful to know (and perhaps search on) the size of the amplification produces (i.e. bands) produced by a given pair of primers. Thus, a given map marker is associated with an amplification product which, in turn, identifies the primer(s) used to generate the marker.

<P>The following hierarchical schema reviews the data structures used to capture the concepts described above. Note that some of the attributes shown are purely conceptual; they do not exist physically within a given data record, but rather are stored in a separate structure and associated dynamically (via joins).
<BR>

<img src="fig6.gif">

<BR>
<P>Each of the data classes listed in this overview is described in more detail in the following pages.
<P>
<H2>Class:  MAP_MARKER</H2>

<P>	<B>Role: </B> The purpose of this class is to capture information that is common to all kinds of map markers (with the exception of mapped mutations which are represented by the CHROMOSOME and ALTERATION classes). Thus, this class represents data attributes that are shared by cloned genes, ESTs, RAPDs, SSCPs, RFLPs, and STSs. The CLONED_GENE and EST classes extend this class (as subclasses) to include information specific to, respectively, cloned genes and ESTs. The remaining markers (i.e. RAPDs, STSs, RFLPs, and SSCPs) are represented by directly instantiating the MAP_MARKER class, because all their are included in this class.
	
<P>	<B>How/Who enters:</B>  Initially, the DB Admin enters all known map markers. Authorized submitters are also allowed to create and enter new MAP MARKER records into the database.
	
<P>	<B>Security:</B>  Only authorized submitters are permitted to enter new MAP MARKERS and update existing ones. Exceptions are the primary_pub, record_status, and name fields which, once specified, can be changed only via the DB Admin.
<BR>
<BR>
<BR>
<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>GENERIC_OBJECT</B></BIG></TD></TR>
<TR><TD></TD><TD><B>DATA_ITEM</B></TD><TD>comments, primary_pub, related_pubs, record_status</TD></TR>
</TABLE>
			
<H4>ATTRIBUTES:</H4>
<P>	<B>name (TEXT, REQUIRED).</B> Contains the full text name of the map marker. 
<P>	<B>marker_type (closed set:  cloned gene, EST, SSCP, RAPD, RFLP, STS).</B> Selected from the closed set listed here, this field identifies the type of the marker. This attribute is useful both to users, to constrain searches, and to the interface, to determine how to display a given marker (i.e., may vary by marker type).
<P>	<B>map_location (TEXT, OPTIONAL). </B>Describes the genetic map location of the map marker, if known. As with other map locations, users may enter the actual data from mapping crosses, with the location computed from that data to periodically update this field, or they may enter the location derived from their results.
<P>	<B>discoverer (TEXT, OPTIONAL). </B> The ZDB_ID of the person who discovered the marker.
<P>	<B>amp_product (AMP_PRODUCT). </B>THIS FIELD DOES NOT PHYSICALLY EXIST IN THIS RECORD; it is generated by joining with AMP_PRODUCT. With the exception of cloned genes and ESTs, which may<I> sometimes</I> have amplification products associated with them, all map markers must have an AMP_PRODUCT record associated with them, specifying the primer(s) used to segregate the marker.

<H3>Open Issues/Questions:</H3>  
<P>			•  Still not clear how to handle map location! Are mapping crosses entered or not? Is “MAPPING_CROSS” another data category? Where would one expect to enter such data in the interface? Can we compute the “average” location based on such cross data? How often should we recompute?


 <H2>Class:  CLONED_GENE</H2>

<P>	<B>Role:</B>   The CLONED_GENE class extends the MAP_MARKER class to represent additional information specifically relevant to cloned genes. 
	
<P>	<B>How/Who enters:</B> Currently known cloned genes are entered initially by the DB Admin. In the future, it is expected that authorized submitters will add new cloned genes and update or flesh out information in existing records.  
	
<P>	<B>Security: </B> Only authorized submitters are allowed to add new CLONED_GENE records to the database; as always, submissions are tagged with the time and the identity of the submitter. Changes to abbreviation and allele constitute nomenclature changes and must be handled via requests to the DB Admin. All other fields may be updated by authorized submitters.
<BR>
<BR>
<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>GENERIC_OBJECT</B></BIG></TD></TR>
<TR><TD></TD><TD><B>DATA_ITEM</B></TD><TD>comments, primary_pub, related_pubs, record_status</TD></TR>
<TR><TD></TD><TD><B>MAP_MARKER</B></TD><TD>name, marker_type, map_location, amp_product</TD></TR>
</TABLE>
			
<H4>ATTRIBUTES:</H4>
<P>	<B>abbreviation (TEXT, REQUIRED). </B>This field holds the abbreviated name of the cloned gene. It is up to the submitter to provide an abbreviation that conforms to established conventions; the system checks to be sure the abbreviation is unique.
<P>	<B>allele (TEXT, REQUIRED).</B> This field holds the unique designation for the allele cloned. Is null if the sequence in question is the wild-type.
<P>	<B>source (SOURCE, OPTIONAL). </B>This field holds the ZDB_ID# of a SOURCE (i.e. person, lab, or company) from which the cloned gene is currently available.
<P>	<B>cDNA sequence, protein sequence, genomic sequence (SEQUENCE, OPTIONAL). </B>THIS FIELD DOES NOT EXIST PHYSICALLY; the association is established by joining with the SEQUENCE class. Each cloned gene may have one each of genomic, protein, and cDNA sequence records associated with it.
<P>	<B>orthologs (ORTHOLOG, OPTIONAL).</B> THIS FIELD DOES NOT EXIST PHYSICALLY IN THIS RECORD; the association is established by joining with the ORTHOLOG table. A cloned gene may have any number of ORTHOLOG records associated with it, one for each species with which an orthologous relationship has been established.
<P>	<B>expr_pattern (text, REQUIRED).</B> A rigid and compact summary of the expression pattern, to be used to support searches. The format is (PART, STAGE-start, STAGE-end), where the values for this set are determined by presenting the user with the following interface: “Please summarize the expression pattern of this gene: Expressed in <PART> from stage <STAGE-start> to <STAGE-end>.”
			
<H3>Open Issues/Questions:  </H3>
<P>			•  Should we try to enforce conventions for naming alleles and coming up with abbreviations? Currently, people are allowed to enter any text string.
<BR>
<BR>
<BR>
<H2>Class:  EST</H2>

<P>	<B>Role:</B>   The EST class extends the MAP_MARKER class to represent additional information specifically relevant to ESTs. Because ESTs may later shown to be bonafide genes, it is important to support easy migration of EST to a full-fledged cloned-gene record, or connection of an EST record with an existing cloned_gene.
	
<P>	<B>How/Who enters: </B> Currently known ESTs are entered initially by the DB Admin. In the future, it is expected that authorized submitters will add new ESTs and update or flesh out information in existing records.  
	
<P>	<B>Security:</B>  Only authorized submitters are allowed to add new EST records to the database; as always, submissions are tagged with the time and the identity of the submitter. Changes to abbreviation and allele constitute nomenclature changes and must be handled via requests to the DB Admin. All other fields may be updated by authorized submitters.
<BR>
<BR>
<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>GENERIC_OBJECT</B></BIG></TD></TR>
<TR><TD></TD><TD><B>DATA_ITEM</B></TD><TD>comments, primary_pub, related_pubs, record_status</TD></TR>
<TR><TD></TD><TD><B>MAP_MARKER</B></TD><TD>name, marker_type, map_location, amp_product</TD></TR>
</TABLE>	
			
<H4>ATTRIBUTES:</H4>
<P>	<B>cloned_gene (CLONED_GENE, OPTIONAL). </B>In time, it may be established that a sequence originally generated as an EST is a gene. When this happens, the EST is “migrated” into a new CLONED_GENE record. In this case, the EST record remains, but this field contains the ZDB_ID of the CLONED_GENE that the EST gave rise to. Alternatively, if the EST is found to correspond to a known gene, then the ZDB_ID of that cloned gene is used as a pointer to that information.
<P>	<B>source (SOURCE, OPTIONAL).</B> This field holds the ZDB_ID# of a SOURCE (i.e. person, lab, or company) from which the EST is currently available.
<P>	<B>EST-seq (SEQUENCE, OPTIONAL). </B>THIS FIELD DOES NOT EXIST PHYSICALLY; the association is established by joining with the SEQUENCE class. Each EST may have at most one SEQUENCE record associated with it, with seq_type=EST.
	

<H3>Open Issues/Questions:  </H3>
<P>It is not clear how to handle the interface for migrating an EST to a CLONED_GENE.
 <BR>
<BR>
<BR>
<H2>Class:  ORTHOLOG</H2>

<P>	<B>Role:</B>   The ORTHOLOG class was established to represent, in a limited fashion, orthologies between zebrafish and other organisms. Each ORTHOLOG record represents one such relationship, associating a particular cloned gene in zebrafish with its ortholog in another organism. Rather than listing just the name of the ortholog in the other organism, we also want to “cache” some additional information about it like, for example, its map location and its accession number to the database for the other species. This information would be regularly and automatically updated.
	
<P>	<B>How/Who enters:</B>  Currently known ORTHOLOGS are entered initially by the DB Admin. In the future, it is expected that authorized submitters will describe new orthologs and update or flesh out information in existing records.  
	
<P>	<B>Security:</B>  Only authorized submitters are allowed to add new ORTHOLOG records to the database; as always, submissions are tagged with the time and the identity of the submitter. Only the related_pubs of an existing ORTHOLOG may be changed; all other changes must go through the DB_Admin.
<BR>
<BR>
<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>GENERIC_OBJECT</B></BIG></TD></TR>
<TR><TD></TD><TD><B>DATA_ITEM</B></TD><TD>comments, primary_pub, related_pubs, record_status</TD></TR>
</TABLE>

<H4>ATTRIBUTES:</H4>
<P>	<B>marker_id (CLONED_GENE, REQUIRED). </B>Contains the zdb_id of the CLONED_GENE in zebrafish to which the gene represented in this ORTHOLOG record is orthologous. 
<P>	<B>organism (closed list{human, pig, mouse, etc.}, REQUIRED).</B> Specifies the organism in which the ortholog represented by this record exists. Options are chosen from a closed set of organisms.
<P>	<B>ortho_name (TEXT, REQUIRED). </B>Gives the (current) name of the orthologous gene in the other organism.
<P>	<B>accession_num (TEXT, OPTIONAL).</B> If the research community for the specified organism has a database, this field holds the accession number for the record of the orthologous gene in that database. This allows users to “jump” to the other database to view the actual data record for the orthologous gene.
	
<H3>Open Issues/Questions:  </H3>
<P>			•  Should the set of possible organisms be closed, or should we just let users type in something freely? PRO(free): flexibility. PRO(restrained): we can account for all possible options in advance. 
<BR>
<BR>
<BR>
<H2>Class:  SEQUENCE</H2>

<P>	<B>Role: </B>  The purpose of the SEQUENCE class is to represent all types of sequence information that may be associated with various map markers, with the exception of primer sequences which have their own (simplified) data type. That is, rather than making the actual text sequences physically part of each such record, all sequences are stored in a separate table and associated with the appropriate map marker through a join operation. Only one SEQUENCE record of a given seq_type can be associated with a given map marker. Other restrictions may apply as well, e.g., you would not expect to associate a sequence with a RAPD.
	
<P>	<B>How/Who enters:</B>  Currently known SEQUENCES are entered initially by the DB Admin, as part of entering the information for known map markers. In the future, it is expected that authorized submitters will add/update SEQUENCES in the course of describing various map markers.  
	
<P>	<B>Security:</B>  Only authorized submitters are allowed to add new SEQUENCE records to the database; as always, submissions are tagged with the time and the identity of the submitter. Additions to related_pubs are allowed, as usual, but all other fields can be changed only by DB_Admin once the submission has been made.
<BR>
<BR>
<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>GENERIC_OBJECT</B></BIG></TD></TR>
<TR><TD></TD><TD><B>DATA_ITEM</B></TD><TD>comments, primary_pub, related_pubs, record_status</TD></TR>
</TABLE>
			
<H4>ATTRIBUTES:</H4>
<P>	<B>marker_id (CLONED_GENE, REQUIRED).</B> Contains the zdb_id of the CLONED_GENE which this SEQUENCE record describes. 
<P>	<B>seq_type ( closed list{protein, genomic, cDNA, EST}, REQUIRED). </B>Describes the type of sequence that is described in this SEQUENCE record. 
<P>	<B>sequence ( TEXT, REQUIRED).</B> The actual sequence, i.e., a list of base pairs.
<P>	<B>genbank_num (TEXT, REQUIRED).</B> Contains the GENBANK accession number for the sequence. The fact that this field is required implies that we accept only sequences that have been submitted to GENBANK.
<P>	<B>start_codon (integer, OPTIONAL). </B>Integer that locates the start codon within the sequence
<P>	<B>stop_codon (integer, OPTIONAL). </B> Integer that locates the stop codon within the sequence.
<P>	<B>introns (TEXT, OPTIONAL). </B>Contains a comma-separated list of integers that describe the intron locations in the sequence.
	
<H3>Open Issues/Questions:  </H3>
<P>			•  How long are the strings of base pairs that we want to put in sequence attribute? Need to make sure it isn’t higher than limit for TEXT data type.
<P>			• Are we going to check the validity of the GENBANK number they give us dynamically?
<P>			• How to handle updates to the sequence stored in GENBANK --> if we are caching the actual sequence, we have an updating/consistency problem. TED: Don’t cache it, get it dynamically each time. ECK: let’s cache and find a way to make updates automatically.
<BR>
<BR>
<BR>

 <H2>Class:  AMP_PRODUCT</H2>

<P>	<B>Role:</B>   The AMP_PRODUCT class represents groups of primers used to generate various map markers. The reason for introducing the notion of amplification products rather than referring to the primers directly from the map marker is to represent the fact that, in many cases, such primers are used in pairs; paired usage should be evident to someone doing a search on primers. It also allows us to represent the band size produced by such pairings. For map markers for which the amplification product consists of a single primer rather than a pair, the reverse_primer and band_size fields remain NULL. A given map marker (identified by marker_id) may have one and only one AMP_PRODUCT record associated with it.
	
<P>	<B>How/Who enters:</B>  Currently known amplification products (and information on the primer sequences they consist of) are entered by the DB_Admin in the course of entering information about existing map markers. In the future, it is expected that authorized submitters will add new AMP_PRODUCTS as they add or update map marker information.  
	
<P>	<B>Security: </B> Only authorized submitters are allowed to add new AMP_PRODUCT records to the database; as always, submissions are tagged with the time and the identity of the submitter. Once submitted, only additions to the related_pubs field are allowed; all other changes go through the DB_Admin.
<BR>
<BR>
<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>GENERIC_OBJECT</B></BIG></TD></TR>
<TR><TD></TD><TD><B>DATA_ITEM</B></TD><TD>comments, primary_pub, related_pubs, record_status</TD></TR>
</TABLE>
			
<H4>ATTRIBUTES:</H4>
	<B>marker_id (CLONED_GENE, REQUIRED).</B> Contains the zdb_id of the CLONED_GENE which this SEQUENCE record describes. 
	<B>forward_primer (PRIMER_SEQ, OPTIONAL). </B>Contains the zdb_id of the PRIMER_SEQ used as the forward primer to generate the map marker identified by marker_id. If this is a RAPD or other marker that requires only one primer to generate, then this field identifies that primer. In rare cases of RFLPs where no primer (or really amplification!) was used in the mapping, both forward and reverse primer could be NULL, with only the band sizes filled in.
	<B>reverse_primer (PRIMER_SEQ, OPTIONAL). </B>Contains the zdb_id of the PRIMER_SEQ used as the reverse primer to generate the map marker identified by marker_id. If this is a RAPD or other marker that requires only one primer to generate, then this field remains NULL.
	<B>band_size (TEXT, OPTIONAL).</B> A comma-separated list of integers which describes the size (in base pairs) of the bands produced by this amplification.
	<B>restr_enzyme (TEXT, OPTIONAL). </B>This text field contains the name of the restriction enzyme used to generate the amplification product. It is NULL if no such enzyme was used.
	
<H3>Open Issues/Questions:  </H3>
			•  
<BR>
<BR>
<BR>
<H2> Class:  PRIMER_SEQ</H2>

<P>	<B>Role: </B>  The PRIMER_SEQ class represents primers used to generate various map markers. Rather than being associated directly with such markers, the primers are identified via AMP_PRODUCTs, which group primers into pairs (where applicable) and which are, in turn, associated with the appropriate map markers. A given AMP_PRODUCT must have at least one and at most two PRIMER_SEQ records associated with it. 
	
<P>	<B>How/Who enters:</B>  Initially, PRIMER_SEQs are entered in the course of entering information on existing map markers, and the AMP_PRODUCT records associated with those markers. In the future, it is expected that authorized submitters will add new PRIMER_SEQs, primarily in the course of entering information about new map markers.
	
<P>	<B>Security:</B>  Only authorized submitters are allowed to add new PRIMER_SEQ records to the database; as always, submissions are tagged with the time and the identity of the submitter. After the initial submission, only the source and  related_pubs fields may be changed by authorized submitters; all other changes must go through the DB_Admin.
<BR>
<BR>
<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>GENERIC_OBJECT</B></BIG></TD></TR>
<TR><TD></TD><TD><B>DATA_ITEM</B></TD><TD>comments, primary_pub, related_pubs, record_status</TD></TR>
</TABLE>	
			
<H4>ATTRIBUTES:</H4>
<P>	<B>name (TEXT, REQUIRED).</B> Contains the name of the primer.
<P>	<B>source (SOURCE, OPTIONAL). </B>This field holds either the ZDB_ID# of a SOURCE (i.e. person, lab, or company) from which the primer is currently available.
<P>	<B>sequence (TEXT, OPTIONAL).</B>  If the primer has been sequenced, this contains a text string that describes the sequence.
	
<H3>Open Issues/Questions:  </H3>
<P>			•  Is sequence really optional? Isn’t the sequence known for all primers?
<BR>
<BR>
<BR>
<H2>OVERVIEW: Mutants and Chromosomes</H2>

<H3>Introduction:</H3> 
<P>Before giving a detailed description of the FISH, CHROMOSOME, and ALTERATION classes, it is useful to characterize how these three classes interact to represent mutant and wild-type strains of fish. 

<H3>Schematic of relationships (ER diagram):</H3>
<BR>

<img src="fig7.gif">

<BR>
<H3>Discussion:</H3>
<P>As indicated in the schematic above, FISH data records correspond directly to mutant and wild-type strains of zebrafish; whenever a new mutant or wild-type line is developed, a new FISH record is be submitted to the database. As detailed in the following pages, FISH records focus primarily on the physical animal (vs. detailed genetic information) — information on a strain’s lineage, availability, who discovered it, etc.. 
<P>The genetic information about a strain is captured in CHROMOSOME records, which correspond directly to mutated chromosomes present in a mutant strain. Note that only <I>mutant</I> chromosomes are represented; FISH records for wild-type strains have no CHROMOSOME records associated with them. Because zebrafish have 25 chromosomes, a given mutant FISH record may have between zero and 25 CHROMOSOME records associated with it. Because most mutants have only one or two mutated chromosomes, it will be rare that a FISH record has more than one or two CHROMOSOME records associated with it. By cross-breeding, a given mutation can be transferred to a new mutant line. In this way, a given CHROMOSOME record may ultimately be associated with many different FISH records. 
<P>Within a mutant chromosome, any number of specific genetic alterations may have occurred which, taken together, result in the mutant phenotype. It may not be known (at least not initially) which of these specific alterations is responsible for various phenotypic characteristics of the mutant. Each of these specific genetic alterations is represented by an ALTERATION record. It is at the ALTERATION level that the specific location and nature of chromosomal changes are recorded.
In sum, FISH records represent mutant and wild-type strains and serve as conceptual “containers” for CHROMOSOME records, which represent mutant chromosomes. In turn, CHROMOSOME records serve as conceptual containers for ALTERATION records, which describe specific changes to chromosomes. 
<BR>
<BR>
<BR>
<H2>Class:  FISH</H2>
<P>	<B>Role:</B>  The FISH class is designed to represent both mutant and wild-type strains of fish. Note that individual generations of a given strain are not represented (i.e. no individual stock numbers); this database is not a stock management resource for a stock center. The idea is that a FISH record represents a particular strain of animal, providing a conceptual container for that animal’s genetic content, namely a corresponding set of CHROMOSOME records that detail the chromosomal abnormalities( if any) of the strain. 
	
<P>	<B>How/Who enters: </B>FISH records may be created and modified by any authorized ZDB submitter, presumably whenever a new strain (mutant or wild-type) of fish is developed. 
<BR><BR><BR>	
<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>GENERIC_OBJECT</B></BIG></TD></TR>
<TR><TD></TD><TD><B>DATA_ITEM</B></TD><TD>comments, primary_pub, related_pubs, record_status</TD></TR>
</TABLE>	

<P>	<B>Security:</B>  Only authorized submitters are permitted to enter new FISH records. Updates to comments and availability are permitted by the owner (original record submitter) only; updates to chromosomes, phenotype, and related_pubs may be entered by any authorized submitter. All other fields are fixed at record creation; changes to these fields must pass through the DB Admin. 
			
<H4>ATTRIBUTES:</H4>
<P>	<B>name (TEXT, REQUIRED).</B>  This field holds the formal name of the FISH. In the case of a MUTANT, it is expected that this name is often the same as the mutant CHROMOSOME(s) carried by the animal.
<P>	<B>abbrev (TEXT, REQUIRED).</B>  The abbreviation that this strain has been assigned. Usually this is the same as the name of the mutant chromosome, except in the case of double-mutations, where both name and abbreviation are usually a concentration of mutation names. 
<P>	<B>line_type (TEXT, REQUIRED).</B> This field is constrained to be either “mutant” or “wild-type” and must be specified for all records. The majority of records are MUTANT; very few will be wild-type.
<P>	<B>source (TEXT, OPTIONAL).</B> This field contains the ZBD_ID of the SOURCE (i.e. PERSON, LAB, or COMPANY) which currently is able to this strain record provide (living or frozen). Alternatively, the field may contain the key word “DEAD”, signifying that the strain in question is no longer available.
<P>	<B>mother (FISH, REQUIRED). </B>Contains the ZDB_ID of the FISH record of the animal contributing the paternal genetic material.
<P>	<B>father (FISH, OPTIONAL).</B> Contains the ZDB_ID of the FISH record of the animal contributing the maternal genetic material. Could be NULL for clonal lines.
<P>	<B>discoverer (SOURCE, REQUIRED).</B> Contains the ZBD_ID of the SOURCE (i.e. PERSON, LAB, COMPANY) that initially generated this strain. It is NOT necessarily the same as the fish_status attribute, which points to where one can currently acquire the strain.
<P>	<B>lab (TEXT, required). </B>  Specifies the LAB that generated the mutation.  Labs must have an allele designation letter.  Each letter corresponds to a particular LAB.  Letter can be obtained by contacting the DB Admin.
<P>	<B>phenotype (TEXT, OPTIONAL). </B> By default, the phenotype of a FISH strain is defined by the sum of the phenotypes described in the mutant CHROMOSOME and ALTERATION records associated with the FISH record.  However, there may be times when mutations <I>interact</I> (i.e. suppressers/enhancers) when present in the same animal. The purpose of having a separate phenotype field with the FISH record is to allow description of such interactions. Even if there is, in practice, some redundancy between the phenotype fields in the FISH, CHROMOSOME, and ALTERATION levels, this is not a problem.
<P>	<B>segregation (TEXT, OPTIONAL).</B> The attribute is only relevant for mutant FISH, and details how the mutation segregates in each generation.
<P>	<B>orig_crossnum (TEXT, OPTIONAL). </B>If applicable, holds the number used by the originating lab to label the original cross that produced the fish. This information is crucial for tracking down historical information about the fish (e.g. original lab notes).

<H4>Related Info:</H4>
<P>	The table int_fish_chromosome is used to associate fish with the chromosomes that they carry.

<H3>Open Issues/Questions:  </H3>
<P>			<B>Note:</B> The stock# attribute was removed 5/24/96 after Monte and Eck decided that we do not want to keep track of every single tank full of fish using ZDB. That is, this isn’t a stock center management database. Rather, we just want to track whole strains of fish.
<P>			• Does it still make sense to have mother and father if we’re no longer talking about individual fish, but about whole strains of fish? Maybe genetic_bkg is enough.
<P>			•	The format for segregation needs to be specified; type of cross, % of mutant progeny, etc.
<BR>
<BR>
<BR>
<H2>Class:  CHROMOSOME</H2>

<P>	<B>Role:</B>  The CHROMOSOME class embodies the basic genetic building block represented in ZDB. It was developed in response to earlier difficulties trying to represent each mutation as a strain of fish, difficulties like dealing with double-mutants. The chromosome-based approach was inspired by the <I>Drosophila</I> community, where the fly mutations (i.e. the Red Book) have long been catalogued in this way.  Note that our model also has a GENE class, but it represents cloned genetic sequences which are not (at least initially) associated with a CHROMOSOME that exists in some strain of fish.
<P>			    As discussed in the preceding overview, CHROMOSOME records are essentially “containers” for ALTERATION records, which detail the specific alterations that have occurred within a given mutant chromosome.
	
<P>	<B>How/Who enters:</B>  Initially, the DB Admin enters available chromosomes. Authorized submitters are allowed to create new CHROMOSOME records and update existing ones.
	
<P>	<B>Security:</B>  Only authorized submitters are permitted to enter new CHROMOSOME records or update them. All fields may be updated by an authorized submitter, with the exception of the primary_pub and name, which are fixed at the time the CHROMOSOME record is created. Of course, changes to these fields may be requested via the DB Admin. 
<BR><BR><BR>			
<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>GENERIC_OBJECT</B></BIG></TD></TR>
<TR><TD></TD><TD><B>DATA_ITEM</B></TD><TD>comments, primary_pub, related_pubs, record_status</TD></TR>
</TABLE>			
			
<H4>ATTRIBUTES:</H4>
<P>	<B>name (text, REQUIRED).  </B>This field holds the official complete name of the mutated CHROMOSOME. For example “no tail”.
<P>	<B>abbrev (text, REQUIRED).</B> This field holds the officially accepted abbreviation for the CHROMOSOME. It is assumed that the name adheres to the conventions established by the zebrafish community; the database will not check the value for correctness. For example, the mutation <I>no tail</I>, is abbreviated as <I>ntl</I>.
<P>	<B>chrom# (INTEGER{1-25}, REQUIRED). </B> Specifies the chromosome number represented by the record. 
<P>	<B>phenotype (text, REQUIRED).</B> A free form textual description of the phenotype associated with the mutant chromosome, including anatomical, developmental, physiological, behavioral aspects. 
<P>	<B>pheno_pattern (text, REQUIRED). </B>A more rigid and compact summary of the mutant phenotype, to be used to support searches. The format is ([GENE] PART, STAGE-start, STAGE-end), where the values for this set are determined by presenting the user with the following interface: “Please summarize the primary phenotypic characteristic of this mutation: Affects [expression of <GENE> in] <PART> from stage <STAGE-start> to <STAGE-end>.”
<P>			MIGHT NOT PHYSICALLY EXIST as an actual field. It is likely that this function will be implemented as EXPRESSION-DATA intersection table, which maps expression to data records (CHROMOSOMES or IMAGES) that match the given phenotype.
<P>	<B>lab (TEXT, REQUIRED. </B>Specification of the lab in which this mutant chromosome was first generated.

<H3>Related Info:</H3>
<P>	The table int_fish_chromosome is used to associate fish with the chromosomes that they carry.
<BR>
<BR>
<BR>
 <H2>Class:  ALTERATION</H2>

<P>	<B>Role:</B>  The ALTERATION class represents specific alterations to a chromosome. One or more ALTERATION records are associated with a given CHROMOSOME record to describe the mutations to a given chromosome carried by a mutant strain of fish. An ALTERATION record describes a specific chromosomal change, e.g., a single insertion, translocation, or point mutation. Initially, much of the information in an ALTERATION may be left blank, to be filled in as further research is done. The phenotype field is particularly difficult to fill because it is difficult to determine the phenotypic contribution of a specific alteration to a chromosome, if there are other alterations on that chromosome as well. Thus, we expect the most important and heavily used phenotypic description to be found in the CHROMOSOME record, with the phenotype of ALTERATIONs filled in only when a chromosome has sustained a single alteration, or in those rare instances in which the phenotypic contribution of an alteration has been established.
	
<P>	<B>How/Who enters: </B> Initially, the DB Admin enters known ALTERATIONS in the course of entering information on currently known mutant chromosomes. Authorized submitters are allowed to create new ALTERATION records in the course of creating or updating CHROMOSOME records.
	
<P>	<B>Security:</B>  Only authorized submitters are permitted to enter new ALTERATION records or update them. All fields may be updated by an authorized submitter, with the exception of the primary_pub, which is fixed at the time the ALTERATION record is created. Of course, changes to this field may be requested via the DB Admin. 
<BR><BR><BR>			
<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>GENERIC_OBJECT</B></BIG></TD></TR>
<TR><TD></TD><TD><B>DATA_ITEM</B></TD><TD>comments, primary_pub, related_pubs, record_status</TD></TR>
</TABLE>
	
<H4>ATTRIBUTES:</H4>
<P>	<B>allele (TEXT, REQUIRED). </B> The official allele designation of this alteration. If an allele consists of more than one alteration (e.g., allele ‘b345’ consists of an insertion AND a translocation), then both alterations have the same allele name.
<P>	<B>mutagen (TEXT, REQUIRED). </B>The mutagenizing agent. Must be one of {ENU, EMS, g-rays, DNA, spontaneous}.
<P>	<B>protocol (TEXT, REQUIRED). </B> The mutagenizing protocol. Describes what was treated with the mutagenizing agent. One of {adult males, adult females, sperm, embryos}.
<P>	<B>chrom_change (Closed Set, REQUIRED).</B> Describes the nature of the mutation. Valid values come from the set {Dp, Df, T, Tp, In, UNKNOWN} standing for Duplication, Deficiency, Translocation, Transposition, Insertion.
<P>	<B>locus (text, OPTIONAL). </B> The name of the locus affected by this mutation.
<P>	<B>genetic_loc (text, OPTIONAL). </B>Gives location in genetic terms.
<P>	<B>cyto_loc (text, OPTIONAL). </B>Gives location of mutation in cytological terms.
<P>	<B>breakpoints (text, OPTIONAL).</B> Two genetic and cytological locations.
<P>	<B>affected_genes (GENE, OPTIONAL).</B> Points to all genes that are known to be affected by this genetic alteration. THIS FIELD DOES NOT EXIST PHYSICALLY; it is an intersection table. Whenever a GENE-SEQ is found to be affected by the mutation described by this CHROMOSOME record, the person that discovers it can update this field, adding the GENE-SEQ to the list of known mutations. 
<P>	<B>potential_genes (GENE, OPTIONAL). </B>Points to all <I>possible</I> genes that could be affected by this alteration. The difference between this attribute and the affected_genes is that the genes in this list are <I>suspected</I> to be affected, but this has not been formally established. THIS FIELD DOES NOT PHYSICALLY EXIST. Rather the information is computed dynamically by comparing the breakpoint information in this record with the genetic locations of GENE-SEQ records. The idea is that if a GENE-SEQ falls on or between your breakpoints, then it may be affected by the mutation. The interface should do this calculation and present the resulting list of GENE-SEQs as “genes potentially affected by mutation”.
<P>	<B>chrom_id (TEXT, REQUIRED). </B> For system use. Contains the ZDB_ID of the CHROMOSOME record with which this alteration is associated.

<H3>Open Issues/Questions:  </H3>
<P>			•  (Eck, 7/19/96) Given the brief discussion in ROLE above, should we even have a phenotype attribute at the ALTERATION level? If I understand it correctly, the only way to pick apart the phenotypic contributions of individual alterations is to isolate them on a chromosome by somehow knocking out all other alterations. But then wouldn’t this create a completely new chromosome, with its own CHROMOSOME record --- which would have its own phenotype. 
<P>			•  Format for genetic location needs to be determined.  Probably something like “{u|d}real#”, where u/d refers to the long/short (up/down) arm of the chromosome, followed by a recombination (centimorgan) distance.
<P>			•  Format for cytological location needs to be determined.  Something like (integer, letter, integer) to locate the exact region of the mutation.
<BR>
<BR>
<BR>
<H2>Abstract Class:  LABEL</H2>

<P>	<B>Role:</B>  The LABEL class is an abstract class that captures the attributes and functionality shared by all reagents used as anatomical labels. 
	
<P>	<B>How/Who enters: </B> Because this is an abstract class, no actual instances of this class will ever be created. Only instances of the subclasses RNA PROBE, ANTIBODY, and CHEMICAL-LABEL will be created. See descriptions of these classes for details.
<BR>
<BR>
<BR>
<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>GENERIC_OBJECT</B></BIG></TD></TR>
<TR><TD></TD><TD><B>DATA_ITEM</B></TD><TD>comments, primary_pub, related_pubs</TD></TR>
</TABLE>			

<H4>OVERVIEW:  </H4>
<BR>

<img src="fig8.gif">

<BR>
<H4>ATTRIBUTES:</H4>
<P>	<B>name (TEXT, required). </B> This attribute holds the formal name of the LABEL. After initial submission to the database, this field can be changed only by the DB Admin.
<P>	<B>structures labeled (closed set, REQUIRED).</B> This field describes which anatomical structures the reagent labels. Allowed values are chosen from the set defined by the PARTS catalog. After initial submission to the database, this field can be changed only by the DB Admin.

<H3>Open Issues/Questions:  </H3>
<P>			• 
<BR>
<BR>
<BR>
<H2>Class:  ANTIBODY</H2>

<P>	<B>Role: </B> The ANTIBODY class catalogs the antibody probes known to the zebrafish community.
	
<P>	<B>Sample Query Scenario: </B> I have a particular structure (e.g. the presumptive ear) that I’d like to label in some mutant embryos I have. I access the database and query for labeling reagents, using the structure I want labeled as a search parameter.
	
<P>	<B>How/Who enters: </B> Initially, the DB Admin enters all known antibodies. Authorized submitters are allowed to create and enter new ANTIBODY records into the database.
	
<P>	<B>Security:</B>  Only authorized submitters are permitted to enter new ANTIBODYs. Changes to fields other than comments, related_pubs, and source are not permitted; requests for such updates must go through the DB Admin.
<BR>
<BR>
<BR>
<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>GENERIC_OBJECT</B></BIG></TD></TR>
<TR><TD></TD><TD><B>DATA_ITEM</B></TD><TD>comments, primary_pub, related_pubs</TD></TR>
<TR><TD></TD><TD><B>LABELS</B></TD><TD>name, structures_labeled</TD></TR>
</TABLE>			
			
<H4>ATTRIBUTES:</H4>
<P>	<B>type (closed set: polyclonal, monoclonal: IgG, IgM)</B>
<P>	<B>immunogen (TEXT, OPTIONAL)</B>
<P>	<B>gene_product (TEXT, OPTIONAL).</B> Describes the protein (gene_product) recognized by the antibody stain. The given name must match an existing GENE name; this is enforced by the database.

<H3>Open Issues/Questions:  </H3>
<P>			•  
<BR>
<BR>
<BR>
<H2> Class:  RNA PROBE</H2>

<P>	<B>Role: </B> The RNA PROBE class catalogs the RNA probes known to the zebrafish community.
	
<P>	<B>Sample Query Scenario: </B> I have a particular structure (e.g. the presumptive ear) and I’d like to know which genes are expressed there and the probes that can be used to label the structure for expression of these genes by RNA in situ hybridization. I access the database and query for labeling reagents, entering the name of the structure I want labeled as the search parameter.
	
<P>	<B>How/Who enters:</B>  Initially, the DB Admin enters known RNA PROBEs. Authorized submitters are allowed to create and enter new RNA PROBE records into the database.
	
<P>	<B>Security:</B>  Only authorized submitters are permitted to enter new RNA PROBEs. Changes to fields other than comments, related_pubs, and source are not permitted; requests for other updates must go through the DB Admin.
<BR>
<BR>
<BR>
<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>GENERIC_OBJECT</B></BIG></TD></TR>
<TR><TD></TD><TD><B>DATA_ITEM</B></TD><TD>comments, primary_pub, related_pubs</TD></TR>
<TR><TD></TD><TD><B>LABELS</B></TD><TD>name, structures_labeled</TD></TR>
</TABLE>			
			
<H4>ATTRIBUTES:</H4>
<P>	<B>gene (GENE, REQUIRED). </B> This field contains a pointer to a particular GENE that has been entered into the database.
<P>	<B>vector (TEXT, REQUIRED).</B> Name of the cloning vector.
<P>	<B>construct (TEXT, REQUIRED). </B>Name of the resulting construct.
<P>	<B>insert_size (INTEGER, REQUIRED). </B>Size of the cDNA insert piece in kilobases.
<P>	<B>polymerase (TEXT, REQUIRED). </B>Max size= 5chars. 

<H3>Open Issues/Questions:  </H3>
<P>			• What if the GENE isn’t in the database.  Mechanism for adding?
<BR>
<BR>
<BR>

<H2>Class:  IMAGES</H2>

<P>	<B>Role:</B>  The IMAGE class provides a framework for storing image data. It is assumed that all such data entries consist of a single graphics file, along with a set of attributes that describe exactly what the graphics file contains. Both published and unpublished image data may be submitted to the database. This class of data (IMAGE), is one of the most common kinds of data in the database; every effort is made to optimize searching and indexing image data. 
			
	
<P>	<B>How/Who enters: </B> Image data are primarily entered by authorized submitters, who submit a file upload form of some sort. Each entry is tagged with the date, time, and user who submitted it. 
	
<P>	<B>Security: </B> Any authorized submitter may enter images into the database. Once a user is authorized, submitted images are never screened by some sort of editorial committee, but are inserted into the database. This means that it is incumbent on submitters to be honest and conscientious about the accuracy and quality of data they submit. Once submitted,  an image record may be changed ONLY by the DB Admin -- requests for corrections and/or updates (e.g. when the image is published somewhere) must be handled through the DB Admin.
<BR>
<BR>
<BR>
<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>GENERIC_OBJECT</B></BIG></TD></TR>
<TR><TD></TD><TD><B>DATA_ITEM</B></TD><TD>comments, primary_pub, related_pubs</TD></TR>
</TABLE>	
			
<H4>ATTRIBUTES:</H4>
<P>	<B>stage (closed set, REQUIRED). </B>This attribute describes the developmental stage of the organism at the time the image was taken. Allowable values are the stages that are defined by the staging series. Stages may be subdivided (only) by making a textual note in the legend attribute.
<P>	<B>stage_percent (integer range 1-99, OPTIONAL). </B>Describes how far along in the given stage the organism in the image is. For example, one might then have an image at Dome, 50%), indicating that the organism is approximately halfway through Dome stage. This essentially provides a mechanism to subdivide stages. Leaving this field blank implies that it is unknown how far through the given stage the organism is.
<P>	<B>resolution (TEXT, required).</B>  States the resolution with which the animal’s stage of development was recorded. Must be one of {stage, hours, days}. This value was used at image submission time to compute stage_hours_start and stage_hours_end; it must be stored so that we can properly denote the resolution of each image when it is retrieved and displayed.
<P>	<B>stage_hours_start (REAL, REQUIRED). </B> A real value giving a time in decimal hours (at standard conditions) at which the time frame in which this image falls begins.
<P>	st<B>age_hours_end (REAL, REQUIRED). </B> A real value giving a time in decimal hours (at standard conditions) at which the time frame in which this image falls ends.
<P>	<B>stock (FISH, REQUIRED).</B> This field contains a pointer to the FISH record that represents the (mutant or wild-type) strain of which the animal pictured is a member. Note that this approach assumes that the FISH record in question has already been entered into the database.
<P>	<B>representative (BOOLEAN, REQUIRED). </B> A Boolean flag that is set to “true” if this image is to be used as the “representative” image for this stock. Each stock (line) may have only one representative image specified for it. The representative image is placed at the top of the “stock-viewer” page when viewing the information on that stock.
<P>	<B>specimen (closed set, REQUIRED).</B> Specifies the type of specimen shown in the image. Valid entry must be chosen from the closed set {LM-section, EM-section, whole-mount}
<P>	<B>image type (closed set, REQUIRED). </B> Specifies the nature of the image. Valid entry must be chosen from the closed set {still, movie, optical series, 3-D}
<P>	<B>orientation (closed set, REQUIRED). </B> Specifies the orientation of the animal. The viewpoint of the camera when the image was taken. Valid entries must be a member of the closed set {dorsal - anterior to top, ventral - anterior to top, sagittal - anterior to left, sagittal - anterior to right, parasagittal - anterior to left, parasagittal - anterior to right, transverse - dorsal to top, dorsal oblique, ventral oblique, transverse oblique - dorsal to top}.
<P>	<B>animal state (closed set, REQUIRED).</B> Specifies the state of the animal at the time the image was taken. Valid entries are {live, fixed}. (added 1/15/97 Eck)
<P>	<B>labeling (TEXT, OPTIONAL). </B>This field contains a pointer to the LABEL(s) used on the specimen shown in the image. 
<P>	<B>visible_structs (listof (PART), REQUIRED). </B>The information in this field is used to describe the anatomical structures visible in the image. Note that the list may include both parts annotated on the image, and ones that are visible but not specifically highlighted by annotation.
<P>	<B>image_file (LARGE_OBJECT, REQUIRED). </B>This field holds an object of type LARGE_OBJECT that is the actual binary image file that the record describes.

<H3>Open Issues/Questions:  </H3>
<P>			•  What about the other attributes that were included in our original data model, Monte? --> You’ve left them out in this draft. Like for instance Brain Region (Diencephalon, etc.), Cell Type (Interneuron, Sensory Neuron, etc.), Labeling, Cell Part (whole cell, dendrite, etc.) and others. Are you thinking that all this just gets put in the legend? Realize that this means no searching/sorting by these attributes.  Monte: They’re specified by parts list.
<P>			•  Note that under stock we require a pointer to an existing strain of FISH. How often is someone entering an image associated with a stock not yet in the database? What should we do in this case? Perhaps handle the same way as we do with missing PUBLICATIONS, that is, send mail to DB Admin. Or we could allow user to enter a new FISH or MUTANT on the spot. Won’t user enter IMAGE at same time as new FISH?
<P>			• What do we do about images stained with <I>multiple</I> LABELs? It must be supported.
<P>			• We have said the visible_structs list should include both annotated (e.g. with arrows/labels) and un-annotated (but nonetheless visible) structures. Is this realistic? Are submitters willing to go through and list <I>every single structure</I> that is visible in each image, whether or not it is of interest to them at all? How do we enforce this? Moreover, what is the use of an un-annotated image showing, say, the telencephalon, to a user who is looking through the developmental atlas to find out what it looks like? Eck thinks we should change this attribute to “annotated structs” and list only those (Monte disagrees). Also, we should think about whether to implement this as part of the EXPRESSION-DATA intersection table (see CHROMOSOME) rather than as listof, which is inefficient to search.
<P>			• It is unclear how the interface could support the specification of the visible_structs field, allowing the user to select visible parts from the PARTs catalog. Maybe clickmap of the tree representation of the PARTs catalog?
<P>			• The system should verify not only that a file exists, but that the file is in an appropriate format (e.g. GIF, PICT, JPG). To this end, the interface should ask the user to specify not only the file, but also the file type.
<BR>
<BR>
<BR>
<H2>Class:  PHYSIOLOGICAL RECORDS</H2>

<P>	<B>Role: </B> This class allows users to enter non-photographic records.
	
<P>	<B>How/Who enters:</B>  Most of these records are entered remotely by authorized submitters.
	
<P>	<B>Sample Query Scenario:</B>  Has anyone obtained intracellular recordings from muscle cells in a particular mutant?
	
<P>	<B>Security:</B>  Once created, the only field that can be remotely updated by the original submitter is the publications field.
<BR>
<BR>
<BR>
<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>GENERIC_OBJECT</B></BIG></TD></TR>
<TR><TD></TD><TD><B>DATA_ITEM</B></TD><TD>comments, primary_pub, related_pubs, source</TD></TR>
</TABLE>	
			
<H4>ATTRIBUTES:</H4>
<P>	<B>kind (closed set, REQUIRED).</B> This field describes the nature of the data contained in the record field. Acceptable values are limited to {current, voltage, optical}
<P>	<B>record.</B> The actual data record or a graphical image of it.
<P>	<B>description (TEXT, REQUIRED). </B>This field gives a textual description of the data, describing the conditions under which the data were recorded, and drawing the reader’s attention to features in the data. Similar in nature to a legend on a figure.  At least some description is required.

<H3>Open Issues/Questions:</H3>  
<P>			•  What is the data type of the record attribute? Is it just a numerical vector? Or is it a GIF image of a graph?
<P>			•  This class seems very under-specified. Need to develop the query scenario to understand better how one might go about searching for a specific record.
<BR>
<BR>
<BR>
 <H1>SECTION III:  The Zebrafish Reference Resource  (ZERR)
</H1>

<P>	<B>Purpose:</B>  The goal of the Zebrafish Reference Resource (ZERR) is to provide researchers with a comprehensive and uniform reference framework for (a) naming and identifying anatomical features of the zebrafish and (b) naming and identifying the various developmental stages. In particular, four distinct reference facilities are embodied in the ZERR:
			
<P>				<BIG><B>1) The Staging Series. </B></BIG> The purpose of the staging series is to establish a common framework for identifying the developmental stage of an animal. Each of the developmental stages currently agreed upon by the zebrafish research community is textually described and extensively documented with carefully selected photographic records that exemplify the stage in question.
					
<P>					<B>Usage Scenario:</B>  I have a photo of an interesting fish, but I’m unsure what its stage is. So I browse through the Staging Series, referring to the criteria and images found there to determine the stage of my specimen.
				
<P>				<BIG><B>2) The Developmental Atlas.</BIG> </B> The developmental atlas (when completed) provides a comprehensive visual atlas of the zebrafish providing, for each developmental stage, a set of whole-mount and section images. Most of these images will be annotated to identify various anatomical structures. The goal of the atlas is to allow researchers to identify the anatomical structures observed in their own specimens.
					
<P>					<B>Usage Scenario:</B>  I am looking at a labeled cross-section showing some gene expression pattern and am unsure of a particular structure that is labeled. So I search the Anatomical Atlas for an annotated image of that region and am able to determine the correct anatomical term for the structure.
				
<P>				<BIG><B>3) Adult Atlas.</B></BIG>  The Adult Atlas is a subset of the developmental atlas that focuses narrowly on the anatomical structure of the adult (older than 3 months) zebrafish. Like the developmental atlas, it indexes annotated whole-mounts and sections. Used in a way very similar to the Developmental Atlas.
				
<P>				<BIG><B>4) Anatomical Parts Catalog. </B></BIG> The purpose of the anatomical parts catalog is to define a stable, shared taxonomy of zebrafish anatomy, providing researchers with a common terminology for identifying the various anatomical structures in the zebrafish. In this way, the parts catalog reduces the confusion associated with synonymous terms for the same structure. The anatomical parts catalog is used to identify structures apparent in image data submitted to the database, thus enforcing the uniform terminology.
					
<P>					<B>Usage Scenario:</B>  A colleague has sent me email mentioning that she has just documented expression of a gene in the pectoral fin buds. I can’t recall exactly where those structures are, at what stages they are present, or what they look like. I access the database to view a variety of annotated images of that structure (even including, perhaps, the very images that my colleague was speaking of, which she has promptly submitted to the database).
			
	<H3>SUMMARY and OVERVIEW:</H3> All four of these referential functions are closely related. The following diagram summarizes these relationships:
<BR>

<img src="fig9.gif">

<BR>
<P>			As shown in the figure, the ZERR establishes a comprehensive, shared framework for identifying and discussing aspects of zebrafish anatomy and development at all stages in the developmental process. For each stage, the database user has access to the criteria defining that stage (the Staging Series), to a comprehensive, annotated, and detailed visual catalog of zebrafish anatomy at that stage (the Developmental/Adult atlas), and to a detailed, cross-referenced definition of anatomical taxonomy at that stage (the Anatomical Parts list).
	
<H4>	NOTES: </H4> 
<P>Unlike most other parts of the database, which generally require several new data categories to implement, the ZERR requires only two. This is because the ZERR can be seen primarily as an interface to data of types that already exist. Specifically, most of the reference data consist of images and their accompanying descriptions, which are already supported by the IMAGE data type. Implementing the ZERR is primarily a matter of providing <I>interface</I> mechanisms that allow users to extract and examine the appropriate image data. Two new data classes must be established to represent, respectively, the various anatomical parts and the hierarchical structural relationships among them.
<P>			Note the similarity among the Adult Atlas, the Staging Series, the Developmental Atlas, the Anatomical Parts and the Image data type.  All are based on images that users need to constrain and browse.  This suggests a common interface should be used to access all of them.
<BR>
<BR>
<BR>
 <H2>Class:  Part</H2>

<P>	<B>Role: </B> The PART class implements a catalog of all anatomical structures that exist at each stage during developmental. It represents the basic terminological foundation for the zebrafish research community. Though the list of PARTs has no structural information (i.e. which part is contained in which other part) associated with it, the PART catalog can be used in conjunction with the PHYS_STRUCTURE database to generate dynamically the hierarchical structural relationships among the various anatomical parts (see description of PHYS_STRUCTURE). The names of individual PARTs can also be used to index the IMAGE database to extract images that show the part in question. 
<P>	<B>How/Who enters:  </B>All records in the PARTs catalog are entered and maintained exclusively by the DB Admin. Presumably modifications are made only after reaching a consensus among members of the research community. It is assumed that the basic anatomical taxonomy develops through the collaborative efforts of the zebrafish community using the glossary from the published staging series as a start.
	
<P>	<B>Security: </B> Security issues are minimal, because only the DB Admin is able to add or edit records. 
<BR>
<BR>
<BR>
<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>GENERIC_OBJECT</B></BIG></TD></TR>
</TABLE>		
	
<H4>ATTRIBUTES:</H4>
<P>	<B>name (TEXT, REQUIRED).</B>  This field contains the formal, accepted name of an anatomical part.
<P>	<B>abbreviations  (TEXT, OPTIONAL). </B>This field contains a semicolon-separated list of acceptable abbreviations for the part. 
<P>	<B>description (TEXT, REQUIRED). </B>This field gives a textual description of the part, carefully describing the observable characteristics of the part, and perhaps mentioning its origins and eventual fate in the developmental process.  At least some description is required.
<P>	<B>stage_appear (closed set, REQUIRED). </B>This attribute describes the developmental stage at which the anatomical part appears or is initially defined to exist in the animal.  Allowable values are drawn from the developmental stages defined by the Staging Series.
<P>	<B>stage_disappear (closed set, REQUIRED).</B> This attribute describes the developmental stages at which the anatomical part ceases to exist in the animal. Allowable values are drawn from the developmental stages defined by the Staging Series.
	
<H3>Open Issues/Questions:  </H3>
<P>	•  
<BR>
<BR>
<BR>
<H2>Class:  Phys_Structure</H2>

<P>	<B>Role:</B>  The purpose of the Phys_Structure class is to implement a flexible, extensible mechanism for describing the hierarchical structural relationships among the various anatomical parts of the zebrafish. In conjunction with the PART catalog, this data structure provides the basis for implementing vital functions including:
<P>			•  Enforcing uniform terminology when identifying anatomical structures visible in an image.
<P>			•  Constructing and displaying dynamic graphical representations (e.g. a tree) of the anatomical structure as a means for users to specify in what area of the fish they are interested, to identify anatomical parts, or to access other interface-related functions. 
<P>			The approach to implementing the PHYS_STRUCTURE class is somewhat abstract. Each member of the class defines a single structural relationship between two PARTs. For example, the brain consists of a forebrain, a midbrain, and a hindbrain.  This relationship is represented in the following four instances of the Phys_Structure class:
<BR>
<BR>
<BR>

<CENTER><TABLE BORDER CELLSPACING=10>
<TR><TD><B><BIG>Container </B></BIG></TD><TD></TD><TD></TD><TD><BIG> <B>Containee</B></BIG></TD></TR>
<TR><TD><B>nervous system</B></TD><TD></TD><TD></TD><TD> <B>brain</B></TD></TR>
<TR><TD><B>brain</B></TD><TD></TD><TD></TD><TD> <B>forebrain</B></TD></TR>
<TR><TD><B>brain</B></TD><TD></TD><TD></TD><TD> <B>midbrain</B></TD></TR>
<TR><TD><B>brain</B></TD><TD></TD><TD></TD><TD> <B>hindbrain</B></TD></TR>
</TABLE BORDER></CENTER>					
<BR>
<BR>
<BR>
			 
<P>			The primary advantage of this approach is that no hard-wired connections between various parts exist; it is relatively easy to revise the anatomical atlas to reflect newly identified structures or to subdivide existing structures into finer grained components. It is anticipated that many such modifications to the agreed-upon taxonomy will be made in coming years by zebrafish researchers. A disadvantage is that a larger number of queries will be required to extract the overall hierarchical structure of the organism.  
			
<P>	<B>How/Who enters:</B>  All records in the PHYS_STRUCTURE catalog are entered and maintained exclusively by the DB Admin. Presumably modifications are made only after reaching a consensus among members of the zebrafish research community. It is assumed that the basic anatomical taxonomy has initially been developed through the collaborative efforts of zebrafish researchers.
	
<P>	<B>Security:</B>  Security issues are minimal, because only the DB Admin is able to add or edit records. 
<BR>
<BR>
<BR>

<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>GENERIC_OBJECT</B></BIG></TD></TR>
</TABLE>	
	
<H4>ATTRIBUTES:</H4>
<P>	<B>Container (PART, REQUIRED).</B>  This field contains the name of a superpart, the part that contains the containee. Allowed values are any PART listed in the PART catalog.
<P>	<B>Containee (PART, REQUIRED). </B> This field contains the name of a subpart, the part that is contained by the part specified in the container. Allowed values are any PART listed in the PART catalog.
<P>	<B>Number (integer, REQUIRED).</B> This field specifies how many of the containee parts exist in the container part. For example, this would specify that a fish has two (2) eyes. 
	
<H3>Open Issues/Questions:  </H3>
<P>			•  There is a potent tradeoff between flexibility and efficiency associated with the representation of the structure of the organism. The distributed PHYS_STRUCTURE approach described above represents the most flexible extreme, supporting the widest variety of queries and the easiest modifications to the hierarchical structure. However, it may also be quite inefficient if we frequently need to construct the entire physical structure. 
				
<P>				In short, it remains to be seen whether this is the best representational approach. One compromise might be to use this distributed representation as the basic representation, and periodically use it to construct some other, more efficient structure (i.e. a linked list of some sort) which can be cached and used for everyday tree traversals. 
<P>			•	<B>Monte:</B>  What about functional, developmental, structural relationships?
 <BR>
<BR>
<BR>

<H1>SECTION IV:  Behind the Scenes</H1>


<P>	<B>Purpose:</B>  The data objects described in this section are used by the system to implement some of the functionality described in earlier sections. None of them are apparent to the user. They are documented here for the benefit of the designers and the technically-minded.
<H4>NOTES:  </H4>

<H2> Data Object: ID MANAGER</H2>

<P>	<B>Purpose:</B>  Each data record contained in the database must have a unique ID number. Initially, we intended to use the system-assigned Object ID (OID) for this purpose; because the system assigns these numbers automatically, it makes sense to take advantage of this feature for our own purposes.
			
<P>			However, insights from discussions with the Mouse DB people have revealed the folly of this approach. In case of a system crash or reorganization, much of our data could be scrambled. For example, suppose one were to export the data records to a newly installed copy of the database, or to a mirror site running Illustra. In this case, the OIDs assigned by the system might be “reset” starting from scratch. As a result, the OIDs used to identify records would no longer be necessarily unique, resulting in a disastrous scrambling of data. 
			
<P>			Consequently, it is necessary to generate and manage our own unique record ID numbers. This is the job of the ID MANAGER. Specifically, the ID MANAGER returns a new unique ID value upon request, dynamically generating them based on the argument passed in.  The format proposed here is based on the idea of incorporating the current date into each ID generated. This has the advantage that no two IDs are identical. 
	
<P>	<B>NOTE:</B> we have not yet worked out the details of this object. The following description is in flux and may be incomplete.
	
<H4>METHODS:</H4>
<P>	<B>get_id(Object_type):</B>  This is the sole externally visible method for the ID MANAGER, which is called to generate a new ID number.  The argument Object_Type specifies the type of record for which you are requesting an ID; this is used to generate the appropriate ID. Return value is a text string formatted as follows:
			<CENTER><H3>ZDBN-OT-YRMODY-ID#</H3></CENTER>
<P>The fields of this string are:
<P>			<B>ZDBN: </B>The “ZDB” is a literal prefix that appears first in every ID. The purpose is to distinguish our IDs from the accession numbers of other databases. The “N” is a way to accommodate future expansion to several ZFIN servers, all incorporating data simultaneously. By identifying each server with a unique 1-digit ID number, we can ensure that all IDs in the overall dataset remain unique.
<P>			<B>OTP: </B>This three character field specifies the record type of the data record identified by the ID. For example, the record type for a Gene record is GEN; the record type for a publication is PUB.
<P>			<B>YR: </B>The last two digits of the current year.
<P>			<B>MO:</B> Two digits specifying number of the current month (e.g. May = 05)
<P>			<B>DY:</B> Two digits specifying the current day of the month.
<P>			<B>ID#:</B> Arbitrary number of digits uniquely identifying the record. This value is incremented each time an ID for a given record type is specified. It is reset to one each day. 
<BR>
<BR>
<BR>
	<H4>EXAMPLES: </H4>
<H4>Suppose the current date is Feb. 14, 1996.</H4>
<TABLE CELLSPACING=15><TR><TD></TD><TD>get_id(GENE) -->  ZDB1-GEN-960214-1</TD></TR>
<TR><TD></TD><TD>get_id(GENE) -->  ZDB1-GEN-960214-2</TD></TR>
<TR><TD></TD><TD>get_id(GENE) -->  ZDB1-GEN-960214-3</TD></TR>
<TR><TD></TD><TD>get_id(PUBLICATION) -->  ZDB-PUB-960214-1</TD></TR></TABLE>
<H4>Now suppose the date has changed to Feb. 15, 1996.</H4>
<TABLE CELLSPACING=15><TR><TD></TD><TD>get_id(GENE) -->  ZDB1-GEN-960215-1</TD></TR>
<TR><TD></TD><TD>get_id(PUBLICATION) -->  ZDB1-GEN-960215-1</TD></TR></TABLE>
<BR>
<H4>STATE:  </H4>
<P>	The ID MANAGER must maintain the current ID# for each type of record, incrementing this number each time a request for a new ID for that record type is processed. It must also reset this value to one, each time a day boundary has passed since the last time an ID was requested. The date of the last request for each record type is stored; if the date of a subsequent request falls on a new day, the counter for that record is reset to one.]
	
<H3>Open Issues/Questions:</H3>
<BR>
<BR>
<BR>
<H2>HIDDEN TABLE: INT-PERSON-LAB
</H2>
<P>	<B>Role:</B> Because LABs generally have more than one member, and, in some instances, a PERSON may be a member of more than one LAB, it makes sense to implement the connection between these two data types as an intersection table.  Queries on this table can easily retrieve all the members for a given lab., or all labs in which a certain person is a member. 
			
<P>	<B>How/Who enters:</B>  Records are entered indirectly, as new PERSONS are entered into the system or as PERSON records are updated to reflect a new LAB. Specifically, a PERSON is connected with his or her LAB(s) by selecting one or more labs from a list of labs known to the system, while filling in the “Lab” field in the PERSON record during an update. The system then makes the appropriate entry into the PERSON-LAB table.
	
<P>	<B>Security: </B> Security issues are minimal because this table is invisible to users. 
<BR>
<BR>
<BR>
<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>NONE</B></BIG></TD></TR>
</TABLE>	
	
<H4>ATTRIBUTES:</H4>
<P>	<B>MEMBER_ID (ZDB ID#: REQUIRED).  </B>This field contains the ZDB ID number of a PERSON record. The PERSON is taken to be a member of the LAB referenced by LAB_ID.
<P>	<B>LAB_ID (ZDB ID#, REQUIRED). </B> This field contains the ZDB ID of the LAB of which MEMBER_ID is a member. 
	
<H3>Open Issues/Questions:</H3>
<BR>
<BR>
<BR>
	
 <H2>HIDDEN TABLE: ATTR_UPDATE</H2>

<P>	<B>Role:  </B>This table plays a VITAL role in maintaining the historical consistency of the database.  Each time a field in a record is specified or updated, a new entry is placed into the ATTR_UPDATE table, describing the particulars of the change: which user made the change, when it occurred, notes on the change, and any publications associated with the change. From this information, it is possible to reconstruct and display dynamically the history of changes to any record upon request.
			
<P>	<B>How/Who enters:</B>  Records are entered continuously by the system, as new records of other data types are created and modified.  Each change to the database generates a new ATTR_UPDATE record.
	
<P>	<B>Security:</B>  Security issues are minimal because this table is invisible to users. 
<BR>
<BR>
<BR>
<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>NONE</B></BIG></TD></TR>
</TABLE>
	
<H4>ATTRIBUTES:</H4>
<P>	<B>PARENT_RECORD (ZDB ID#, REQUIRED).</B>  Contains the ZDB ID of the record in which the attribute resides. For instance, if you are extending a GENE record by filling in its protein sequence, this attribute refers to the original GENE record. The value is filled in automatically by the system. 
<P>	<B>ATTR_NAME (TEXT, REQUIRED). </B> Contains the name of the attribute being updated, filled in by the system when the record is generated. 
<P>	<B>PERSON_ID (ZDB ID#: REQUIRED).</B>  This field contains the ZDB ID number of a PERSON record. The PERSON is the authorized submitter who is submitting a value for the attribute in question. 
<P>	<B>OLD_VALUE(TEXT, REQUIRED). </B> In this field, the system casts to text and records the old value of the attribute being updated. In most cases this is NULL, but sometimes not. For instance, if the DB Admin changes an existing value, we record the old one automatically. In some cases (e.g. where the value is generated from an intersection table), it may not be possible to maintain this attribute.
<P>	<B>NEW_VALUE (TEXT, REQUIRED).</B>  This field contains the new value of the attribute submitted in this update. The new value is also stored in the actual record that was updated ensuring query efficiency. This field provides a bit of redundancy.
<P>	<B>CHANGE_DATE (TIMESTAMP, REQUIRED).</B>  This field is filled in by the system with a timestamp at the time the change is incorporated into the database.
<P>	<B>COMMENTS (TEXT, OPTIONAL).  </B>A free form text field in which the person making the change/update can document reasons for the change or other information of interest.
	
<H4>IMPLICIT ATTRIBUTES:</H4>
<P>	<B>PUBLICATIONS.</B>  When submitting any sort of attribute update, the submitter is prompted to identify (using the publication browser) publications that support the data being submitted. Any such selections create new records in the DATA-PUB intersection table. The publications associated with a particular update can be dynamically reconstructed by querying the DATA-PUB intersection table. 
	
<H3>Open Issues/Questions:</H3>
<P> • Should we track changes to the “core” data classes only, i.e. the DATA_ITEM class and its subclasses or do we want to track user’s changes to things like their own PERSON records, LAB records, etc. as well. Who would ever want to know this stuff?
<P> • Might be able to eliminate the CHANGE_DATE attribute and just use the timestamp the system puts on each record automatically.
<BR>
<BR>
<BR>
	
<H2> HIDDEN TABLE: INT-DATA-PUB</H2>

<P>	<B>Role:</B>  A key function of the database is to maintain connections between the data contained in the database, and the publications (if any) in which the data were formally presented to the community. That is, the database must associate DATA_ITEMs with PUBLICATIONs. To support document changes to a data record over time (e.g. as more becomes known about a mutant), the database must also associate ATTR_UPDATE with PUBLICATIONS. Because, in general, a given DATA_ITEM or ATTR_UPDATE may be supported by more than one PUBLICATION, and a single PUBLICATION may support several data entries or changes, it makes sense to implement the connection between these two data types as an intersection table.  Queries of this table can easily retrieve all the publications associated with a data item, or all the DATA_ITEM or ATTR_UPDATEs supported by a given publication.  
			
<P>	<B>How/Who enters: </B> Records are created indirectly, as new DATA_ITEMS or ATTR_UPDATEs are entered into the system. Specifically, when the user selects a particular PUBLICATION to support a submission, a new DATA-PUB record is created to connect the two data records. 
	
<P>	<B>Security: </B> Security issues are minimal, because this table is invisible to users. 
<BR>
<BR>
<BR>	
<TABLE>
<TR><TD><B><BIG>Superclasses:</B></TD> <TD> <B>NONE</B></BIG></TD></TR>
</TABLE>	
	
<H4>ATTRIBUTES:</H4>
<P>	<B>DATA_ID (ZDB ID#: REQUIRED). </B> This field contains the ZDB ID number of a DATA_ITEM or ATTR_UPDATE record.
<P>	<B>PUB_ID (ZDB ID#, REQUIRED). </B> This field contains the ZDB ID of a PUBLICATION associated with the DATA_ITEM or ATTR_UPDATE record specified by DATA_ID.
<P>	<B>PUB_TYPE (BOOLEAN, default=false).</B>  This Boolean value is used to distinguish between <I>primary</I> and <I>related</I> publications that may be associated with DATA_ITEMS. If the publication is the primary publication, then PUB_TYPE=true; else PUB_TYPE=false.

<H3>Open Issues/Questions:</H3>
<BR>
<BR>
<BR>	
<H1>APPENDIX</H1>

<H3>Entering Publications (may also apply to some other classes).</H3>
<P>	For many data classes (e.g. genes, labs, etc.), submitters should be able to specify the publications associated with that data item. This process must be as streamlined as possible, because users have very little patience with this.  
<P>	A crucial issue is that publication data that are somehow malformed (e.g. the submitter didn’t type the date in the correct format) can essentially be lost in the database, because later queries will not be able to retrieve them. For this reason, all new PUBLICATION records are entered by the DB admin. Specifically, the way it works is as follows:
<P>   1) When asked to list publications, users provide the name of the first author and the first n words of the title for each publication they wish to list. 
<P>   2) Upon submission, the system matches this list against the PUBLICATION database. 
<P>   3) All publications it finds in the database are added to the current data record (e.g. an image file being submitted).
 <P>  4) For any publications it can not find in the database, the user is prompted to send email to DB admin. asking that (a) publication record be created and (b) added to the current data record. For the present, nothing is attached to the data record --> its publication list remains without a temporary record. It is crucial for the DB Admin to process requests to enter new or missing publications promptly. Upon receiving the request, the DB Admin enters the new PUBLICATION record and adds it to the appropriate data record.
<P>   5) If there are any problems creating the new publication record, the DB admin corresponds by email with the submitter to iron them out.
	
<P>	<B>Note:</B> It is anticipated that these explicit requests for data records to be added will be quite infrequent. Hopefully, most relevant publications will be automatically added to the database as they are published.


</BODY>
</HTML>
