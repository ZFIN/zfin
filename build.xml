<?xml version="1.0" encoding="UTF-8"?>
<project name="ZFIN" default="usage" basedir=".">

    <property name="buildfiles.dir" value="buildfiles"/>


    <import file="${buildfiles.dir}/base-properties.xml"/>

    <taskdef name="loadProperties"
             classname="org.zfin.properties.ant.LoadPropertiesTask"
             classpathref="classpath"/>

    <taskdef name="createEnum"
             classname="org.zfin.properties.ant.CreateEnumTask"
             classpathref="classpath"/>

    <taskdef name="exportProperties"
             classname="org.zfin.properties.ant.ExportPropertiesTask"
             classpathref="classpath"/>

    <property name="commons.dir" value="${basedir}/externals/properties"/>

    <!--here, we are only loading property files into ant, not into the enum -->
    <loadProperties file="${commons.dir}/${INSTANCE}.properties" />


    <import file="${buildfiles.dir}/properties.xml"/>
    <import file="${buildfiles.dir}/gwt.xml"/>
    <import file="${buildfiles.dir}/test.xml"/>
    <import file="${buildfiles.dir}/tomcat.xml"/>
    <import file="${buildfiles.dir}/usage.xml"/>
    <import file="${buildfiles.dir}/serialization.xml"/>


    <!-- ====================================================================== -->
    <!-- COMPILE TASKS                                                          -->
    <!-- ====================================================================== -->

    <target name="prepare" depends="hibernate-available" description="Prepares directories for compilation">
        <mkdir dir="${classbin.dir}"/>
        <mkdir dir="${classbin.dir}/resources"/>
        <copy file="${conf.dir}/hibernate.cfg.xml" todir="${classbin.dir}"/>
        <copy file="${conf.dir}/hibernate-gbrowse.cfg.xml" todir="${classbin.dir}"/>
        <copy file="${conf.dir}/ehcache.xml" todir="${classbin.dir}"/>
        <copy file="${conf.dir}/log4j.xml" todir="${classbin.dir}" failonerror="false"/>
        <copy todir="${classbin.dir}/org/zfin">
            <fileset dir="${hibernate.conf.dir}">
                <include name="*.hbm.xml"/>
            </fileset>
        </copy>
        <copy todir="${classbin.dir}">
            <fileset dir="${source.dir}">
                <include name="**/*.properties"/>
            </fileset>
        </copy>
        <!--
                <copy file="${conf.dir}/application.properties" todir="${classbin.dir}/resources"/>
        -->
        <antcall target="copy-hibernate-props"/>
        <copy file="${conf.dir}/views.properties" tofile="${classbin.dir}/views.properties"/>
        <copy file="${conf.dir}/zfin-messages.properties" tofile="${classbin.dir}/zfin-messages.properties"/>
    </target>

    <target name="copy-hibernate-props" if="hibernate.exists"
            description="Copy the hiberate.properties file if it exists">
        <echo message="Hibernate configuration file hibernate.properties found"/>
        <copy file="${conf.dir}/hibernate.properties" tofile="${classbin.dir}/hibernate.properties"
              failonerror="false"/>
    </target>


    <target name="do"
            depends="cleanClasses, construct-ncbi-dtd-classes,create-site-search-categories-classes, compile, prepare-properties"
            description="Everything to compile excluding jsp files. No copying into target directory"/>

    <target name="all" depends="deploy" description="The same as deploy for Tom."/>
    <target name="install" depends="deploy" description="Same as deploy."/>

    <target name="loadPropertiesIntoEnum">
        <loadProperties
                file="${commons.dir}/${INSTANCE}.properties"
                enumClass="${enum.class}"
                />
    </target>

    <target name="createEnum">
        <createEnum file="${commons.dir}/${INSTANCE}.properties"
                    sourceDir="source"
                    enumClass="${enum.class}"
                />
    </target>

    <target name="createEnvFile">
        <echo message="creating ENV file for ${INSTANCE}"></echo>
        <exportProperties
                file="${commons.dir}/${INSTANCE}.properties"
                target="${commons.dir}/${INSTANCE}.env"
                header="#!/local/bin/tcsh${line.separator}"
                keyPrefix="setenv "
                keySuffix=" "
                valuePrefix="&quot;"
                valueSuffix="&quot;"
                footerFile="${commons.dir}/footer.env"                
                exportPropertyFile="${commons.dir}/env-exports.properties" />
    </target>

    <target name="createTTFile">
        <echo message="creating TT file for ${INSTANCE}"></echo>
        <exportProperties
                file="${commons.dir}/${INSTANCE}.properties"
                target="${commons.dir}/${INSTANCE}.tt"
                keyPrefix="&lt;!--|"
                keySuffix="|--&gt;${tab}"
                exportPropertyFile="${commons.dir}/tt-exports.properties"
                />
    </target>

    <!--is referenced in ExportAllInstancesTask, so if renamed, please change there-->
    <target name="createPropertiesFiles" depends="compile"
            description="Exports properties to env and tt files.">
        <echo message="Creating properties file: ${INSTANCE}"></echo>
        <antcall target="createEnvFile"/>
        <antcall target="createTTFile"/>
        <echo message="Created properties file: ${INSTANCE}"></echo>
    </target>


    <target  name="createAllPropertiesFiles" description="Exports all instances defined in instances.properties">
        <taskdef name="exportAllInstances"
                 classname="org.zfin.properties.ExportAllInstancesTask"
                 classpathref="classpath"/>
        <exportAllInstances instancesFile="${commons.dir}/instances.properties" target="createPropertiesFiles" />
    </target>


    <target name="compile" depends="prepare"
            description="Target to compile all classes, excluding test files, and moving anything from the source
            folder to the class folder.">
        <copy todir="${classbin.dir}">
            <fileset dir="${source.dir}">
                <include name="**/*.xml"/>
                <exclude name="**/.svn"/>
            </fileset>
        </copy>
        <javac srcdir="source"
               destdir="${classbin.dir}"
               classpathref="extended.classpath"
               fork="true"
               includeAntRuntime="no"
               memoryMaximumSize="256m"
               debug="true"
               target="1.6"/>
        <echo message=":JAVA COMPILE SUCCESSFUL:"/>
    </target>

    <target name="compile-tests"
            description="Target to compile all test classes.">
        <javac srcdir="test"
               destdir="${classbin.dir}"
               classpathref="extended.classpath"
               fork="true"
               includeAntRuntime="no"
               memoryMaximumSize="256m"
               debug="true"
               target="1.6"/>
    </target>

    <target name="remove-pre-and-post-targets"
            description="Remove the pre-WEB-INF folder if exists. It is used for the new build version">
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${pre-web-inf}" includes="**/*"/>
        </delete>
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${post-web-inf}" includes="**/*"/>
        </delete>
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${gwt.pre-target}" includes="**/*"/>
        </delete>
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${gwt.post-target}" includes="**/*"/>
        </delete>
    </target>

    <target name="cleanClasses" description="Remove java classes directory contents. ">
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${classbin.dir}" includes="**/*"/>
        </delete>
        <!--<delete includeemptydirs="true" quiet="true">-->
        <!--<fileset dir="${domain-work}" includes="**/*"/>-->
        <!--</delete>-->
    </target>

    <target name="cleanTarget" description="Remove target values. ">
        <removeWebApp location="${home.target}"/>
    </target>

    <target name="clobber" depends="cleanTarget" description="Remove target values. "/>

    <target name="clean-javadoc" description="Cleans javadoc">
        <delete dir="${java-doc.dir}"/>
    </target>

    <target name="javadocs" depends="clean-javadoc" description="Generate Javadocs into ${java-doc.dir}">
        <mkdir dir="${java-doc.dir}"/>
        <javadoc packagenames="org.zfin.*"
                 sourcepath="${source.dir}"
                 excludepackagenames="org.zfin.properties.*"
                 classpathref="extended.classpath"
                 destdir="${java-doc.dir}/zfin"
                 author="true"
                 version="true"
                 maxmemory="300m"
                 use="true"
                 private="yes"
                 windowtitle="ZFIN API"
                 doctitle="ZFIN"
                 bottom="Copyright &#169; 2008 ZFIN"
                 locale="en"
                />
    </target>


    <target name="deploy-javadoc" depends="javadocs" description="Deploy the Javadoc into webroot/util/javadoc/zfin">
        <mkdir dir="${TARGETROOT}/${zfin-javadoc}"/>
        <copy verbose="true" todir="${TARGETROOT}/${zfin-javadoc}">
            <fileset dir="${java-doc.dir}/zfin">
                <include name="**/"/>
            </fileset>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- CONFIGURATION TASKS                                                    -->
    <!-- ====================================================================== -->

    <target name="hibernate-available" description="Verifies that hibernate is available">
        <available file="${conf.dir}/hibernate.properties" property="${hibernate.exists}"/>
    </target>


    <!-- ====================================================================== -->
    <!-- Generate WAR.                                                          -->
    <!-- ====================================================================== -->

    <target name="simple-war" description="Creates war file with no depends targets">
        <war warfile="${zfin.war}" webxml="${web-inf.dir}/web.xml" duplicate="preserve" index="true">
            <fileset dir="${web.dir}"/>
            <lib dir="${web-inf.dir}/lib"/>
        </war>
    </target>


    <target name="schemaVersion" description="Prints schema version">
        <java fork="yes" classname="org.zfin.database.SchemaManager" taskname="junit" failonerror="true">
            <arg value="-checkSchema"/>
            <classpath refid="extended.classpath"/>
        </java>
    </target>

    <taskdef name="xjc"
             classname="com.sun.tools.xjc.XJCTask"
             classpathref="extended.classpath"
             description="Task to generate java source based on Java Binding definitions and an xsd file"
            >
    </taskdef>

    <target name="construct-ncbi-dtd-classes" description="Run xjc to generate Java files for parsing blast results">
        <echo message="Generating NCBI blast result source files ..."/>
        <echo message="${web.conf}"/>
        <xjc schema="${web.conf}/NCBI_BlastOutput.dtd" binding="${web.conf}/blast-output.xjb" target="source"
             package="org.zfin.sequence.blast.results">
            <arg value="-dtd"/>
            <produces dir="source" includes="org.zfin.sequence.blast.results/*.java"/>
        </xjc>
    </target>

    <target name="create-site-search-categories-classes" description="Run xsd to generate Java files for DX jobs">
        <echo message="Generating Site Search Categories source files ..."/>
        <echo message="${web.conf}"/>
        <xjc schema="${web.conf}/site-search-categories.xsd" binding="${web.conf}/site-search-categories.xjb"
             target="source"
             package="org.zfin.uniquery.categories">
            <produces dir="source" includes="org.zfin.uniquery.categories/*.java"/>
        </xjc>
    </target>

    <target name="prepare-properties" description="Copy jaxb properties into class hierarchy">
        <copy todir="${classbin.dir}/">
            <fileset dir="${source.dir}">
                <include name="**/jaxb.properties"/>
                <include name="**/bgm.ser"/>
            </fileset>
        </copy>
    </target>


    <target name="remove-archives" description="Removes archived builds (older than post-builds)">
        <delete verbose="true" includeemptydirs="true">
            <fileset dir="${TARGETROOT}/home" includes="archive*/**"/>
        </delete>
    </target>

    <target name="revert" depends="revert-build,restart" description="Reverts the build and restarts"/>

    <target name="revert-build"
            description="Moves the last successful build to the current build and this build to the previous build directly (which will get clobbered on a subsequent build).">
        <fail message=":FAIL TO REVERT BUILD.  POST DIRECTORIES DO NOT EXIST TO MOVE:">
            <condition>
                <not>
                    <and>
                        <available file="${post-web-inf}"/>
                        <available file="${gwt.post-target}"/>
                        <!--             <available file="${post.version.file}"/> -->
                    </and>
                </not>
            </condition>
        </fail>


        <move todir="${archive-home.target}" failonerror="false" verbose="false" overwrite="true">
            <fileset dir="${post-home.target}"/>
        </move>
        <move todir="${post-home.target}" failonerror="false" verbose="false">
            <fileset dir="${home.target}"/>
        </move>
        <move todir="${home.target}" verbose="false">
            <fileset dir="${pre-home.target}"/>
        </move>

        <!-- move web-inf -->
        <echo message="reverting build"/>
        <move todir="${pre-home.target}" verbose="fales" overwrite="true">
            <fileset dir="${home.target}"/>
        </move>
        <move todir="${home.target}" verbose="true">
            <fileset dir="${post-home.target}"/>
        </move>
        <move todir="${post-home.target}" failonerror="false" verbose="true">
            <fileset dir="${archive-home.target}"/>
        </move>

        <echo message=":REVERTED BUILD SUCCESSFULY:"/>
    </target>


    <!-- removed the has.pre-directories clause, as we shouldn't get here unless the pre-compile has been built -->
    <target name="advance-build"
            description="Moves build from post-home to archive-home, home to post-home, and pre-home to home">
        <echo message="advancing build"/>
        <fail message=":FAIL TO ADVANCE BUILD.  PRE DIRECTORIES DO NOT EXIST TO MOVE:">
            <condition>
                <not>
                    <and>
                        <available file="${pre-web-inf}"/>
                        <available file="${gwt.pre-target}"/>
                        <!-- <available file="${pre.version.file}"/> -->
                    </and>
                </not>
            </condition>
        </fail>
        <move todir="${archive-home.target}" failonerror="false" verbose="false" overwrite="true">
            <fileset dir="${post-home.target}"/>
        </move>
        <move todir="${post-home.target}" failonerror="false" verbose="false">
            <fileset dir="${home.target}"/>
        </move>
        <move todir="${home.target}" verbose="false">
            <fileset dir="${pre-home.target}"/>
        </move>

        <echo message=":BUILD ADVANCED SUCCESSFULY:"/>
    </target>

    <target name="notify-deploy" if="isproduction">
        <emailMessage message="Production is beginning the deployment cycle." email="curators@zfin.org"/>
    </target>

    <target name="notify-up" if="isproduction">
        <emailMessage message="Production should now be available." email="curators@zfin.org"/>
    </target>

    <target name="notify-restart" if="isproduction">
        <emailMessage message="Production is restarting and will be available momentarily." email="curators@zfin.org"/>
    </target>


    <macrodef name="emailMessage">
        <attribute name="message"/>
        <attribute name="email"/>
        <sequential>
            <java classname="org.zfin.framework.mail.IntegratedJavaMailSender"
                  fork="yes"
                  classpathref="classpath">
                <!-- subject -->
                <arg value="@{message}"/>
                <!-- message -->
                <arg value="@{message}"/>
                <!-- email -->
                <arg value="@{email}"/>
            </java>
        </sequential>
    </macrodef>

    <target name="deploy" depends="has-tomcat-symlink,pre-deploy,build-properties,advance-build,notify-restart,restart,notify-up,test"
            description="Performs the full build, test, move to production, and tomcat restart appropriate for the current environment"/>

    <target name="pre-deploy" depends="do,unittests-quiet,notify-deploy,prepareDeploy,gwt,copy-to-pre-release"
            description="Target to compile all classes (excluding jsp files) and then deploy the necessary files to user's web environment.">
        <antcall target="copy-indexer-build-file-with-env-variables"/>
        <!-- Generate last jsp file before compiling -->
        <antcall target="generateJSPVersionFile"/>
        <!-- Want to call at the same time in order match -->
        <antcall target="generateStaticHTMLVersionFile"/>
        <antcall target="jsp-compile"/> 
    </target>

    <filterset id="cssfilters">
        <filter token="SITE_BACKGROUND" value="${SITE_BACKGROUND}"/>
        <filter token="ZDBHOME_BACKGROUND" value="${ZDBHOME_BACKGROUND}"/>
        <filter token="HEADER_BACKGROUND" value="${HEADER_BACKGROUND}"/>
    </filterset>

    <filterset id="javascriptfilters">
        <filter token="WEBDRIVER_PATH_FROM_ROOT" value="${WEBDRIVER_PATH_FROM_ROOT}"/>
        <filter token="GBROWSE_PATH_FROM_ROOT" value="${GBROWSE_PATH_FROM_ROOT}"/>
        <filter token="CGI_BIN_DIR_NAME" value="${CGI_BIN_DIR_NAME}"/>
    </filterset>

    <filterset id="webdriverfilters">
        <filter token="TARGETCGIBIN" value="${TARGETCGIBIN}"/>
        <filter token="WEBDRIVER_LOC" value="${WEBDRIVER_LOC}"/>
    </filterset>

    <filterset id="quartzfilters">
        <filter token="RUN_QUARTZ_JOBS" value="${RUN_QUARTZ_JOBS}"/>
    </filterset>

    <macrodef name="removeWebApp">
        <attribute name="location"/>
        <sequential>
            <delete dir="@{location}/css"/>
            <delete dir="@{location}/javascript"/>
            <delete dir="@{location}/images"/>
            <delete dir="@{location}/WEB-INF"/>
        </sequential>
    </macrodef>

    <macrodef name="copyWebApp">
        <attribute name="from"/>
        <attribute name="to"/>
        <attribute name="overwrite" default="false"/>
        <sequential>
            <copy todir="@{to}" overwrite="@{overwrite}">
                <fileset dir="@{from}">
                    <include name="**/css/*.css"/>
                    <include name="**/javascript/**/*.js"/>
                    <include name="**/javascript/**/*.html"/>
                    <include name="**/WEB-INF/**/*"/>
                    <exclude name="**/*.jar"/>
                    <exclude name="**/*.zip"/>
                    <exclude name="**/*.class"/>
                    <exclude name="**/*.ser"/>
                    <exclude name="**/*.svn"/>
                </fileset>
                <filterset refid="cssfilters"/>
                <filterset refid="javascriptfilters"/>
                <filterset refid="webdriverfilters"/>
                <filterset refid="quartzfilters"/>
            </copy>
            <copy todir="@{to}" overwrite="@{overwrite}">
                <fileset dir="@{from}">
                    <include name="**/images/**"/>
                    <include name="**/WEB-INF/**/*.jar"/>
                    <include name="**/WEB-INF/**/*.zip"/>
                    <include name="**/WEB-INF/**/*.class"/>
                    <include name="**/WEB-INF/**/*.ser"/>
                    <exclude name="**/*.svn"/>
                </fileset>
            </copy>
        </sequential>
    </macrodef>

    <target name="dirtydeploy" depends="compile"
            description="Target to compile all classes (excluding jsp files) and then deploy the necessary files to user's web environment assuming that its already been buil assuming that its already been built">
        <copyWebApp from="${web.dir}" to="${home.target}"/>

        <antcall target="copy-indexer-build-file-with-env-variables"/>
    </target>


    <target name="copy-to-pre-release" description="Copies built files to pre-release area">
        <!-- move non-binary files in order to not replace any characters in Binary files -->
        <copyWebApp from="${web.dir}" to="${pre-home.target}" overwrite="true"/>
    </target>

    <target name="copy-indexer-build-file-with-env-variables">
        <copy file="buildfiles/indexer.xml"
              tofile="${TARGETROOT}/server_apps/quicksearch/build.xml"
              overwrite="true">
            <filterset>
                <filter token="INDEXER_WIKI_HOSTNAME" value="${INDEXER_WIKI_HOSTNAME}"/>
            </filterset>
        </copy>
    </target>


    <target name="prepareDeploy" description="Remove existin pre-release folder">
        <delete dir="${pre-web-inf}"/>
        <delete dir="${gwt.pre-target}"/>
        <mkdir dir="${pre-web-inf}"/>
        <mkdir dir="${gwt.pre-target}"/>
    </target>


    <target name="build-properties" description="Describes build properties for environment">
        <echo>If properties are defined as true, they will show up that way, otherwise will just produce string
            version.
        </echo>
        <echo message="Is informix: ${isinformix}"/>
        <echo message="Is almost: ${isalmost}"/>
        <echo message="Is mutant: ${ismutant}"/>
        <echo message="Not production: ${notproduction}"/>
        <echo message="Has pre-redirctories: ${has.pre-directories}"/>
        <echo message="Has post-redirctories: ${has.post-directories}"/>
    </target>


    <target name="generateStaticHTMLVersionFile">
        <delete file="${pre.static-version.file}"/>
        <exec executable="./buildfiles/generateVersion.sh">
            <arg value="${pre.static-version.file}"/>
        </exec>
    </target>

    <target name="generateJSPVersionFile">
        <delete file="${pre.jsp-version.file}"/>
        <exec executable="./buildfiles/generateVersion.sh">
            <arg value="${pre.jsp-version.file}"/>
        </exec>
    </target>


    <taskdef resource="task.properties" classpath="lib/Java/grand-1.8.jar">
        <classpath refid="extended.classpath"/>
    </taskdef>

    <target name="graph" description="Creates graph of build process">
        <grand output="build.dot" buildfile="build.xml"/>
        <exec executable="dot">
            <arg line="-Tps -Gsize=11.69,8.27 -Grotate=90 -o build.ps build.dot"/>
        </exec>
    </target>

    <macrodef name="regenerateSSHKey">
        <attribute name="ssh-command"/>
        <sequential>
            <delete file="@{ssh-command}"/>
            <delete file="@{ssh-command}.pub"/>
            <exec command="ssh-keygen">
                <arg value="-f"/>
                <arg value="@{ssh-command}"/>
                <arg value="-t"/>
                <arg value="dsa"/>
                <arg value="-N"/>
                <arg value=""/>
            </exec>

            <exec command="./buildfiles/fixKey.sh">
                <arg value="@{ssh-command}"/>
            </exec>
        </sequential>
    </macrodef>


    <target name="generateSSHKeys">
        <regenerateSSHKey ssh-command="cp"/>
        <regenerateSSHKey ssh-command="xdget"/>
        <regenerateSSHKey ssh-command="xdformat"/>
        <regenerateSSHKey ssh-command="blastn"/>
        <regenerateSSHKey ssh-command="blastp"/>
        <regenerateSSHKey ssh-command="blastx"/>
        <regenerateSSHKey ssh-command="tblastn"/>
        <regenerateSSHKey ssh-command="tblastx"/>
    </target>


    <target name="validateDatabases" depends="compile,build-tests">
        <java classname="org.zfin.sequence.blast.ValidateBlastDatabases" fork="yes"
              classpathref="extended.classpath"
                >
        </java>
    </target>

    <target name="report" depends="compile">
        <java classname="org.zfin.expression.EQReport" fork="yes"
              classpathref="extended.classpath">
        </java>
    </target>
</project>


