<?xml version="1.0" encoding="UTF-8"?>
<project name="ZFIN" default="usage" basedir=".">

    <property name="buildfiles.dir" value="buildfiles"/>

    <import file="${buildfiles.dir}/properties.xml"/>
    <import file="${buildfiles.dir}/gwt.xml"/>
    <import file="${buildfiles.dir}/test.xml"/>
    <import file="${buildfiles.dir}/tomcat.xml"/>
    <import file="${buildfiles.dir}/usage.xml"/>
    <import file="${buildfiles.dir}/serialization.xml"/>


    <!-- ====================================================================== -->
    <!-- COMPILE TASKS                                                          -->
    <!-- ====================================================================== -->

    <target name="prepare" depends="hibernate-available" description="Prepares directories for compilation">
        <mkdir dir="${classbin.dir}"/>
        <mkdir dir="${classbin.dir}/resources"/>
        <copy file="${conf.dir}/hibernate.cfg.xml" todir="${classbin.dir}"/>
        <copy file="${conf.dir}/hibernate-gbrowse.cfg.xml" todir="${classbin.dir}"/>
        <copy file="${conf.dir}/ehcache.xml" todir="${classbin.dir}"/>
        <copy file="${conf.dir}/log4j.xml" todir="${classbin.dir}" failonerror="false"/>
        <copy todir="${classbin.dir}/org/zfin">
            <fileset dir="${hibernate.conf.dir}">
                <include name="*.hbm.xml"/>
            </fileset>
        </copy>
        <!--
                <copy file="${conf.dir}/application.properties" todir="${classbin.dir}/resources"/>
        -->
        <antcall target="copy-hibernate-props"/>
        <copy file="${conf.dir}/views.properties" tofile="${classbin.dir}/views.properties"/>
        <copy file="${conf.dir}/zfin-messages.properties" tofile="${classbin.dir}/zfin-messages.properties"/>
    </target>

    <target name="copy-hibernate-props" if="hibernate.exists"
            description="Copy the hiberate.properties file if it exists">
        <echo message="Hibernate configuration file hibernate.properties found"/>
        <copy file="${conf.dir}/hibernate.properties" tofile="${classbin.dir}/hibernate.properties"
              failonerror="false"/>
    </target>


    <target name="do"
            depends="clean, construct-ncbi-dtd-classes,construct-xsd-classes, create-site-search-categories-classes, compile, prepare-properties"
            description="Everything to compile excluding jsp files. No copying into target directory"/>

    <target name="all" depends="deploy" description="The same as deploy for Tom."/>
    <target name="install" depends="deploy" description="Same as deploy."/>


    <target name="compile" depends="prepare"
            description="Target to compile all classes, excluding test files, and moving anything from the source
            folder to the class folder.">
        <copy todir="${classbin.dir}">
            <fileset dir="${source.dir}">
                <include name="**/*.xml"/>
                <exclude name="**/.svn"/>
            </fileset>
        </copy>
        <javac srcdir="source"
               destdir="${classbin.dir}"
               classpathref="extended.classpath"
               fork="true"
               includeAntRuntime="no"
               memoryMaximumSize="256m"
               debug="true"
               target="1.6"/>
        <echo message=":JAVA COMPILE SUCCESSFUL:"/>
    </target>

    <target name="compile-tests"
            description="Target to compile all test classes.">
        <javac srcdir="test"
               destdir="${classbin.dir}"
               classpathref="extended.classpath"
               fork="true"
               includeAntRuntime="no"
               memoryMaximumSize="256m"
               debug="true"
               target="1.6"/>
    </target>

    <target name="remove-pre-and-post-targets"
            description="Remove the pre-WEB-INF folder if exists. It is used for the new build version">
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${pre-web-inf}" includes="**/*"/>
        </delete>
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${post-web-inf}" includes="**/*"/>
        </delete>
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${gwt.pre-target}" includes="**/*"/>
        </delete>
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${gwt.post-target}" includes="**/*"/>
        </delete>
    </target>

    <target name="clean" description="Remove java classes directory contents. ">
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${classbin.dir}" includes="**/*"/>
        </delete>
        <!--<delete includeemptydirs="true" quiet="true">-->
        <!--<fileset dir="${domain-work}" includes="**/*"/>-->
        <!--</delete>-->
    </target>

    <target name="clean-javadoc" description="Cleans javadoc">
        <delete dir="${java-doc.dir}"/>
    </target>

    <target name="javadocs" depends="clean-javadoc" description="Generate Javadocs into ${java-doc.dir}">
        <mkdir dir="${java-doc.dir}"/>
        <javadoc packagenames="org.zfin.*"
                 sourcepath="${source.dir}"
                 excludepackagenames="org.zfin.properties.*"
                 classpathref="extended.classpath"
                 destdir="${java-doc.dir}/zfin"
                 author="true"
                 version="true"
                 maxmemory="300m"
                 use="true"
                 private="yes"
                 windowtitle="ZFIN API"
                 doctitle="ZFIN"
                 bottom="Copyright &#169; 2008 ZFIN"
                 locale="en"
                />
    </target>


    <target name="deploy-javadoc" depends="javadocs" description="Deploy the Javadoc into webroot/util/javadoc/zfin">
        <mkdir dir="${env.TARGETROOT}/${zfin-javadoc}"/>
        <copy todir="${env.TARGETROOT}/${zfin-javadoc}">
            <fileset dir="${java-doc.dir}/zfin">
                <include name="**/"/>
            </fileset>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- CONFIGURATION TASKS                                                    -->
    <!-- ====================================================================== -->

    <target name="hibernate-available" description="Verifies that hibernate is available">
        <available file="${conf.dir}/hibernate.properties" property="${hibernate.exists}"/>
    </target>


    <!-- ====================================================================== -->
    <!-- Generate WAR.                                                          -->
    <!-- ====================================================================== -->

    <target name="simple-war" description="Creates war file with no depends targets">
        <war warfile="${zfin.war}" webxml="${web-inf.dir}/web.xml" duplicate="preserve" index="true">
            <fileset dir="${web.dir}"/>
            <lib dir="${web-inf.dir}/lib"/>
        </war>
    </target>


    <target name="schemaVersion" description="Prints schema version">
        <java fork="yes" classname="org.zfin.database.SchemaManager" taskname="junit" failonerror="true">
            <arg value="-checkSchema"/>
            <classpath refid="extended.classpath"/>
        </java>
    </target>

    <taskdef name="xjc"
             classname="com.sun.tools.xjc.XJCTask"
             classpathref="extended.classpath"
             description="Task to generate java source based on Java Binding definitions and an xsd file"
            >
    </taskdef>

    <target name="construct-ncbi-dtd-classes" description="Run xjc to generate Java files for parsing blast results">
        <echo message="Generating NCBI blast result source files ..."/>
        <echo message="${web.conf}"/>
        <xjc schema="${web.conf}/NCBI_BlastOutput.dtd" binding="${web.conf}/blast-output.xjb" target="source"
             package="org.zfin.sequence.blast.results">
            <arg value="-dtd"/>
            <produces dir="source" includes="org.zfin.sequence.blast.results/*.java"/>
        </xjc>
    </target>

    <target name="construct-xsd-classes" description="Run xjc to generate Java files for DX jobs">
        <echo message="Generating Properties source files ..."/>
        <echo message="${web.conf}"/>
        <xjc schema="${web.conf}/properties.xsd" binding="${web.conf}/properties.xjb" target="source"
             package="org.zfin.properties">
            <produces dir="source" includes="org.zfin.properties/*.java"/>
        </xjc>
    </target>

    <target name="create-site-search-categories-classes" description="Run xsd to generate Java files for DX jobs">
        <echo message="Generating Site Search Categories source files ..."/>
        <echo message="${web.conf}"/>
        <xjc schema="${web.conf}/site-search-categories.xsd" binding="${web.conf}/site-search-categories.xjb"
             target="source"
             package="org.zfin.uniquery.categories">
            <produces dir="source" includes="org.zfin.uniquery.categories/*.java"/>
        </xjc>
    </target>

    <target name="prepare-properties" description="Copy jaxb properties into class hierarchy">
        <copy todir="${classbin.dir}/">
            <fileset dir="${source.dir}">
                <include name="**/jaxb.properties"/>
                <include name="**/bgm.ser"/>
            </fileset>
        </copy>
    </target>


    <target name="remove-archives" description="Removes archived builds (older than post-builds)">
        <delete verbose="true" includeemptydirs="true">
            <fileset dir="${env.TARGETROOT}/home" includes="archive*/**"/>
        </delete>
    </target>

    <target name="revert" depends="revert-build,restart" description="Reverts the build and restarts"/>

    <target name="revert-build"
            description="Moves the last successful build to the current build and this build to the previous build directly (which will get clobbered on a subsequent build).">
        <fail message=":FAIL TO REVERT BUILD.  POST DIRECTORIES DO NOT EXIST TO MOVE:">
            <condition>
                <not>
                    <and>
                        <available file="${post-web-inf}"/>
                        <available file="${gwt.post-target}"/>
                        <!--             <available file="${post.version.file}"/> -->
                    </and>
                </not>
            </condition>
        </fail>
        <!-- move web-inf -->
        <echo message="reverting build"/>
        <delete dir="${pre-web-inf}" verbose="false"/>
        <move todir="${pre-web-inf}" verbose="true">
            <fileset dir="${web-inf.target}"/>
        </move>
        <move todir="${web-inf.target}" verbose="true">
            <fileset dir="${post-web-inf}"/>
        </move>
        <move todir="${post-web-inf}" failonerror="false" verbose="true">
            <fileset dir="${archive-web-inf}"/>
        </move>

        <!-- move the gwt -->
        <delete dir="${gwt.pre-target}" verbose="true"/>
        <move todir="${gwt.pre-target}" verbose="true">
            <fileset dir="${gwt.target}"/>
        </move>
        <move todir="${gwt.target}" failonerror="false" verbose="true">
            <fileset dir="${gwt.post-target}"/>
        </move>
        <move todir="${gwt.post-target}" failonerror="false" verbose="true">
            <fileset dir="${gwt.archive-target}"/>
        </move>

        <!-- move static version file-->
        <delete file="${pre.static-version.file}" verbose="true" failonerror="false"/>
        <move tofile="${pre.static-version.file}" file="${static-version.file}" verbose="true" failonerror="false"/>
        <move tofile="${static-version.file}" file="${post.static-version.file}" verbose="true" failonerror="false"/>
        <echo append="true" file="${static-version.file}">REVERTED DEPLOYMENT!!!</echo>
        <echo append="true" file="${jsp-version.file}">REVERTED DEPLOYMENT!!!</echo>
        <move tofile="${post.static-version.file}" file="${archive.static-version.file}" failonerror="false"
              verbose="true"/>

        <echo message=":WEB-INF, GWT, VERSION DIRS REVERTED SUCCESSFUL:"/>
    </target>


    <!-- removed the has.pre-directories clause, as we shouldn't get here unless the pre-compile has been built -->
    <target name="advance-build"
            description="For WEB-INF and GWT, Deletes archives, moves post to archive, most current to post, and pre to current.">
        <echo message="advancing build"/>
        <fail message=":FAIL TO ADVANCE BUILD.  PRE DIRECTORIES DO NOT EXIST TO MOVE:">
            <condition>
                <not>
                    <and>
                        <available file="${pre-web-inf}"/>
                        <available file="${gwt.pre-target}"/>
                        <!-- <available file="${pre.version.file}"/> -->
                    </and>
                </not>
            </condition>
        </fail>
        <!-- move the WEB-INF -->
        <delete dir="${archive-web-inf}" verbose="false"/>
        <move todir="${archive-web-inf}" failonerror="false" verbose="true">
            <fileset dir="${post-web-inf}"/>
        </move>
        <move todir="${post-web-inf}" failonerror="false" verbose="true">
            <fileset dir="${web-inf.target}"/>
        </move>
        <move todir="${web-inf.target}" verbose="true">
            <fileset dir="${pre-web-inf}"/>
        </move>

        <!-- move the gwt -->
        <delete dir="${gwt.archive-target}" verbose="true"/>
        <move todir="${gwt.archive-target}" failonerror="false" verbose="true">  <!-- add date here -->
            <fileset dir="${gwt.post-target}"/>
        </move>
        <move todir="${gwt.post-target}" failonerror="false" verbose="true">
            <fileset dir="${gwt.target}"/>
        </move>
        <move todir="${gwt.target}" verbose="true">
            <fileset dir="${gwt.pre-target}"/>
        </move>

        <!-- move the static version file-->
        <delete file="${archive.static-version.file}" verbose="true" failonerror="false"/>
        <move tofile="${archive.static-version.file}" file="${post.static-version.file}" failonerror="false"
              verbose="true"/>
        <move tofile="${post.static-version.file}" file="${static-version.file}" failonerror="false" verbose="true"/>
        <move tofile="${static-version.file}" file="${pre.static-version.file}" verbose="true" failonerror="false"/>


        <echo message=":WEB-INF, GWT, VERSION DIRS MOVE SUCCESSFUL:"/>
    </target>


    <target name="deploy" depends="has-tomcat-symlink,pre-deploy,build-properties,advance-build,restart,smokeTests,test"
            description="Performs the full build, test, move to production, and tomcat restart appropriate for the current environment"/>

    <target name="pre-deploy" depends="do,unittests-quiet,prepareDeploy,gwt,copy-to-pre-release"
            description="Target to compile all classes (excluding jsp files) and then deploy the necessary files to user's web environment.">
        <antcall target="copyZfinPropertiesWithEnv">
            <param name="from-zfin-properties-file" value="${web-inf.dir}/zfin-properties.xml"/>
            <param name="to-zfin-properties-file" value="${web-inf.dir}/zfin-change-properties.xml"/>
        </antcall>
        <antcall target="copy-indexer-build-file-with-env-variables"/>
        <exec executable="perl" output="output.log">
            <!-- on embryonix should be the following -->
            <!-- <arg value="/private/ZfinLinks/Commons/bin/makespecific.pl"/>  -->
            <arg value="${env.MAKESPECIFIC}"/>
            <arg value="${basedir}/home/WEB-INF/zfin-change-properties.xml"/>
            <arg value="${env.TRANSLATETABLE}"/>
            <arg value="${pre-web-inf}/zfin-properties.xml"/>
        </exec>
        <delete file="${basedir}/home/WEB-INF/zfin-change-properties.xml"/>
        <!-- Generate last jsp file before compiling -->
        <antcall target="generateJSPVersionFile"/>
        <!-- Want to call at the same time in order match -->
        <antcall target="generateStaticHTMLVersionFile"/>
        <antcall target="jsp-compile"/>
    </target>

    <target name="copy-to-pre-release" description="Copies built files to pre-release area">
        <!-- move non-binary files in order to not replace any characters in Binary files -->
        <copy todir="${pre-web-inf}">
            <fileset dir="${web-inf.dir}">
                <include name="**/*"/>
                <exclude name="**/*.jar"/>
                <exclude name="**/*.zip"/>
                <exclude name="**/*.class"/>
                <exclude name="**/*.ser"/>
                <exclude name="**/*.svn"/>
            </fileset>
            <filterset>
                <filter token="TARGETCGIBIN" value="${env.TARGETCGIBIN}"/>
                <filter token="WEBDRIVER_LOC" value="${env.WEBDRIVER_LOC}"/>
                <filter token="RUN_QUARTZ_JOBS" value="${env.RUN_QUARTZ_JOBS}"/>
            </filterset>
        </copy>
        <copy todir="${pre-web-inf}">
            <fileset dir="${web-inf.dir}">
                <include name="**/*.jar"/>
                <include name="**/*.zip"/>
                <include name="**/*.class"/>
                <include name="**/*.ser"/>
                <exclude name="**/*.svn"/>
            </fileset>
        </copy>
    </target>

    <target name="copy-indexer-build-file-with-env-variables">
        <copy file="buildfiles/indexer.xml"
              tofile="${env.TARGETROOT}/server_apps/quicksearch/build.xml"
              overwrite="true">
            <filterset>
                <filter token="INDEXER_WIKI_HOSTNAME" value="${env.INDEXER_WIKI_HOSTNAME}"/>
            </filterset>
        </copy>
    </target>


    <target name="copyZfinPropertiesWithEnv">
        <copy file="${from-zfin-properties-file}"
              tofile="${to-zfin-properties-file}"
              overwrite="true">
            <filterset>
                <!--not sure if this is still used-->
                <filter token="SECUREPORT" value="${secureport}"/>

                <filter token="DOMAIN" value="${env.DOMAIN_NAME}"/>
                <filter token="WIKI_USERNAME" value="${env.WIKI_USER}"/>
                <filter token="WIKI_PASSWORD" value="${env.WIKI_PASS}"/>
                <filter token="WIKI_HOSTNAME" value="${env.WIKI_HOST}"/>
                <filter token="WIKI_PUSH_TO_WIKI" value="${env.WIKI_PUSH_TO_WIKI}"/>
                <!--<filter token="INDEXER_WIKI_USERNAME" value="${env.INDEXER_WIKI_USERNAME}"/>-->
                <!--<filter token="INDEXER_WIKI_PASSWORD" value="${env.INDEXER_WIKI_PASSWORD}"/>-->
                <filter token="INDEXER_WIKI_HOSTNAME" value="${env.INDEXER_WIKI_HOSTNAME}"/>

                <!--web host variables-->
                <filter token="WEBHOST_BLAST_DATABASE_PATH" value="${env.WEBHOST_BLAST_DATABASE_PATH}"/>
                <filter token="WEBHOST_XDGET" value="${env.WEBHOST_XDGET}"/>
                <filter token="WEBHOST_XDFORMAT" value="${env.WEBHOST_XDFORMAT}"/>
                <filter token="WEBHOST_USER" value="${env.WEBHOST_USER}"/>
                <filter token="WEBHOST_HOSTNAME" value="${env.WEBHOST_HOSTNAME}"/>
                <filter token="WEBHOST_BINARY_PATH" value="${env.WEBHOST_BINARY_PATH}"/>
                <filter token="WEBHOST_KEY_PATH" value="${env.WEBHOST_KEY_PATH}"/>

                <!--gbrowse variables -->
                <filter token="GBROWSE_DB" value="${env.GBROWSE_DB}"/>
                <filter token="GBROWSE_DB_HOST" value="${env.GBROWSE_DB_HOST}"/>

                <!--blast server variables-->
                <filter token="BLASTSERVER_BLAST_DATABASE_PATH" value="${env.BLASTSERVER_BLAST_DATABASE_PATH}"/>
                <filter token="BLASTSERVER_XDGET" value="${env.BLASTSERVER_XDGET}"/>
                <filter token="BLASTSERVER_XDFORMAT" value="${env.BLASTSERVER_XDFORMAT}"/>
                <filter token="BLASTSERVER_USER" value="${env.BLASTSERVER_USER}"/>
                <filter token="BLASTSERVER_HOSTNAME" value="${env.BLASTSERVER_HOSTNAME}"/>
                <filter token="BLASTSERVER_DISTRIBUTED_QUERY_PATH" value="${env.BLASTSERVER_DISTRIBUTED_QUERY_PATH}"/>
                <filter token="BLASTSERVER_BINARY_PATH" value="${env.BLASTSERVER_BINARY_PATH}"/>
                <!--script variable-->
                <filter token="BLASTSCRIPT_TARGET_PATH" value="${env.BLASTSCRIPT_TARGET_PATH}"/>

                <!--jobs variables-->
                <filter token="RUN_QUARTZ_JOBS" value="${env.RUN_QUARTZ_JOBS}"/>
            </filterset>
        </copy>
    </target>

    <target name="dirtydeploy" depends="compile"
            description="Target to compile all classes (excluding jsp files) and then deploy the necessary files to user's web environment assuming that its already been buil assuming that its already been built">
        <copy todir="${env.TARGETROOT}">
            <fileset dir="${basedir}">
                <include name="home/WEB-INF/web.xml"/>
                <include name="home/WEB-INF/**/*.jsp"/>
                <include name="${source.dir}/**/*.gwt.xml"/>
                <include name="home/index-java.html"/>
                <include name="home/WEB-INF/conf/*.xml"/>
                <exclude name="**/.svn"/>
            </fileset>
            <filterset>
                <filter token="TARGETCGIBIN" value="${env.TARGETCGIBIN}"/>
                <filter token="RUN_QUARTZ_JOBS" value="${env.RUN_QUARTZ_JOBS}"/>
            </filterset>
        </copy>
        <copy todir="${env.TARGETROOT}">
            <fileset dir="${basedir}">
                <include name="home/*.jsp"/>
                <include name="home/WEB-INF/**"/>
                <include name="home/dev/**"/>
                <include name="home/tiles/**"/>
                <include name="home/anatomy/**"/>
                <exclude name="**/.svn"/>
            </fileset>
        </copy>


        <antcall target="copyZfinPropertiesWithEnv">
            <param name="from-zfin-properties-file" value="${web-inf.dir}/zfin-properties.xml"/>
            <param name="to-zfin-properties-file" value="${web-inf.dir}/zfin-change-properties.xml"/>
        </antcall>

        <antcall target="copy-indexer-build-file-with-env-variables"/>
        <exec executable="perl" output="output.log">
            <!-- on embryonix should be the following -->
            <!-- <arg value="/private/ZfinLinks/Commons/bin/makespecific.pl"/>  -->
            <arg value="${env.MAKESPECIFIC}"/>
            <arg value="${basedir}/home/WEB-INF/zfin-change-properties.xml"/>
            <arg value="${env.TRANSLATETABLE}"/>
            <arg value="${env.TARGETROOT}/home/WEB-INF/zfin-properties.xml"/>
        </exec>
    </target>

    <target name="prepareDeploy" description="Remove existin pre-release folder">
        <delete dir="${pre-web-inf}"/>
        <delete dir="${gwt.pre-target}"/>
        <mkdir dir="${pre-web-inf}"/>
        <mkdir dir="${gwt.pre-target}"/>
    </target>


    <target name="build-properties" description="Describes build properties for environment">
        <echo>If properties are defined as true, they will show up that way, otherwise will just produce string
            version.
        </echo>
        <echo message="Is informix: ${isinformix}"/>
        <echo message="Is almost: ${isalmost}"/>
        <echo message="Is mutant: ${ismutant}"/>
        <echo message="Not production: ${notproduction}"/>
        <echo message="Has pre-redirctories: ${has.pre-directories}"/>
        <echo message="Has post-redirctories: ${has.post-directories}"/>
    </target>


    <target name="generateStaticHTMLVersionFile">
        <delete file="${pre.static-version.file}"/>
        <exec executable="./buildfiles/generateVersion.sh">
            <arg value="${pre.static-version.file}"/>
        </exec>
    </target>

    <target name="generateJSPVersionFile">
        <delete file="${pre.jsp-version.file}"/>
        <exec executable="./buildfiles/generateVersion.sh">
            <arg value="${pre.jsp-version.file}"/>
        </exec>
    </target>


    <taskdef resource="task.properties" classpath="lib/Java/grand-1.8.jar">
        <classpath refid="extended.classpath"/>
    </taskdef>

    <target name="graph" description="Creates graph of build process">
        <grand output="build.dot" buildfile="build.xml"/>
        <exec executable="dot">
            <arg line="-Tps -Gsize=11.69,8.27 -Grotate=90 -o build.ps build.dot"/>
        </exec>
    </target>

    <macrodef name="regenerateSSHKey">
        <attribute name="ssh-command"/>
        <sequential>
            <delete file="@{ssh-command}"/>
            <delete file="@{ssh-command}.pub"/>
            <exec command="ssh-keygen">
                <arg value="-f"/>
                <arg value="@{ssh-command}"/>
                <arg value="-t"/>
                <arg value="dsa"/>
                <arg value="-N"/>
                <arg value=""/>
            </exec>

            <exec command="./buildfiles/fixKey.sh">
                <arg value="@{ssh-command}"/>
            </exec>
        </sequential>
    </macrodef>


    <target name="generateSSHKeys">
        <regenerateSSHKey ssh-command="cp"/>
        <regenerateSSHKey ssh-command="xdget"/>
        <regenerateSSHKey ssh-command="xdformat"/>
        <regenerateSSHKey ssh-command="blastn"/>
        <regenerateSSHKey ssh-command="blastp"/>
        <regenerateSSHKey ssh-command="blastx"/>
        <regenerateSSHKey ssh-command="tblastn"/>
        <regenerateSSHKey ssh-command="tblastx"/>
    </target>


    <target name="validateDatabases" depends="compile,build-tests">
        <java classname="org.zfin.sequence.blast.ValidateBlastDatabases" fork="yes"
              classpathref="extended.classpath">
            <jvmarg value="-DDBNAME=${dbname}"/>
            <jvmarg value="-DCONFIGURATION_DIRECTORY=${classbin.dir}/org/zfin"/>
            <jvmarg value="-DINFORMIX_SERVER=${informixserver}"/>
            <jvmarg value="-DINFORMIX_PORT=${informixport}"/>
            <jvmarg value="-DSQLHOSTS_HOST=${sqlhosts-host}"/>
        </java>
    </target>

</project>


