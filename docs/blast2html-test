#!/usr/bin/perl
#
# html4blast
# 
# Usage:
#        html4blast [options] <file>
#   options:
#           -g         make graphical alignment summary
#           -o <file>  output file
#           -h         prints usage 
#           -s         not used now, inherited from original file
#                      
# The script takes blast standard txt output, generate graphic display and
# add linkouts. The graphic display is currently limited to the first 50
# alignments. 
#
 
use strict;
use Getopt::Std;
use File::Basename;
use DBI;
use constant TIMELIMIT => 20;    # blast execution time limit 20 minutes

my (%LINKOUTS, $PRINT_WUINFO, $GLOBAL_ROW, $QUERY_FILE, $GLOBAL_CUR_ACC, $GLOBAL_QUERY_ID, @GLOBAL_ANCHOR_TOP, $DATALIB, %ACC_ZFINLINK, $dbh);

## Parse command line options
my $prog = basename($0);
my %opts = ();

if (! getopts("gho:s", \%opts) || $opts{'h'}) {
	usage_display($prog); 
	exit; 
}

my $infile = shift(@ARGV);
my $tabresult = $infile.".tab";
my $outfile;

if ($opts{'o'}) {
	$outfile = $opts{'o'}; 
}

my $BIN_DIR = "/common/bin";

$dbh = DBI->connect('dbi:mysql:ZDATA:portal2net','zuser','mutant');

$LINKOUTS{"gb"} = "http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=nucleotide&val=";
   # zfin use --  http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Search&db=Nucleotide&doptcmdl=GenBank&term=
$LINKOUTS{"emb"} = "http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=nucleotide&val=";
$LINKOUTS{"dbj"} = "http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=nucleotide&val=";
$LINKOUTS{"sp"} = "http://us.expasy.org/cgi-bin/niceprot.pl?";
$LINKOUTS{"ens_trsp"} = "http://www.ensembl.org/Danio_rerio/transview?transcript=";
$LINKOUTS{"ens_gn"} = "http://www.ensembl.org/Danio_rerio/geneview?gene=";
$LINKOUTS{"tigr"} = "http://compbio.dfci.harvard.edu/tgi/cgi-bin/tgi/tc_report.pl?species=zebrafish&tc=";
$LINKOUTS{"ti"} = "http://www.ncbi.nlm.nih.gov/Traces/trace.cgi?cmd=retrieve&s=search&m=obtain&retrieve.x=0&retrieve.y=0&val=";
$LINKOUTS{"vg_g"} = "http://vega.sanger.ac.uk/Danio_rerio/geneview?gene=";
$LINKOUTS{"vg_t"} = "http://vega.sanger.ac.uk/Danio_rerio/transview?db=core;transcript=";
$LINKOUTS{"zfin"} ="http://zfin.org/cgi-bin/webdriver?MIval=aa-markerview.apg&OID=";
$LINKOUTS{"ref_n"} ="http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=nucleotide&val=";
$LINKOUTS{"ref_p"} ="http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val=";

system("$BIN_DIR/blast2table.pl $infile > $tabresult") && die "blast2table.pl failed\n"; 

open (IN, "<$infile" ) or die "Cannot open the blast text file to read.\n";
open (OUT, ">$outfile") or die "Cannot open the html file to write. \n";

print OUT "<PRE>\n";
$PRINT_WUINFO = 0;

while (<IN>) {
    
    # Output copyright info. For batch query, generate a top accession bar to 
    # easy the access to each query sequence. 
    
    if (/^\w*BLAST\w\s*.*WashU/) {
		&printWUInfo ($_);
		if ((!$PRINT_WUINFO )&& (&generateAccessionBar() > 1)) {
		    &printAccessionBar();
		}
		print OUT "<HR>\n";
		$PRINT_WUINFO = 1;
		$_ = $GLOBAL_ROW;			
    }
    
    if (/^\s*Query=\s*(\S+)/) {
	        $GLOBAL_QUERY_ID = $1;  
		$GLOBAL_CUR_ACC = &getAccessionNum($1); 
	
		s/Query/\<b\>Query\<\/b\>/;	
		print OUT "<a name='sum$GLOBAL_CUR_ACC'>";
		
		chop;
		print OUT;
		
		if (@GLOBAL_ANCHOR_TOP > 1) {
		    print OUT "&nbsp;&nbsp;&nbsp;&nbsp;<A HREF='#top'>Top</A>";
		}
		print OUT "\n";
		next;
    }
    
    if (/^\s*Database:/) {
		s/Database/\<b\>Database\<\/b\>/;
		print OUT;
		$DATALIB = "zfish" if (/zebrafish|zfin|_zf/i);
		$DATALIB = "zfin_xpat_cdna_seq" if (/zfin/i && /Expression/i);
		next;
    }
    
    # Skip the search dynamic line, display the graphic overview is checked
    if (/^\s*Searching..../) {
	
	# generate graphic display if required
	if ($opts{'g'}) {
	    # include the accession number in the file name to ensure
            # image name uniqueness for batch blast 
	    my $tmpimage = "img_$GLOBAL_CUR_ACC.png";

            # Repbase sequence has () in accession number field, it causes  
            # problem as a file name both for file creation and image display.
            # For simplicity, we delete the ()s.

	    $tmpimage =~ s/\(//; $tmpimage =~ s/\)//;

	    &forkProcessExec ("/usr/bin/grep \"^$GLOBAL_QUERY_ID\t\" $tabresult | /usr/bin/head -50 | $BIN_DIR/blast-imager.pl > $tmpimage");
	    chmod (0666, $tmpimage);
	    print OUT "<br> ";
	    print OUT "<IMG border=0 src=$tmpimage ISMAP><p>";	
	}	
	next;
    }
    
    
    if (/^\s*Sequences producing /) {
		chop;
		print OUT;
	
		#in case of zebrafish db, add a column for ZFIN correspondings
		if ($DATALIB =~ /zf/) {
			print OUT "&nbsp;&nbsp;<a href='http://zfin.org'>ZFIN</a>\n";
		}
	
		$_ = <IN>;
		print OUT if (/^$/) or die "Unexpected Output Format!\n";

		$GLOBAL_ROW = <IN>;

		my $pre_accession = "t";

		while ($GLOBAL_ROW !~ /^$/ ) {
			$GLOBAL_ROW =~ s/^\s*//;
			my $accession = &getAccessionNum($GLOBAL_ROW);
			if ( $accession ne $pre_accession ) {
			    $GLOBAL_ROW = &addLinkOuts($GLOBAL_ROW);
			    my $score = &getScoreData($GLOBAL_ROW);
			    # the space at both end of the score is important
			    # to avoid crash when score coincidently is part of accession.
			    $GLOBAL_ROW =~ s/ $score / \<a href="#$accession"\>$score\<\/a\> / if $score;
			    
			    chomp ($GLOBAL_ROW);
			    
			    print OUT "$GLOBAL_ROW";
			    
			    #in case of zebrafish datasets, query ZFIN for each match
			    if ($DATALIB =~ /zf/) {			
				&fetchMrkrLink($accession, $DATALIB);
			    }
			    print OUT "\n";
			    $pre_accession = $accession;
			}
		        $GLOBAL_ROW = <IN>;
		} 			
		next;
    }		
    
    my $pre_accession = "";
    my $accession = "";
    if (/^>\s*(.+)/) {
	my $first_hit = "t"; 
	$accession = getAccessionNum($1);
	$pre_accession = getAccessionNum($1);
	print OUT "<a name='$accession'>";
	my $linked = &addLinkOuts($1);	
	$_ = ">".$linked;
	chomp;
	print OUT "\n";
	print OUT;

	# read in the rest hits of this query
	$/ = "\nParameter";
	$_ = <IN>;
	my @matches = split ">";
	foreach my $match (@matches) {

	    chop $match; # get rid of ">"
	    my @one_hit = split (/\n/,$match);
	    
	    if ( $first_hit eq "f" ){

		my $fst_def_line = shift @one_hit;
		$accession = getAccessionNum($fst_def_line);
		if ( $accession eq $pre_accession ) {
		   
		    next;
		}else {
		    print OUT "<a name='$accession'>";
		    my $linked = &addLinkOuts($fst_def_line);
		    $_ = ">".$linked;
		    print OUT "\n\n";
		    print OUT;
		}
	    }
	    
	    # "Summary" anchor is at the left of the first defline. 
	    # in case of short defline, like the zfin Morpholino db,
	    # the $seq_zfinlinks could easily fit in the first line,
	    # "Summary" print would be deferred. 
		
	    my $printSummary = "";
	    my $printLength = "";
	    foreach my $one_line (@one_hit){
		if ($one_line !~ /^\s+Length/ && !$printLength ) {
		    if (!$printSummary) {
			print OUT "&nbsp;&nbsp;&nbsp;<a href='#sum$GLOBAL_CUR_ACC'>Summary</a>";
			$printSummary = "t";
		    }
		}
		elsif ($one_line =~ /^\s+Length/) { 
		
		    print OUT "&nbsp;&nbsp;$ACC_ZFINLINK{$accession}" if ($DATALIB =~ /zf/);
		    print OUT "&nbsp;&nbsp;&nbsp;<a href='#sum$GLOBAL_CUR_ACC'>Summary</a>" unless $printSummary;
		    $printLength = "t";
		}
		else {
		}
		print OUT "\n";
		print OUT "$one_line";
	    }   # end of foreach

	    $first_hit = "f";
	    $pre_accession = $accession;	
	} # end of foreach
	
	$/ = "\n"; # restore 
	next;
    }

    # directly printout other lines
    print OUT;
 
}
print OUT "</PRE>\n";
close OUT;

close IN;


#########################################################################
#
#
sub forkProcessExec($) {
    my $command = $_[0];
    
    my $kidpid;
    if (!defined($kidpid = fork())) {
		#fork returned undef, so failed
		die "Cannot fork: $!";
		
    }elsif ($kidpid) {
		# parent
		# command execution 
		system ("$command");  
		
	kill 9, $kidpid;
		
    }else {
		#child
		my $execTime = 0;
		while ($execTime < TIMELIMIT) {
		    sleep (60);
		    print ".";
		    $execTime ++ ;
		}
	    }
}

#######################################################
#
# accession number is read from the first component
# (space separated)of the input string. It is deflined
# as the first field with numeric numbers (except gi| deflines),
#
# parameter: string
# return:  accession number
#
sub getAccessionNum() {
    my $string = $_[0];
    my @defline = split (/\s+/, $string);
    my $defline_head = $defline[0];

    my @ids = split (/[:\|]/, $defline_head);
    if ($ids[0] eq "gi") {
	shift @ids;
	shift @ids;
    }
    my $id;        #accession with version if exist
    my $index = 0;

    if (@ids == 1) {  # if defline head only contains accession, like ensembl transcript db
	return $ids[0];
    }
    else {
	while ($index < @ids && $ids[$index] !~ /[0-9]/){
	    $index ++;
	}
	$index-- if ($index == @ids);
	$id = $ids[$index];	
	
	my @accession = split (/\./, $id);
	my $accession = shift @accession;
	
	return $accession;
    }
}
##########################################
#
# parse out the db name from the first
# component of the input string.It is defined
# as the field right before the accession num.
#
# parameter: string
# return: db name (if none, use acc instead)
#
sub getDbidentifier () {
    my $string = $_[0];
    my @defline = split (/\s+/, $string);
    my @defline_head = split (/[:\|]/, $defline[0]);


    if ($defline_head[0] eq "gi") {
		shift @defline_head;
		shift @defline_head;
    }
    my $index = 0;
    while ($index < @defline_head && $defline_head[$index] !~ /[0-9]/){
		$index ++;
    }
    $index-- if ($index == @defline_head);
    my $dbid;
    if ($index == 0) {
		$dbid = $defline_head[0];
    }
    else {
		$dbid = $defline_head[$index-1];	
    }
   
    return $dbid;
}

###################################
sub getScoreData() {
    my $string = $_[0];
    my @row = split(/ +/, $string);
    pop @row;
    pop @row;
    my $score = pop @row;
    if ($score =~ /^\d+$/) {
	return $score;
    }else {
	return;
    }
}
#####################################
#
# Use LINKOUTS hash to code linkouts at the proper 
# position in the input string
#
# parameter : string
# return: string with linkouts
#
sub addLinkOuts() {
    my $string = $_[0];
       
    my $accession = &getAccessionNum($string);
    my $dbid  = &getDbidentifier ($string); 
    my $score = &getScoreData($string);

    if ($dbid eq "rep") {        # repbase db do not have linkout
	# no change to $string
    }
    elsif ($dbid eq $accession) {   # if no explicit db name, such as ensembl transcript, tigr

		if ($dbid =~ /^ENS/) {
			my @row = split (/ /,$string);         #shift out transcript acc, to get linkout for gene acc   
			shift @row;
			my $new_row = join(" ", @row);
			
			my $gene_acc = &getAccessionNum($new_row);           
			$string =~ s/$gene_acc/$gene_acc\<\/a\>/;
			$string =~ s/gene:/gene:\<a href="$LINKOUTS{'ens_gn'}$gene_acc"\>/;
			
			$dbid = "ens_trsp";
		}
		if ($dbid =~ /^TC/) {
			$dbid = "tigr";
		}
		if ($dbid =~ /^OTTDARG/) {
		    $dbid = "vg";
		}
		if ($dbid =~ /^ZDB/) {
		    $dbid = "zfin";
		}
		$string =~ s/^$accession/\<a href="$LINKOUTS{$dbid}$accession"\>$accession\<\/a\>/;
    }
    else {
	        my $dbkey = $dbid;
		if ($dbid =~ /ref/ ) {
		    $dbkey = "ref_n" if ($accession =~ /NM_/);
		    $dbkey = "ref_p" if ($accession =~ /[NX]P_/);
		}
		if ($dbid =~ /tpe/ ) {
		    # as of 04/2006, only vega file use 'tpe',
		    # and it has two identifiers that links out
		    $string =~ s/OTTDARG(\d+)/\<a href="$LINKOUTS{'vg_g'}OTTDARG$1"\>OTTDARG$1\<\/a\>/;
                    $dbkey = "vg_t";
		}
		$string =~ s/^/\<a href="$LINKOUTS{$dbkey}$accession"\>/;
		$string =~ s/(.)$dbid(.)$accession/$1$dbid$2$accession\<\/a\>/;
    }
    
    # the space at both end of the score is important
    # to avoid crash when score coincidently is part of accession.
    $string =~ s/ $score / \<a href="#$accession"\>$score\<\/a\> /;
	
    return $string;
}
#####################################################
sub fetchMrkrLink () {
    my $acc = shift;
    my $db  = shift;

    my $zfinlink = '';
    
    my $zfin_mrkr_view_url = "http://zfin.org/cgi-bin/webdriver?MIval=aa-markerview.apg&OID=";
    my $zfin_mrkr_select_url = "http://zfin.org/cgi-bin/webdriver?MIval=aa-markerselect.apg&marker_type=GENE&query_results=t&input_acc=";

    my $zfin_gene_xpat_url = "http://zfin.org/cgi-bin/webdriver?MIval=aa-xpatselect.apg&query_results=true&xpatsel_geneZdbId=";
    my $zfin_gene_go_url = "http://zfin.org/cgi-bin/webdriver?MIval=aa-markergoview.apg&OID=";
    my $zfin_gene_pato_url = "http://zfin.org/cgi-bin/webdriver?MIval=aa-pheno_summary.apg&OID=";

    my ($gene_has_xpat, $gene_has_xpat_img, $gene_has_go, $gene_has_pato, $gene_has_pato_img);

    my $sql = "select accmrkrrel_mrkr_1_display, accmrkrrel_mrkr_1_oid,
                      accmrkrrel_mrkr_2_display, accmrkrrel_mrkr_2_oid
                 from accession_marker_relationship
                where accmrkrrel_accession = '$acc';";
    my ($mrkr_1_display, $mrkr_1_oid, $mrkr_2_display, $mrkr_2_oid) = $dbh->selectrow_array($sql);

    my $zfin_mrkr_1_url = ($mrkr_1_oid =~ /ZDB-/) ? $zfin_mrkr_view_url : $zfin_mrkr_select_url;

    if ($mrkr_1_oid =~ /ZDB-GENE-/) {

	$sql = "
                select generd_has_xpat, generd_has_xpat_img, generd_has_go,
                       generd_has_pato, generd_has_pato_img
                  from gene_related_data
                 where generd_zdb_id = '$mrkr_1_oid' ";
	($gene_has_xpat, $gene_has_xpat_img, $gene_has_go, $gene_has_pato, $gene_has_pato_img) = $dbh->selectrow_array($sql);
	
    }
  
    if ($mrkr_1_display ) { 
	$zfinlink = "&nbsp; <a href=\"$zfin_mrkr_1_url$mrkr_1_oid\">$mrkr_1_display</a> " ;

	if ($gene_has_xpat_img) {
 	    my $icon = $db eq "zfin_xpat_cdna_seq" ? "camera_icon.gif" : "E_camera.png";
	    $zfinlink .= "<a href=\"$zfin_gene_xpat_url$mrkr_1_oid\"><IMG border=\"0\" style=\"position: relative; bottom: -.3em;\" title=\"view gene expression\" src=\"/images/$icon\"></a>" ;
        }
        elsif ($gene_has_xpat) {
            $zfinlink .= "<a href=\"$zfin_gene_xpat_url$mrkr_1_oid\"><IMG border=\"0\" style=\"position: relative; bottom: -.3em;\" title=\"view gene expression\" src=\"/images/E_letter.png\"></a>";
	}

        if ($gene_has_pato) {
            my $icon = $gene_has_pato_img ? "P_camera.png" : "P_letter.png";

            $zfinlink .= "<a href=\"$zfin_gene_pato_url$mrkr_1_oid\"><IMG border=\"0\" style=\"position: relative; bottom: -.3em;\" title=\"view phenotype data\" src=\"/images/$icon\"></a>" ;
        }
      
	$zfinlink .= "<a href=\"$zfin_gene_go_url$mrkr_1_oid\"><IMG border=\"0\" style=\"position: relative; bottom: -.3em;\" title=\"view GO annotation\" src=\"/images/G_letter.png\"></a>" if $gene_has_go;
    }

    $zfinlink .= "&nbsp; <a href=\"$zfin_mrkr_view_url$mrkr_2_oid\">$mrkr_2_display</a>" if $mrkr_2_display;
    
    $ACC_ZFINLINK{"$acc"} = $zfinlink if $zfinlink;
    print OUT $zfinlink;
}


#####################################################
sub printWUInfo($) {

    $GLOBAL_ROW = shift;

    if (! $PRINT_WUINFO) {
		print OUT $GLOBAL_ROW;
    }
    $GLOBAL_ROW = <IN>;
    while ($GLOBAL_ROW && ($GLOBAL_ROW !~ /^Query=/) ) {
		if (! $PRINT_WUINFO) {
			print OUT $GLOBAL_ROW;
		}
		$GLOBAL_ROW = <IN>;
    }
}

####################################################
sub generateAccessionBar() {

    @GLOBAL_ANCHOR_TOP = ();

    open QUERY, "<$infile" or die "<H2>Cannot open tmp file to read.$!</H2>";
    while (<QUERY>){
	if (/Query=\s*(\S+)/) {
	    my $acc = &getAccessionNum($1);
	    push @GLOBAL_ANCHOR_TOP, "<A HREF='#sum$acc'>$acc</A>";
	}
    }
    close QUERY;
    return (@GLOBAL_ANCHOR_TOP);
}
######################################
sub printAccessionBar() {
    print OUT "<A NAME='top'>";
    print OUT "<b>Input Query Sequences: </b>\n";
    print OUT join("&nbsp;", @GLOBAL_ANCHOR_TOP);
    print OUT "<BR>";
}

#####################################################
#  usage_display
#
# Usage display function
#
sub usage_display {
    my $prg = shift || $0;

    print STDERR "usage: $prg [options] <file>\n\n";
    print STDERR "options [default]:\n";
    print STDERR "  -g        ... Make graphical alignment summary.\n";
    print STDERR "  -h        ... Prints usage display and exit.\n";
    print STDERR "  -o <file> ... Set output to <file> [$outfile].\n";
    print STDERR "  -s        ... not used ...\n";
}

