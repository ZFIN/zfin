<?xml version="1.0" encoding="UTF-8"?>
<project name="test" basedir=".">
    <!-- ====================================================================== -->
    <!-- TESTING TASKS                                                          -->
    <!-- ====================================================================== -->

    <target name="echoProps" depends="loadPropertiesIntoEnum" description="Simple target to dump all ant properties">
        <echoproperties/>
    </target>

    <target name="jversion" description="Prints out java version in use">
        <java fork="yes" classname="ignoreMe">
            <jvmarg line="-version"/>
        </java>
    </target>


    <macrodef name="runBatchTest">
        <attribute name="classNamePattern"/>
        <attribute name="verbose"/>
        <attribute name="outFile"/>
        <sequential>
            <junit fork="false"
                   printsummary="yes"
                   haltonfailure="false"
                   haltonerror="false"
                   showoutput="@{verbose}"
                   maxmemory="2024m"
                    >
                <classpath refid="extended.classpath"/>
                <formatter type="brief"/>
                <formatter type="xml"/>
                <batchtest todir="${test.reports.dir}">
                    <fileset dir="${web-inf.dir}/classes">
                        <!-- exclude the abstract class, bring in the rest...? -->
                        <exclude name="**/Abstract*Spec.class"/>
                        <!--<include name="**/*Spec.class"/>-->
                        <include name="@{classNamePattern}"/>
                    </fileset>
                </batchtest>
            </junit>
        </sequential>
    </macrodef>

    <target name="runFigureTests" depends="compile,build-tests">
        <runBatchTest classNamePattern="**/Image*Spec.class" outfile="figureTests" verbose="true"/>
        <runBatchTest classNamePattern="**/Figure*Spec.class" outfile="figureTests" verbose="true"/>
    </target>

    <target name="runImageTests" depends="compile,build-tests">
        <runBatchTest classNamePattern="**/Image*Spec.class" outfile="imageTests" verbose="true"/>
    </target>

    <target name="runVideoTests" depends="compile,build-tests">
        <runBatchTest classNamePattern="**/Video*Spec.class" outfile="videoTests" verbose="true"/>
    </target>


    <macrodef name="runTest">
        <attribute name="verbose"/>
        <attribute name="testClass"/>
        <attribute name="outFile"/>
        <sequential>
            <junit fork="false"
                   printsummary="yes"
                   haltonfailure="yes"
                   haltonerror="yes"
                   showoutput="@{verbose}"
                   maxmemory="2024m"
                    >
                <classpath refid="extended.classpath"/>
<!--
                <formatter classname="org.zfin.util.JunitFormatter" usefile="false" />
-->
                <test name="@{testClass}" todir="${test.reports.dir}" outfile="@{outFile}">
                    <formatter type="brief"/>
                    <formatter type="xml"/>
                </test>
            </junit>
        </sequential>
    </macrodef>

    <macrodef name="runDBTest">
        <attribute name="verbose"/>
        <attribute name="testClass"/>
        <attribute name="outFile"/>
        <sequential>
            <junit fork="false"
                   printsummary="yes"
                   haltonfailure="yes"
                   haltonerror="yes"
                   showoutput="@{verbose}"
                   maxmemory="2024m"
                    >
                <classpath refid="extended.classpath"/>
                <sysproperty key="log4j.configuration" value="${web-inf.dir}/log4j.xml"/>
                <jvmarg value="-Xmx1024m"/>
                <test name="@{testClass}" todir="${test.reports.dir}" outfile="@{outFile}">
                    <formatter type="brief"/>
                    <formatter type="xml"/>
                </test>
            </junit>
        </sequential>
    </macrodef>

    <target name="unittests" depends="compile,build-tests" description="Unit tests.">
        <runTest testClass="org.zfin.framework.GroovyTest" outfile="groovy-${unitTestFile}" verbose="true"/>
        <runTest testclass="org.zfin.UnitTests" outfile="${unitTestFile}" verbose="true"/>
        <echo message=":UNIT TESTS SUCCESSFUL:"/>
    </target>

    <target name="test-serial" depends="compile,build-tests" description="Unit tests.">
        <runTest testclass="org.zfin.ontology.OntologySerializationTest" outfile="${unitTestFile}" verbose="true"/>
        <echo message=":UNIT TESTS SUCCESSFUL:"/>
    </target>

    <target name="unittests-quiet" depends="compile,build-tests" description="Runs database and unit tests quietly">
        <runTest testclass="org.zfin.UnitTests" outfile="${unitTestFile}" verbose="false"/>
        <runTest testclass="org.zfin.infrastructure.EnumValidationTest" outfile="${validateTestFile}" verbose="false"/>
    </target>

    <target name="ontology-test" depends="compile,build-tests" description="Runs database and unit tests quietly">
        <runTest testclass="org.zfin.ontology.OntologySerializationTest" outfile="${unitTestFile}" verbose="false"/>
    </target>


    <target name="validate" depends="compile,build-tests" description="Unit tests.">
        <runTest testclass="org.zfin.infrastructure.EnumValidationTest" outfile="${validateTestFile}" verbose="true"/>
        <echo message=":VALIDATE TESTS SUCCESSFUL:"/>
    </target>



    <target name="runDBtests" depends="compile,build-tests"
            description="Tests that involve access to the informix database.">
        <runDBTest testclass="org.zfin.DbUnitTests" outfile="${dbTestFile}" verbose="true"/>
        <echo message=":DB UNIT TESTS SUCCESSFUL:"/>
    </target>

    <target name="runSpockTests" depends="compile,build-tests">
       <runBatchTest classNamePattern="**/*Spec.class" outfile="spocktest" verbose="true"/>
    </target>

    <target name="runControllerTests" depends="compile,build-tests"
            description="Tests controller access">
        <runDBTest testclass="org.zfin.DbControllerTests" outfile="${controllerTestFile}" verbose="true"/>
        <echo message=":DB CONTROLLER TESTS SUCCESSFUL:"/>
    </target>


    <target name="runBlasttests" depends="compile,build-tests"
            description="Tests that involve access to the informix and blast databases.">
        <runDBTest testclass="org.zfin.sequence.blast.BlastAndDBTests" outfile="${blastTestFile}" verbose="true"/>
        <echo message=":BLAST TESTS SUCCESSFUL:"/>
    </target>

    <target name="enumtests" depends="compile,build-tests" description="Unit tests for DataExchange module">
        <runDBTest testclass="org.zfin.EnumValidationTestSuite" outfile="enum-results" verbose="true"/>
        <echo message=":DB UNIT TESTS SUCCESSFUL:"/>
    </target>

    <target name="preptagunit" depends="compile" description="Prepares to run the unit test related to JSP tags.
               Deployes it into an app server root directory specified by the environment variable TAGUNIT_HOME ">
        <delete dir="${tagunit-root.dir}/test/zfin"/>
        <copy file="${web-inf.dir}/tld/zfin-tags.tld" todir="${tagunit-root.dir}/WEB-INF/tld/"/>
        <copy todir="${tagunit-root.dir}/test/zfin">
            <fileset dir="test/jsp-tags" defaultexcludes="true">
                <include name="**"/>
            </fileset>
            <filterset>
                <filter token="TARGETCGIBIN" value="${env.TARGETCGIBIN}"/>
            </filterset>
        </copy>
    </target>

    <!--
        <taskdef name="tagunit" classname="org.tagunit.ant.TagUnitTask" />
    -->

    <target name="runTagTests" depends="preptagunit" description="Run the actual tagunit tests. You need to have
            a tagunit context setup in a tomcat server.">
        <tagunit url="http://localhost:8081/" ignorewarnings="true"/>
    </target>


    <!-- an easy to remember tag that should always be kept up to date to match whatever
test(s) need to be run before committing changes or pushing files to production -->
    <!--Test for notproduction and the run tests.  This allows production to run the test if using runtests-quiet-->
    <target name="test" depends="runtests-quiet" description="Runs full suite of tests if in mode if not production">
    </target>



    <target name="runtests-quiet" if="notproduction" depends="compile,build-tests" description="Runs database and unit tests quietly">

        <junit fork="false"
               printsummary="yes"
               haltonfailure="yes"
               haltonerror="yes"
               maxmemory="2024m"
               showoutput="false">
            <test name="org.zfin.UnitTests" todir="${test.reports.dir}"
		  haltonerror="false" haltonfailure="false"
                  failureproperty="test.failure"
                  outfile="${unitTestFile}">
                <formatter type="brief"/>
                <formatter type="xml"/>
            </test>

            <test name="org.zfin.DbUnitTests" todir="${test.reports.dir}" 
		  haltonerror="false" haltonfailure="false"
                  failureproperty="test.failure"
                  outfile="${dbTestFile}">
                <formatter type="brief"/>
                <formatter type="xml"/>
            </test>


            <test name="org.zfin.DbControllerTests" todir="${test.reports.dir}" 
		  haltonerror="false" haltonfailure="false"
                  failureproperty="test.failure"
                  outfile="${controllerTestFile}">
                <formatter type="brief"/>
                <formatter type="xml"/>
            </test>

            <test name="org.zfin.infrastructure.EnumValidationTest" todir="${test.reports.dir}"
		  haltonerror="false" haltonfailure="false"
                  failureproperty="test.failure"
                  outfile="validate-tests">
                <formatter type="brief"/>
                <formatter type="xml"/>
            </test>
               
            <test name="org.zfin.sequence.blast.BlastAndDBTests" todir="${test.reports.dir}"
                  haltonerror="false" haltonfailure="false"
		  failureproperty="test.failure"
                  outfile="${blastTestFile}">
                <formatter type="brief"/>
                <formatter type="xml"/>
            </test>

            <test name="org.zfin.ThirdPartyServiceTests" todir="${test.reports.dir}"
                  outfile="${serviceTestFile}"
                  haltonerror="false" haltonfailure="false" failureproperty="service.failure" 
                  >
                <formatter type="brief"/>
                <formatter type="xml"/>
            </test>

            <test name="org.zfin.SmokeTests" todir="${test.reports.dir}" outfile="${smokeTestFile}"
                  haltonerror="false" haltonfailure="false"
                  failureproperty="smoke.failure">
                <formatter type="brief"/>
                <formatter type="xml"/>
            </test>

            <test name="org.zfin.SmokeTestsReadWrite" todir="${test.reports.dir}" outfile="${smokeTestFileReadWrite}"
                  haltonerror="false" haltonfailure="false"
                  failureproperty="smoke.failure">
                <formatter type="brief"/>
                <formatter type="xml"/>
            </test>

            <classpath refid="extended.classpath"/>
            <sysproperty key="log4j.configuration" value="${web-inf.dir}/log4j.xml"/>
            <jvmarg line="${junit.jvmargs}"/>
            <!-- <arg value="${junit.test.class.name}"/>-->

            <!--<jvmarg value="-DWEBINF=${web-inf.target}"/>-->
            <jvmarg value="-Djava.io.tmpdir=${tomcat-temp}"/>
        </junit>
        <antcall target="run-mart-tests"/>
        <antcall target="handleSmokeFailure">
            <param name="test.output.file" value="${smokeTestFile}"/>
        </antcall>
        <antcall target="handleServiceFailure"/>
        <fail message=":TESTS FAILED:" if="test.failure"/>
        <fail message=":SMOKE TESTS FAILED:" if="smoke.failure"/>
        <fail message=":SERVICE TESTS FAILED:" if="service.failure"/>
        <echo message=":ALL UNIT TESTS PASSED:"/>
    </target>

    <target name="handleServiceFailure" if="service.failure">
        <echo message="${serviceFailureMessage}"/>
        <java classname="org.zfin.framework.mail.IntegratedJavaMailSender"
              fork="false"
              classpathref="classpath">
            <!--subject -->
            <arg value="Failed service tests.  See ${serviceTestFile}.txt."/>
            <!--message-->
            <arg value="${serviceFailureMessage}"/>
        </java>
    </target>



    <taskdef name="groovyc"
             classname="org.codehaus.groovy.ant.Groovyc"
             classpathref="classpath"/>



    <target name="build-tests" depends="loadPropertiesIntoEnum" description="Target to compile all test classes">
        <groovyc srcdir="test"
               destdir="${classbin.dir}"
               classpathref="extended.classpath"
               fork="yes"
               encoding="${encoding}"
               includeAntRuntime="no"
               memoryMaximumSize="256m">
            <javac encoding="${encoding}" deprecation="${javac.deprecation}" debug="on" source="1.7" target="1.7"/>
        </groovyc>

        <!--
               source="1.7"
               debug="true"
               target="1.7"
                        deprecation="${javac.deprecation}"
                        debug="${javac.debug}"/>
        -->
    </target>

    <target name="smoke" depends="compile,build-tests" description="Runs database and unit tests quietly">

        <junit fork="false"
               printsummary="yes"
               haltonfailure="yes"
               haltonerror="yes"
               maxmemory="2024m"
               showoutput="false">
	  
<test name="org.zfin.SmokeTests" todir="${test.reports.dir}" outfile="${smokeTestFile}"
                  haltonerror="false" haltonfailure="false"
                  failureproperty="smoke.failure">
                <formatter type="brief"/>
                <formatter type="xml"/>
            </test>

<test name="org.zfin.SmokeTestsReadWrite" todir="${test.reports.dir}" outfile="${smokeTestFileReadWrite}"
                  haltonerror="false" haltonfailure="false"
                  failureproperty="smoke.failure">
                <formatter type="brief"/>
                <formatter type="xml"/>
            </test>

            <classpath refid="extended.classpath"/>
            <sysproperty key="log4j.configuration" value="${web-inf.dir}/log4j.xml"/>
            <jvmarg line="${junit.jvmargs}"/>
            <!-- <arg value="${junit.test.class.name}"/>-->

            <!--<jvmarg value="-DWEBINF=${web-inf.target}"/>-->
            <jvmarg value="-Djava.io.tmpdir=${tomcat-temp}"/>
        </junit>
	</target>
    <target name="testsingleclass" depends="build-tests" description="Runs a database tests for a single class specified in this target" >
        <java fork="false" classname="org.zfin.ontology.OntologySerializationTest" taskname="junit" failonerror="true">
            <sysproperty key="log4j.configuration" value="${web-inf.dir}/log4j.xml"/>
            <jvmarg line="${junit.jvmargs}"/>
            <arg value="${junit.test.class.name}"/>
            <classpath refid="extended.classpath"/>

            <jvmarg value="-Djava.io.tmpdir=${tomcat-temp}"/>
        </java>
    </target>

    <target name="runatest" depends="build-tests"  description="Runs a test for a single database test specified by junit.test.class.name" >
        <java fork="false" classname="junit.textui.TestRunner" taskname="junit" failonerror="true" maxmemory="1024">
            <!--
                       <sysproperty key="java.endorsed.dirs" value="${endorsed.lib}"/>
           -->
            <sysproperty key="log4j.configuration" value="${web-inf.dir}/log4j.xml"/>
            <jvmarg line="${junit.jvmargs}"/>
            <arg value="${junit.test.class.name}"/>
            <classpath refid="extended.classpath"/>
            <!--<jvmarg value="-DWEBINF=${web-inf.target}"/>-->
            <jvmarg value="-Djava.io.tmpdir=${tomcat-temp}"/>
        </java>
    </target>

    <target name="singletest" depends="build-tests"  description="Executes a single test">
        <java fork="true" classname="junit.textui.TestRunner" taskname="junit" failonerror="true">
            <!--
                        <sysproperty key="java.endorsed.dirs" value="${endorsed.lib}"/>
            -->
            <sysproperty key="log4j.configuration" value="${web-inf.dir}/log4j.xml"/>
            <jvmarg line="${junit.jvmargs}"/>
            <arg value="org.zfin.SmokeTestsReadWrite"/>
            <classpath refid="extended.classpath"/>
        </java>
    </target>

    <target name="runHibernate" depends="compile,build-tests"
            description="Run the Hibernate standalone class for persistence checking">
        <java classname="org.zfin.repository.HibernateStandaloneUtil"
              fork="yes"
              classpathref="extended.classpath">
            <!--<jvmarg value="-DWEBINF=${web-inf.target}"/>-->
            <jvmarg value="-Djava.io.tmpdir=${tomcat-temp}"/>
        </java>
    </target>

    <target name="testMail" depends=""
            description="Runs the mail testing code.">
        <java classname="org.zfin.framework.mail.IntegratedJavaMailSender"
              fork="yes"
              classpathref="classpath">
        </java>
    </target>

    <target name="handleTestFailure" if="test.failure">
        <java classname="org.zfin.framework.mail.IntegratedJavaMailSender"
	            fork="yes"
              classpathref="classpath">
            <arg value="Failed tests."/>
            <arg value="${serviceFailureMessage}"/>
        </java>
    </target>

    <target name="handleSmokeFailure" if="smoke.failure">
        <java classname="org.zfin.framework.mail.IntegratedJavaMailSender"
              fork="yes"
              classpathref="classpath">
            <arg value="Failed smoke tests.  See ${smokeTestFile}.txt."/>
            <arg value="${serviceFailureMessage}"/>
        </java>
    </target>

    <!--Not using runDBtest macrodef here because we are setting smoke.failure as a property-->
    <!--This is used to determine if output should be mailed.  Could be handed in, as well.-->
    <target name="productionSmokeTests" if="isproduction" depends="compile,build-tests" description="Tests to make sure that the system is alive and working properly."  >
        <sleep minutes="1"/>
        <junit fork="yes"
               printsummary="yes"
               haltonfailure="false"
               haltonerror="false"
               showoutput="true"
               maxmemory="1024m"
                >
            <!--            <jvmarg line="${junrt.jvmargs}"/>-->
            <classpath refid="extended.classpath"/>
            <sysproperty key="log4j.configuration" value="${web-inf.dir}/log4j.xml"/>
            <!--<jvmarg value="-DWEBINF=${web-inf.target}"/>-->
            <jvmarg value="-Djava.io.tmpdir=${tomcat-temp}"/>
            <test name="org.zfin.ProductionSmokeTests" outfile="${smokeTestFile}"
                  todir="${test.reports.dir}"
                  haltonerror="false" haltonfailure="true"
                  failureproperty="smoke.failure" >
                <formatter type="brief"/>
                <formatter type="xml"/>
            </test>
        </junit>
        <antcall target="handleSmokeFailure">
            <param name="test.output.file" value="${smokeTestFile}"/>
        </antcall>
    </target>

    <!-- getting a consistent name without having to do a full refactor... -->
    <target name="runSmokeTests" depends="smokeTests"/>

    <!--Not using runDBtest macrodef here because we are setting smoke.failure as a property-->
    <!--This is used to determine if output should be mailed.  Could be handed in, as well.-->
    <target name="smokeTests" if="notproduction" depends="compile,build-tests" description="Tests to make sure that the system is alive and working properly."  >

        <junit fork="false"
               printsummary="yes"
               haltonfailure="false"
               haltonerror="false"
               showoutput="true"
               maxmemory="2024m"
               >
<!--            <jvmarg line="${junrt.jvmargs}"/>-->
            <classpath refid="extended.classpath"/>
            <sysproperty key="log4j.configuration" value="${web-inf.dir}/log4j.xml"/>
            <!--<jvmarg value="-DWEBINF=${web-inf.target}"/>-->
            <jvmarg value="-Djava.io.tmpdir=${tomcat-temp}"/>
            <test name="org.zfin.SmokeTests" outfile="${smokeTestFile}"
                  todir="${test.reports.dir}"
                  haltonerror="false" haltonfailure="true"
                  failureproperty="smoke.failure" >
                <formatter type="brief"/>
                <formatter type="xml"/>
            </test>
        </junit>
        <antcall target="handleSmokeFailure">
            <param name="test.output.file" value="${smokeTestFile}"/>
        </antcall>
    </target>

    <target name="smokeTestsReadWrite" if="notproduction" depends="compile,build-tests" description="Tests to make sure that the system is alive and working properly."  >

        <junit fork="yes"
               printsummary="yes"
               haltonfailure="false"
               haltonerror="false"
               showoutput="true"
               maxmemory="2024m"
               >
<!--            <jvmarg line="${junrt.jvmargs}"/>-->
            <classpath refid="extended.classpath"/>
            <sysproperty key="log4j.configuration" value="${web-inf.dir}/log4j.xml"/>
            <!--<jvmarg value="-DWEBINF=${web-inf.target}"/>-->
            <jvmarg value="-Djava.io.tmpdir=${tomcat-temp}"/>
            <test name="org.zfin.SmokeTestsReadWrite" outfile="${smokeTestFileReadWrite}"
                  todir="${test.reports.dir}"
                  haltonerror="false" haltonfailure="true"
                  failureproperty="smoke.failure" >
                <formatter type="brief"/>
                <formatter type="xml"/>
            </test>
        </junit>
        <antcall target="handleSmokeFailure">
            <param name="test.output.file" value="${smokeTestReadWriteFile}"/>
        </antcall>
    </target>

    <target name="serviceTests" depends="dirtydeploy,build-tests" description="Unit tests for DataExchange module">
        <runDBTest testclass="org.zfin.ThirdPartyServiceTests" outfile="service-result" verbose="true"/>
    </target>

</project>
