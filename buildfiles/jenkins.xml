<?xml version="1.0" encoding="UTF-8"?>

<project name="Jenkins" default="run-indexer" basedir="../">

    <property environment="env"/>
    <property name="trigger" value="${SCHEDULE_TRIGGER_FILES}"/>

    <!-- Classpath definitions -->
    <path id="classpath">
        <pathelement location="${classbin.dir}"/>
        <pathelement path="${logsDir}"/>
        <fileset dir="${web.lib}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="extended.classpath">
        <path refid="classpath"/>
        <fileset dir="${env.CATALINA_HOME}/endorsed">
            <include name="*.jar"/>
            <include name="*.zip"/>
        </fileset>
    </path>

    <path id="lib.build.classpath">
        <path refid="classpath"/>
        <fileset dir="lib/Java">
            <include name="*.jar"/>
            <include name="*.zip"/>
        </fileset>
    </path>

    <target name="init">
        <tstamp/>
        <echo message="Deploy jobs to ${env.JENKINS_HOME}"/>
    </target>

    <property file="/server_apps/jenkins/trigger.mirror.properties"/>
    <property name="sourceJobsDir" value="${basedir}/server_apps/jenkins/jobs"/>

    <target name="deploy-jobs" depends="_copyDefaultConfig" description="Copy jobs into Jenkins_home">
        <tstamp/>
        <echo message="Deploy jobs to into: ${JENKINS_HOME}"/>
        <!-- ensure that jobs will always be copied over -->
        <copy todir="${JENKINS_HOME}/jobs" overwrite="true">
            <fileset dir="${basedir}/server_apps/jenkins/jobs"/>
        </copy>
        <antcall target="remove-jobs"/>
        <antcall target="add-triggers"/>
        <antcall target="add-email-notifications"/>
        <antcall target="deploy-email-templates"/>
        <antcall target="copy-report-files"/>
        <antcall target="copy-validate-data-files"/>
    </target>

    <target name="create-new-validatedata-job">
        <echo message="NEW JOB: ${jobName}"/>
        <mkdir dir="${jobs}/${jobName}"/>
        <copy tofile="${jobs}/${jobName}/config.xml" overwrite="true">
            <fileset file="${basedir}/server_apps/jenkins/validatedata.template.config.xml"/>
            <filterset>
                <filter token="JOB_NAME" value="${jobName}"/>
            </filterset>
        </copy>
        <touch file="${validateDataDirSource}/${jobName}.sql"/>
        <echo file="${validateDataDirSource}/report.properties" append="true"><![CDATA[${jobName}.errorMessage=Please add a title of the error page
]]></echo>
        <echo file="${validateDataDirSource}/report.properties" append="true">
            <![CDATA[${jobName}.headerColumns=Add column headers]]></echo>
        <sort-file file-name="${validateDataDirSource}/report.properties"/>
        <echo file="${jenkins}/trigger.reports.properties" append="true"><![CDATA[${jobName}=]]></echo>
        <sort-file file-name="${jenkins}/trigger.reports.properties"/>
        <echo file="${jenkins}/email-configuration.reports.properties" append="true">
            <![CDATA[${jobName}.FAILURE=Please add email addresses]]></echo>
        <sort-file file-name="${jenkins}/email-configuration.reports.properties"/>
    </target>

    <target name="create-new-report-data-job">
        <echo message="NEW JOB: ${jobName}"/>
        <mkdir dir="${jobs}/${jobName}"/>
        <copy tofile="${jobs}/${jobName}/config.xml" overwrite="true">
            <fileset file="${basedir}/server_apps/jenkins/reportData.template.config.xml"/>
            <filterset>
                <filter token="JOB_NAME" value="${jobName}"/>
            </filterset>
        </copy>
        <touch file="${report}/${jobName}.sql"/>
        <echo file="${report}/report.properties" append="true"><![CDATA[${jobName}.errorMessage=Please add a title of the error page
]]></echo>
        <echo file="${report}/report.properties" append="true">
            <![CDATA[${jobName}.headerColumns=Add column headers]]></echo>
        <sort-file file-name="${report}/report.properties"/>
        <echo file="${jenkins}/trigger.reports.properties" append="true"><![CDATA[${jobName}=]]></echo>
        <sort-file file-name="${jenkins}/trigger.reports.properties"/>
        <echo file="${jenkins}/email-configuration.reports.properties" append="true">
            <![CDATA[${jobName}.FAILURE=Please add email addresses]]></echo>
        <sort-file file-name="${jenkins}/email-configuration.reports.properties"/>
    </target>

    <target name="_copyDefaultConfig">
        <if>
            <available file="${JENKINS_HOME}/config.xml"/>
            <then>
                <echo message="Configuration file ${JENKINS_HOME}/config.xml is already deployed"/>
            </then>
            <else>
                <copy tofile="${JENKINS_HOME}/config.xml" file="${basedir}/server_apps/jenkins/config.xml"/>
            </else>
        </if>
    </target>

    <target name="run-all-jobs-now">
        <groovy>
            Date now = new Date()
            runInFiveMinutes = (now.getMinutes() + 5) + " " + now.getHours() + " * * *"
            properties.schedule = runInFiveMinutes
        </groovy>
        <addTriggerForAllJobs/>
    </target>

    <target name="deploy-production-jobs" depends="_copyDefaultConfig" description="Copy jobs into Jenkins_home">
        <tstamp/>
        <echo message="Deploy production jobs into: ${JENKINS_HOME}"/>
        <antcall target="copy-production-jobs"/>
        <antcall target="add-triggers"/>
        <antcall target="add-email-notifications"/>
        <antcall target="deploy-email-templates"/>
        <antcall target="copy-report-files"/>
    </target>

    <property name="emailTemplates" value="${JENKINS_HOME}/email-templates"/>

    <target name="deploy-email-templates" depends="_deploy-log-parser-rules" description="Copy jobs into Jenkins_home">
        <tstamp/>
        <echo message="Deploy email templates into: ${JENKINS_HOME}/email-templates"/>
        <copy todir="${emailTemplates}">
            <fileset dir="${basedir}/server_apps/jenkins/email-templates"/>
        </copy>

        <property name="jobDirectory" value="${basedir}/server_apps/jenkins/jobs"/>
        <groovy>
            def dir = new File(properties.jobDirectory)
            def jobs = dir.list()
            new File(properties.jobDirectory).eachFile {
                if (!it.name.endsWith(".svn")) {
                    def jobDirName = it.name
                    def directory = new File(dir, jobDirName)
                    new File(dir, jobDirName).eachFile {
                        def subDir = it.name
                        if (subDir == 'email-templates') {
                            def targetDir = new File(properties.emailTemplates)
                            targetDir.mkdir()
                            new File(directory, subDir).eachFile {
                                def fileName = it.name
                                if (fileName.endsWith('template')) {
                                    def file = new File(new File(directory, subDir), fileName)
                                    def targetFile = new File(targetDir, fileName)
                                    println targetFile.absolutePath
                                    new AntBuilder().copy(file: file, tofile: targetFile)
                                }
                            }
                        }
                    }
                }
            }

        </groovy>
    </target>

    <property name="jobSourceDirectory" value="${basedir}/server_apps/jenkins/jobs"/>
    <property name="jobTargetDirectory" value="${JENKINS_HOME}/jobs"/>

    <target name="remove-jobs" description="Remove jobs into Jenkins_home that are not defined in the source">
        <tstamp/>
        <echo message="Remove undefined jobs in ${JENKINS_HOME}/jobs"/>

        <groovy>
            def jobSourceDirectory = new File(properties.jobSourceDirectory)
            def sourceJobs = jobSourceDirectory.listFiles()
            def file = new File(properties.jobTargetDirectory)
            def targetJobs = file.listFiles()
            println(targetJobs.size() + " jobs in target")
            println(sourceJobs.size() + " jobs in source")
            int index = 0;
            targetJobs.each { targetJob ->
                boolean existOnlyInTarget = true
                sourceJobs.each { sourceJob ->
                    if (sourceJob.getName().equals(targetJob.getName()))
                        existOnlyInTarget = false
                }

                if (existOnlyInTarget) {
                    if (index == 0)
                        println("Removing target jobs...")
                    println("\t" + targetJob.getName())
                    targetJob.deleteDir()
                    index++
                }
            }

        </groovy>
    </target>

    <target name="remove-non-production-jobs-from-target"
            description="Remove jobs into Jenkins_home that are not defined in the source for production">
        <tstamp/>
        <echo message="Remove undefined production jobs in ${JENKINS_HOME}/jobs"/>
        <property name="sourceJobFile"
                  value="${basedir}/server_apps/jenkins/jobs.production.properties"/>
        <groovy>
            def dir = new File(properties.sourceJobsDir)
            def jobs = dir.list()
            // load defined jobs
            def props = new Properties()

            new File(properties.sourceJobFile).withInputStream {
                stream -> props.load(stream)
            }

            def jobTargetDirectory = new File(properties.jobTargetDirectory)
            def targetJobs = jobTargetDirectory.listFiles()
            println(targetJobs.size() + " jobs in target")
            println "Total jobs: " + jobs.size()
            targetJobs.each { targetJob ->
                boolean existsInTarget = false;
                jobs.each { sourceJob ->
                    if (props[sourceJob] != null) {
                        if (sourceJob.equals(targetJob.getName()))
                            existsInTarget = true;
                    }
                }
                if (!existsInTarget) {
                    println("Removing target job: " + targetJob.getName())
                    targetJob.deleteDir()
                }
            }
        </groovy>
    </target>

    <target name="create-views" description="Create views">
        <tstamp/>
        <echo message="Deploy views into: ${JENKINS_HOME}"/>
        <loadfile property="views-xml" srcFile="${jenkins}/config-views.xml"/>
        <replaceregexp match="&lt;/views&gt;"
                       replace="${views-xml}&lt;/views&gt;" flags="g">
            <fileset dir="${JENKINS_HOME}" includes="config.xml"/>
        </replaceregexp>
        <if>
            <equals arg1="${INSTANCE}" arg2="mirror"/>
            <then>
                <echo message="Deploy ${INSTANCE}-config-views.xml to JENKINS_HOME"/>
                <loadfile property="special-views-xml" srcFile="${jenkins}/${INSTANCE}-config-views.xml"/>
                <replaceregexp match="&lt;/views&gt;"
                               replace="${special-views-xml}&lt;/views&gt;" flags="g">
                    <fileset dir="${JENKINS_HOME}" includes="config.xml"/>
                </replaceregexp>
            </then>
            <else/>
        </if>
    </target>

    <property name="jobs" value="${SOURCEROOT}/server_apps/jenkins/jobs"/>
    <property name="plugins" value="${SOURCEROOT}/server_apps/jenkins/plugins"/>
    <property name="jenkins" value="${SOURCEROOT}/server_apps/jenkins"/>
    <property name="jenkinsHomeJobs" value="${JENKINS_HOME}/jobs"/>

    <target name="copy-job-into-source">
        <echo message="NEW JOB: ${jobName}"/>
        <echo message="From:    ${JENKINS_HOME}/jobs/${jobName}"/>
        <echo message="To:      ${jobs}"/>
        <mkdir dir="${jobs}/${jobName}"/>
        <copy todir="${jobs}/${jobName}">
            <fileset file="${JENKINS_HOME}/jobs/${jobName}/config.xml"/>
        </copy>
    </target>

    <target name="deploy-plugins" depends="_deploy-email-configuration">
        <copy todir="${JENKINS_HOME}/plugins">
            <fileset file="${plugins}/*.jpi"/>
        </copy>
    </target>

    <property name="mail-config.xml" value="hudson.tasks.Mailer.xml"/>

    <target name="_deploy-email-configuration">
        <echo>Copying ${mail-config.xml} with default Email ${DEFAULT_EMAIL} to JENKINS_HOME</echo>
        <copy todir="${JENKINS_HOME}/" overwrite="true">
            <fileset file="${jenkins}/${mail-config.xml}"/>
            <filterset>
                <filter token="DEFAULT_EMAIL" value="${DEFAULT_EMAIL}"/>
            </filterset>
        </copy>
    </target>

    <target name="_deploy-trigger-emails" description="Populate the success/failure emails">
        <available file="${JENKINS_HOME}/${mail-config.xml}" property="mail-config.present"/>
        <if>
            <equals arg1="${mail-config.present}" arg2="true"/>
            <then/>
            <else>
                <echo>${mail-config.present}: Copying ${mail-config.xml} with default Email ${DEFAULT_EMAIL} to
                    JENKINS_HOME
                </echo>
                <copy todir="${JENKINS_HOME}/">
                    <fileset file="${jenkins}/hudson.task.Mailer.xml"/>
                    <filterset>
                        <filter token="DEFAULT_EMAIL" value="${DEFAULT_EMAIL}"/>
                    </filterset>
                </copy>
            </else>
        </if>
    </target>

    <target name="_deploy-log-parser-rules" description="deploy parser rule">
        <copy todir="${JENKINS_HOME}/">
            <fileset file="${jenkins}/${logParserValidateDataRule}"/>
        </copy>
    </target>

    <target name="add-triggers">
        <echo message="Instance Name: ${trigger}"/>
        <property name="propertyFile" value="${basedir}/server_apps/jenkins/trigger.${trigger}.properties"/>
        <if>
            <available file="${propertyFile}"/>
            <then>
                <groovy>
                    //println "JENKINS_HOME/jobs " + properties.jenkinsHomeJobs
                    def dir = new File(properties.jenkinsHomeJobs)
                    def jobs = dir.list()
                    jobs.eachWithIndex { value, i ->
                        properties.jobName = value
                        //println value
                        def ant = new AntBuilder(project)
                        ant."add-trigger-for-job"()
                    }
                </groovy>
            </then>
            <else>
                <echo message="No trigger configuration file found: ${propertyFile}. Not generating any triggers."/>
            </else>
        </if>
    </target>

    <property name="singleJobName" value="harry"/>
    <target name="copy-production-jobs">
        <property name="sourceJobFile"
                  value="${basedir}/server_apps/jenkins/jobs.production.properties"/>
        <echo message="Source Directory of Jobs: ${sourceJobsDir}"/>
        <groovy>
            def dir = new File(properties.sourceJobsDir)
            def jobs = dir.list()
            // load defined jobs
            def props = new Properties()

            new File(properties.sourceJobFile).withInputStream {
                stream -> props.load(stream)
            }

            jobs.eachWithIndex { value, i ->
                job = value
                if (props[value] != null) {
                    //println "production job: " + value
                    properties.singleJobName = value
                    ant.project.executeTarget('copy-single-job')
                }
            }
        </groovy>
    </target>

    <target name="copy-single-job">
        <!--
                <echo message="Single Job to copy: ${singleJobName}"/>
                <echo message="copy from Job: ${sourceJobsDir}/${singleJobName}/config.xml"/>
                <echo message="delete from Job: ${jenkinsHomeJobs}/${singleJobName}/config.xml"/>
        -->
        <delete file="${jenkinsHomeJobs}/${singleJobName}/config.xml"/>
        <copy file="${sourceJobsDir}/${singleJobName}/config.xml"
              tofile="${jenkinsHomeJobs}/${singleJobName}/config.xml"/>
    </target>

    <!--
        <property name="trigger" value="reports"/>
    -->
    <target name="copy-report-files" description="The jobs that run reports may have additional files that need
    to be copied into TARGETROOT">
        <groovy>
            //println "JENKINS_HOME/jobs: " + properties.jenkinsHomeJobs
            def dir = new File(properties.jenkinsHomeJobs)
            def jobs = dir.list()
            jobs.eachWithIndex { value, i ->
                properties.jobName = value
                //println value
/*
                def reportDir = new File(properties.reportDirSource)
                def reportDirFiles = reportDir.list()
                reportDirFiles.eachWithIndex{ entry, int j ->
                    println(entry)
                }
*/

                def ant = new AntBuilder(project)
                ant.'copy-report-files-per-job'()
            }
        </groovy>
        <copy todir="${reportDirTarget}/">
            <fileset file="${reportDirSource}/*"/>
        </copy>

    </target>

    <target name="add-email-notifications">
        <property name="propertyFile"
                  value="${basedir}/server_apps/jenkins/email-configuration.${trigger}.properties"/>
        <if>
            <available file="${propertyFile}"/>
            <then>
                <groovy>
                    //println "JENKINS_HOME/jobs: " + properties.jenkinsHomeJobs
                    def dir = new File(properties.jenkinsHomeJobs)
                    def jobs = dir.list()
                    jobs.eachWithIndex { value, i ->
                        properties.jobName = value
                        //println value
                        def ant = new AntBuilder(project)
                        ant.'add-notification-per-job'()
                    }
                </groovy>
            </then>
            <else>
                <echo message="No email configuration file found: ${propertyFile}. Generating default email addresses on triggers."/>
                <groovy>
                    def dir = new File(properties.jenkinsHomeJobs)
                    def jobs = dir.list()
                    jobs.eachWithIndex { value, i ->
                        properties.jobName = value
                        ant.'add-default-notification-per-job'()
                    }
                </groovy>
            </else>
        </if>
    </target>

    <macrodef name="add-trigger-for-job" description="run target for given jobName and triggerName">
        <sequential>
            <groovy>
                def triggerSeries = properties."trigger".split("\\|")
                // if no cron trigger found return
                if (triggerSeries[0] == '') {
                    return
                }
                triggerSeries.eachWithIndex { trName, i ->
                    properties.trigger = trName
                    def ant = new AntBuilder(project)
                    ant.addTriggerPerJob()
                }
            </groovy>
        </sequential>
    </macrodef>

    <target name="create-jenkins-symlink">
        <mkdir dir="${JENKINS_HOME}/logs"/>
        <exec executable="rm">
            <arg value="${jenkins}/jenkins.war"/>
        </exec>
        <symlink link="${jenkins}/jenkins.war" action="single" overwrite="true" failonerror="fail"
                 resource="${jenkins}/jenkins-656.war"/>
    </target>

    <target name="copy-certificate">
        <copy tofile="${JENKINS_HOME}/bouncer.zfin.org-cert"
              file="${basedir}/server_apps/jenkins/bouncer.zfin.org-cert"/>
    </target>

    <target name="start-jenkins" depends="copy-certificate,create-jenkins-symlink" description="Start up Jenkins ">
        <echo message="Source: ${jenkins}"/>
        <exec executable="${jenkins}/jenkins.sh">
            <arg value="start"/>
        </exec>
    </target>

    <target name="stop-jenkins" depends="create-jenkins-symlink" description="Stop Jenkins ">
        <exec executable="${jenkins}/jenkins.sh">
            <arg value="stop"/>
        </exec>
    </target>

    <target name="restart-jenkins" depends="copy-certificate,create-jenkins-symlink" description="Restart up Jenkins">
        <exec executable="${jenkins}/jenkins.sh">
            <arg value="restart"/>
        </exec>
    </target>

    <target name="pid-jenkins" description="Display the PID of Jenkins server">
        <loadfile property="jenkins-pid" srcFile="${JENKINS_HOME}/jenkins.pid"/>
        <echo>
            Jenkins server PID: ${jenkins-pid}
        </echo>
    </target>

    <target name="status-jenkins">
        <exec executable="bash" resultproperty="process-info" outputproperty="output">
            <arg value="-c"/>
            <arg value="ps -ef | grep jenkins.war | grep -v grep"/>
        </exec>
        <if>
            <equals arg1="${process-info}" arg2="0"/>
            <then>
                <echo message="Jenkins is up"/>
            </then>
            <else>
                <echo message="Jenkins is down"/>
            </else>
        </if>
    </target>

    <target name="jenkins-process-info" description="Display the PID of Jenkins server and the procss information">
        <echo>PROCESS INFORMATION</echo>
        <exec executable="bash" resultproperty="process-info">
            <arg value="-c"/>
            <arg value="ps -ef | grep jenkins.war | grep -v grep | grep jobs"/>
        </exec>
        <if>
            <equals arg1="${process-info}" arg2="0"/>
            <then/>
            <else>
                <echo message="Jenkins is down"/>
            </else>
        </if>
    </target>

    <target name="tail-log" depends="create-jenkins-symlink" description="tail -f on jenkins.log file">
        <exec executable="tail">
            <arg value="-f"/>
            <arg value="${JENKINS_HOME}/logs/jenkins.log"/>
        </exec>
    </target>

    <target name="copy-validate-data-files">
        <sequential>
            <!-- only copy if target root is different from source root -->
            <if>
                <not>
                    <equals arg1="${validateDataDirSource}" arg2="${validateDataDirTarget}"/>
                </not>
                <then>
                    <copy todir="${validateDataDirTarget}">
                        <fileset dir="${validateDataDirSource}/">
                            <include name="*.html.template"/>
                            <include name="*.sql"/>
                            <include name="*.sqlj"/>
                            <include name="*.properties"/>
                        </fileset>
                    </copy>
                </then>
            </if>
        </sequential>
    </target>

    <macrodef name="_add-log-parser-rule-path">
        <sequential>
            <replaceregexp match="&lt;parsingRulesPath&gt;&lt;/parsingRulesPath&gt;"
                           replace="&lt;parsingRulesPath&gt;${JENKINS_HOME}/${logParserValidateDataRule}&lt;/parsingRulesPath&gt;"
                           flags="g">
                <fileset dir="${JENKINS_HOME}/jobs" includes="${jobName}/config.xml"/>
            </replaceregexp>
        </sequential>
    </macrodef>

    <property name="logParserValidateDataRule" value="validate-data-report-rule.txt"/>

    <macrodef name="addTriggerPerJob">
        <sequential>
            <!--
                        <echo message="Trigger Name: ${trigger}"/>
            -->

            <property name="propertyFile" value="${basedir}/server_apps/jenkins/trigger.${triggerName}.properties"/>
            <property name="schedule" value=""/>
            <property name="emailConfiguration" value=""/>

            <groovy>
                def props = new Properties()
                new File(properties.propertyFile).withInputStream {
                    stream -> props.load(stream)
                }
                def sched = props[properties.jobName]
                if (sched != null)
                    properties.schedule = sched
                //println "Property: " + props[properties.jobName]

            </groovy>
            <!--
                        <echo message="Schedule: ${schedule}"/>
            -->

            <if>
                <not>
                    <equals arg1="${schedule}" arg2=""/>
                </not>
                <then>
                    <echo message="Add cron Schedule to ${jobName}: ${schedule} "/>
                    <replaceregexp match="&lt;spec&gt;&lt;/spec&gt;"
                                   replace="&lt;spec&gt;${schedule}&lt;/spec&gt;" flags="g">
                        <fileset dir="${JENKINS_HOME}/jobs" includes="${jobName}/config.xml"/>
                    </replaceregexp>
                </then>
            </if>
            <var name="schedule" unset="true"/>
        </sequential>
    </macrodef>

    <macrodef name="addTriggerForAllJobs">
        <sequential>
            <echo message="Adding cron expression for all jobs"/>

            <property name="schedule" value=""/>

            <groovy>
                def dir = new File(properties.jobTargetDirectory)
                new File(properties.jobTargetDirectory).eachFile {
                    if (!it.name.endsWith(".svn")) {
                        def jobDirName = it.name
                        new File(dir, jobDirName).eachFile { configFile ->
                            if (configFile.getName().endsWith("config.xml")) {
                                if (jobDirName.contains("_")) {
                                    println configFile
                                    properties.jobName = jobDirName
                                    ant."add-new-cron-expression-for-job"()
                                }
                            }
                        }
                    }
                }
            </groovy>
        </sequential>
    </macrodef>

    <macrodef name="add-new-cron-expression-for-job">
        <sequential>
            <!--
                        <echo message="Schedule: ${schedule}"/>
                        <echo message="Job: ${jobName}"/>
            -->
            <if>
                <not>
                    <equals arg1="${schedule}" arg2=""/>
                </not>
                <then>
                    <echo message="Modify cron Schedule for ${jobName}: ${schedule} "/>
                    <replaceregexp match="&lt;spec&gt;[\d\s?\*]*&lt;/spec&gt;"
                                   replace="&lt;spec&gt;${schedule}&lt;/spec&gt;" flags="g">
                        <fileset dir="${JENKINS_HOME}/jobs" includes="${jobName}/config.xml"/>
                    </replaceregexp>
                </then>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="add-notification-per-job">
        <sequential>
            <property name="emailConfiguration" value=""/>
            <groovy>
                File propertyFile = new File(properties.propertyFile)
                def props = new Properties()
                propertyFile.withInputStream {
                    stream -> props.load(stream)
                }
                def emailConfig = props[properties.jobName + ".FAILURE"]
                if (emailConfig != null)
                    properties.emailConfiguration = emailConfig
                //println "Property: " + props[properties.jobName+".FAILURE"]

            </groovy>

            <if>
                <not>
                    <equals arg1="${emailConfiguration}" arg2=""/>
                </not>
                <then>
                    <echo message="${jobName} : Add Failure trigger ${emailConfiguration}"/>
                    <echo message="${JENKINS_HOME}/jobs"/>
                    <replaceregexp match="@FAILURE-RECIPIENT-LIST@"
                                   replace="${emailConfiguration}"
                                   flags="gis" byline="false">
                        <fileset dir="${JENKINS_HOME}/jobs" includes="${jobName}/config.xml"/>
                    </replaceregexp>
                </then>
            </if>
            <var name="emailConfiguration" unset="true"/>

            <groovy>
                def props = new Properties()
                new File(properties.propertyFile).withInputStream {
                    stream -> props.load(stream)
                }
                def emailConfig = props[properties.jobName + ".SUCCESS"]
                if (emailConfig != null)
                    properties.emailConfiguration = emailConfig
                else
                    properties.emailConfiguration = ""
                //println "Property: " + props[properties.jobName+".SUCCESS"]

            </groovy>
            <if>
                <not>
                    <equals arg1="${emailConfiguration}" arg2=""/>
                </not>
                <then>
                    <echo message="${jobName} : Add Success trigger ${emailConfiguration}"/>
                    <replaceregexp match="@SUCCESS-RECIPIENT-LIST@"
                                   replace="${emailConfiguration}">
                        <fileset dir="${JENKINS_HOME}/jobs" includes="${jobName}/config.xml"/>
                    </replaceregexp>
                </then>
            </if>
            <var name="emailConfiguration" unset="true"/>
            <_add-log-parser-rule-path/>
        </sequential>
    </macrodef>

    <property name="report" value="server_apps/DB_maintenance/report_data"/>
    <property name="validateData" value="server_apps/DB_maintenance/validatedata"/>
    <property name="reportDirSource" value="${basedir}/${report}/"/>
    <property name="reportDirTarget" value="${TARGETROOT}/${report}"/>
    <property name="validateDataDirSource" value="${basedir}/${validateData}/"/>
    <property name="validateDataDirTarget" value="${TARGETROOT}/${validateData}"/>

    <macrodef name="copy-report-files-per-job">
        <sequential>
            <!-- only copy if target root is different from source root -->
            <if>
                <not>
                    <equals arg1="${reportDirSource}" arg2="${reportDirTarget}"/>
                </not>
                <then>
                    <groovy>
                        File sqlFile = new File(properties.reportDirSource + properties.jobName + ".sql")
                        File sqljFile = new File(properties.reportDirSource + properties.jobName + ".sqlj")
                        if (sqlFile.exists() || sqljFile.exists())
                            println("Copy report files for " + properties.jobName);
                    </groovy>
                    <copy todir="${reportDirTarget}">
                        <fileset dir="${reportDirSource}/">
                            <include name="${jobName}.report.html.template"/>
                            <include name="${jobName}.sql*"/>
                            <include name="report.properties"/>
                            <include name="report-data-email.template"/>
                        </fileset>
                    </copy>
                </then>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="add-default-notification-per-job" description="add default email address to job triggers">
        <sequential>
            <groovy>
                properties.emailConfiguration = properties.DEFAULT_EMAIL
            </groovy>
            <echo message="${jobName} : Add Failure trigger ${emailConfiguration}"/>
            <replaceregexp match="@FAILURE-RECIPIENT-LIST@"
                           replace="${emailConfiguration}"
                           flags="gis" byline="false">
                <fileset dir="${JENKINS_HOME}/jobs" includes="${jobName}/config.xml"/>
            </replaceregexp>

            <echo message="${jobName} : Add Success trigger ${emailConfiguration}"/>
            <replaceregexp match="@SUCCESS-RECIPIENT-LIST@"
                           replace="${emailConfiguration}">
                <fileset dir="${JENKINS_HOME}/jobs" includes="${jobName}/config.xml"/>
            </replaceregexp>
            <_add-log-parser-rule-path/>
        </sequential>
    </macrodef>

    <macrodef name="sort-file" description="sort a given file">
        <attribute name="file-name"/>
        <sequential>
            <echo message="Sorting file @{file-name}"/>
            <exec executable="sort">
                <arg value="-fu"/>
                <arg value="@{file-name}"/>
                <arg value="-o"/>
                <arg value="@{file-name}"/>
            </exec>
        </sequential>
    </macrodef>

    <target name="jenkins-usage">
        <echo>
            TARGETS
            DEPLOYMENT
            deploy-jobs
            deploy-production-jobs deploy only the jobs meant to run on production
            copy-job-into-source -DjobName=[jobName]
            create-views creates daily/weekly/monthly job views.
            deploy-plugins deploy jenkins plugins into JENKINS_HOME
            deploy-email-templates deploy the email templates into JENKINS_HOME
            create-new-validatedata-job -DjobName=[jobName]
            create-new-report-data-job -DjobName=[jobName]

            JENKINS SERVER
            start-jenkins start a Jenkins instance
            stop-jenkins
            kill-jenkins
            restart-jenkins
            pid-jenkins
            tail-log do a 'tail -f $JENKINS_HOME/logs/jenkins.log'
        </echo>
    </target>

    <target name="execute-all-validate-data-jobs">
        <property name="jobDirectory" value="${basedir}/server_apps/jenkins/jobs"/>
        <property name="jenkPort" value="${env.JENKINS_PORT}"/>
        <echo message="${env.JENKINS_PORT}"/>
        <groovy>
            def dir = new File(properties.jobDirectory)
            new File(properties.jobDirectory).eachFile {
                if (!it.name.endsWith(".svn")) {
                    if (it.name.startsWith("Check")) {
                        //println it.name
                        def url = "https://" + properties.DOMAIN_NAME
                        if (properties.USE_APACHE_FOR_SMOKE_TESTS == "false")
                            url += ":" + properties.jenkPort
                        url += "/jobs/job/" + it.name + "/build"
                        def command = "curl " + url
                        println command
                        def proc = command.execute()
                        proc.waitFor()                               // Wait for the command to finish
                        // Obtain status and output
                        if (proc.exitValue() != 0) {
                            println "return code: ${proc.exitValue()}"
                            println "stderr: ${proc.err.text}"
                            println "stdout: ${proc.in.text}"
                        }
                    }
                }
            }
        </groovy>

    </target>

    <taskdef name="groovy"
             classname="org.codehaus.groovy.ant.Groovy"
             classpathref="lib.build.classpath"/>
</project>
