<?xml version="1.0" encoding="UTF-8"?>

<project name="Jenkins" default="run-indexer" basedir="../">

    <property environment="env"/>

    <!-- Classpath definitions -->
    <path id="classpath">
        <pathelement location="${classbin.dir}"/>
        <pathelement path="${logsDir}"/>
        <fileset dir="${web.lib}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="extended.classpath">
        <path refid="classpath"/>
        <fileset dir="${env.CATALINA_HOME}/endorsed">
            <include name="*.jar"/>
            <include name="*.zip"/>
        </fileset>
    </path>

    <path id="lib.build.classpath">
        <path refid="classpath"/>
        <fileset dir="lib/Java">
            <include name="*.jar"/>
            <include name="*.zip"/>
        </fileset>
    </path>

    <target name="init">
        <tstamp/>
        <echo message="Deploy jobs to ${env.JENKINS_HOME}"/>
    </target>

    <property file="/server_apps/jenkins/trigger.mirror.properties"/>

    <target name="deploy-jobs" description="Copy jobs into Jenkins_home">
        <tstamp/>
        <echo message="Deploy jobs to into: ${JENKINS_HOME}"/>
        <copy todir="${JENKINS_HOME}/jobs">
            <fileset dir="${basedir}/server_apps/jenkins/jobs"/>
        </copy>
        <antcall target="add-triggers"/>
        <antcall target="deploy-email-templates"/>
    </target>

    <property name="emailTemplates" value="${JENKINS_HOME}/email-templates"/>

    <target name="deploy-email-templates" description="Copy jobs into Jenkins_home">
        <tstamp/>
        <echo message="Deploy email templates into: ${JENKINS_HOME}/email-templates"/>
        <property name="jobDirectory" value="${basedir}/server_apps/jenkins/jobs"/>
        <groovy>
            def dir = new File(properties.jobDirectory)
            def jobs = dir.list()
            new File(properties.jobDirectory).eachFile {
                if (!it.name.endsWith(".svn") ){
                    def jobDirName = it.name
                    def directory = new File(dir,jobDirName)
                    new File(dir, jobDirName).eachFile {
                        def subDir = it.name
                        if(subDir == 'email-templates'){
                            def targetDir = new File(properties.emailTemplates)
                            targetDir.mkdir()
                            new File(directory, subDir).eachFile{
                                def fileName = it.name
                                if(fileName.endsWith('template')){
                                    def file = new File(new File(directory,subDir),fileName)
                                    def targetFile = new File(targetDir, fileName)
                                    println targetFile.absolutePath
                                    new AntBuilder().copy( file:file, tofile:targetFile)
                                }
                            }
                        }
                    }
                }
            }

        </groovy>
    </target>

    <target name="create-views" description="Create views">
        <tstamp/>
        <echo message="Deploy views into: ${JENKINS_HOME}"/>
        <loadfile property="views-xml" srcFile="${jenkins}/config-views.xml"/>
        <replaceregexp match="&lt;/views&gt;"
                       replace="${views-xml}&lt;/views&gt;" flags="g">
            <fileset dir="${JENKINS_HOME}" includes="config.xml"/>
        </replaceregexp>
        <if>
            <equals arg1="${INSTANCE}" arg2="mirror"/>
            <then>
                <echo message="Deploy ${INSTANCE}-config-views.xml to JENKINS_HOME"/>
                <loadfile property="special-views-xml" srcFile="${jenkins}/${INSTANCE}-config-views.xml"/>
                <replaceregexp match="&lt;/views&gt;"
                               replace="${special-views-xml}&lt;/views&gt;" flags="g">
                    <fileset dir="${JENKINS_HOME}" includes="config.xml"/>
                </replaceregexp>
            </then>
            <else/>
        </if>
    </target>

    <property name="jobs" value="${SOURCEROOT}/server_apps/jenkins/jobs"/>
    <property name="plugins" value="${SOURCEROOT}/server_apps/jenkins/plugins"/>
    <property name="jenkins" value="${SOURCEROOT}/server_apps/jenkins"/>
    <property name="jenkinsHomeJobs" value="${JENKINS_HOME}/jobs"/>

    <target name="copy-job-into-source">
        <echo message="NEW JOB: ${jobName}"/>
        <echo message="From:    ${JENKINS_HOME}/jobs/${jobName}"/>
        <echo message="To:      ${jobs}"/>
        <mkdir dir="${jobs}/${jobName}"/>
        <copy todir="${jobs}/${jobName}">
            <fileset file="${JENKINS_HOME}/jobs/${jobName}/config.xml"/>
        </copy>
    </target>

    <target name="deploy-plugins" depends="_deploy-email-configuration">
        <copy todir="${JENKINS_HOME}/plugins">
            <fileset file="${plugins}/*.jpi"/>
        </copy>
    </target>

    <property name="mail-config.xml" value="hudson.task.Mailer.xml"/>

    <target name="_deploy-email-configuration">
        <available file="${JENKINS_HOME}/${mail-config.xml}" property="mail-config.present"/>
        <if>
            <equals arg1="${mail-config.present}" arg2="true"/>
            <then/>
            <else>
                <echo>${mail-config.present}: Copying ${mail-config.xml} with default Email ${DEFAULT_EMAIL} to
                    JENKINS_HOME
                </echo>
                <copy todir="${JENKINS_HOME}/">
                    <fileset file="${jenkins}/hudson.task.Mailer.xml"/>
                    <filterset>
                        <filter token="DEFAULT_EMAIL" value="${DEFAULT_EMAIL}"/>
                    </filterset>
                </copy>
            </else>
        </if>
    </target>

    <target name="_deploy-trigger-emails" description="Populate the success/failure emails">
        <available file="${JENKINS_HOME}/${mail-config.xml}" property="mail-config.present"/>
        <if>
            <equals arg1="${mail-config.present}" arg2="true"/>
            <then/>
            <else>
                <echo>${mail-config.present}: Copying ${mail-config.xml} with default Email ${DEFAULT_EMAIL} to
                    JENKINS_HOME
                </echo>
                <copy todir="${JENKINS_HOME}/">
                    <fileset file="${jenkins}/hudson.task.Mailer.xml"/>
                    <filterset>
                        <filter token="DEFAULT_EMAIL" value="${DEFAULT_EMAIL}"/>
                    </filterset>
                </copy>
            </else>
        </if>
    </target>

    <property name="trigger" value="${SCHEDULE_TRIGGER_FILES}"/>

    <target name="add-triggers">
        <echo>${emailTriggerName}</echo>
        <groovy>
            println "JENKINS_HOME/jobs " + properties.jenkinsHomeJobs
            def dir = new File(properties.jenkinsHomeJobs)
            def jobs = dir.list()
            jobs.eachWithIndex { value, i -> properties.jobName = value
            //println value
            ant.project.executeTarget('add-trigger-for-job')
            }
        </groovy>
    </target>

    <target name="add-trigger-for-job" description="run target for given jobName and triggerName">
        <groovy>
            def triggerSeries = properties."trigger".split("\\|")
            // if no cron trigger found return
            if(triggerSeries[0] == ''){
            return
            }
            triggerSeries.eachWithIndex { trName, i ->
            properties.triggerName = trName
            ant.project.executeTarget('add-trigger-for-job-and-trigger')
            }
        </groovy>
    </target>

    <target name="add-trigger-for-job-and-trigger" description="run target for given jobName and triggerName">
        <!--
                <echo message="Job Name: ${jobName}"/>
                <echo message="Trigger Name: ${triggerName}"/>
        -->
        <add-trigger-per-job/>
    </target>


    <target name="create-jenkins-symlink">
        <mkdir dir="${JENKINS_HOME}/logs"/>
        <symlink link="${jenkins}/jenkins.war" action="single" overwrite="true" failonerror="fail"
                 resource="${jenkins}/jenkins-533.war"/>
    </target>

    <target name="start-jenkins" depends="create-jenkins-symlink" description="Start up Jenkins ">
        <exec executable="${jenkins}/jenkins.sh">
            <arg value="start"/>
        </exec>
    </target>

    <target name="stop-jenkins" depends="create-jenkins-symlink" description="Stop Jenkins ">
        <exec executable="${jenkins}/jenkins.sh">
            <arg value="stop"/>
        </exec>
    </target>

    <target name="restart-jenkins" depends="create-jenkins-symlink" description="Restart up Jenkins">
        <exec executable="${jenkins}/jenkins.sh">
            <arg value="restart"/>
        </exec>
    </target>

    <target name="pid-jenkins" description="Display the PID of Jenkins server">
        <loadfile property="jenkins-pid" srcFile="${JENKINS_HOME}/jenkins.pid"/>
        <echo>
            Jenkins server PID: ${jenkins-pid}
        </echo>
    </target>

    <target name="status-jenkins">
        <exec executable="bash" resultproperty="process-info" outputproperty="output">
            <arg value="-c"/>
            <arg value="ps -ef | grep jenkins.war | grep -v grep"/>
        </exec>
        <if>
            <equals arg1="${process-info}" arg2="0"/>
            <then>
                <echo message="Jenkins is up"/>
            </then>
            <else>
                <echo message="Jenkins is down"/>
            </else>
        </if>
    </target>

    <target name="jenkins-process-info" description="Display the PID of Jenkins server and the procss information">
        <echo>PROCESS INFORMATION</echo>
        <exec executable="bash" resultproperty="process-info">
            <arg value="-c"/>
            <arg value="ps -ef | grep jenkins.war | grep -v grep"/>
        </exec>
        <if>
            <equals arg1="${process-info}" arg2="0"/>
            <then/>
            <else>
                <echo message="Jenkins is down"/>
            </else>
        </if>
    </target>

    <macrodef name="add-trigger-per-job">
        <sequential>
            <echo message="Job Name: ${jobName}"/>
            <echo message="Trigger Name: ${triggerName}"/>

            <property name="propertyFile" value="${basedir}/server_apps/jenkins/trigger.${triggerName}.properties"/>
            <property name="schedule" value=""/>
            <property name="emailConfiguration" value=""/>

            <groovy>
                def props = new Properties()
                new File(properties.propertyFile).withInputStream {
                stream -> props.load(stream)
                }
                def sched = props[properties.jobName]
                if (sched != null)
                properties.schedule = sched
                //println "Property: " + props[properties.jobName]

            </groovy>
            <echo message="Schedule: ${schedule}"/>
            <echo message="Job: ${jobName}"/>

            <replaceregexp match="&lt;spec&gt;&lt;/spec&gt;"
                           replace="&lt;spec&gt;${schedule}&lt;/spec&gt;" flags="g">
                <fileset dir="${JENKINS_HOME}/jobs" includes="${jobName}/config.xml"/>
            </replaceregexp>
            <var name="schedule" unset="true"/>
        </sequential>
    </macrodef>

    <target name="jenkins-usage">
        <echo>
            TARGETS
            Deployment
            deploy-jobs
            copy-job-into-source -DjobName=[jobName]
            create-views creates daily/weekly/monthly job views.
            deploy-plugins deploy jenkins plugins into JENKINS_HOME

            Jenkins Server
            start-jenkins start a Jenkins instance
            stop-jenkins
            kill-jenkins
            restart-jenkins
        </echo>
    </target>

    <taskdef name="groovy"
             classname="org.codehaus.groovy.ant.Groovy"
             classpathref="lib.build.classpath"/>
</project>
