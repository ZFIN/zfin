apply plugin: 'java'

//apply from : '../zfinGradle/build.gradle'

def env = System.getenv()
def dbname = env['DBNAME']
def sourceroot = env['SOURCEROOT']


task deployPostgres(dependsOn: ['lib:DB_functions:postgresFunctions:deployPostgresFunctions',
                                'lib:DB_functions:postgresProcedures:deployPostgresProcedures',
                                'lib:DB_triggers:postgresTriggers:deployPostgresTrigger']) {
    description "Deploy all postgres code"
}



project.ext.set("dbname", dbname)
project.ext.set("sourceroot", sourceroot)

task loadDb() {
    doLast {
       File unloads = file('/research/zunloads/databases/postgres_self_dumps/darwindb/')
       File latest = unloads.listFiles().last()
       String unloadPath = latest.getPath()

       //use -DB=... path if specified, also, yes, I'm being cute so that it will be -DB=...
       //rather than -Ddb=...
       if (System.getProperty("B")) { unloadPath = System.getProperty("B") }

       //might as well support -Dunload also
       if (System.getProperty("unload")) { unloadPath = System.getProperty("unload") }

       println "Loading $unloadPath into $dbname"
       exec { commandLine 'dropdb', dbname }
       exec { commandLine 'createdb', dbname }
       exec { commandLine "bash", "-c", "psql --set ON_ERROR_STOP=on $dbname < $unloadPath" }
    }
}
task loaddb(dependsOn: loadDb) //just an alias, since we're used to loaddb.pl


sourceSets {
    main {
        java {
            srcDirs = ['source']
        }
        resources {
            srcDirs = ['home']
        }
    }
}


 
/*
list all functions in postgres

SELECT  proname, proargnames, prosrc
FROM    pg_catalog.pg_namespace n
JOIN    pg_catalog.pg_proc p
ON      pronamespace = n.oid
WHERE   nspname = 'public ';
*/
