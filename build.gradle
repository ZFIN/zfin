buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.postgresql:postgresql:42.0.0'
    }
}
plugins {
    id "org.liquibase.gradle" version "1.2.4"
}

apply plugin: 'java'
apply plugin: 'groovy'

//apply from : '../zfinGradle/build.gradle'

def env = System.getenv()
def dbname = env['DBNAME']
def sourceroot = env['SOURCEROOT']
def pgbindir = env['PGBINDIR']
def pgdata = env['PGDATA']
def targetroot = env['TARGETROOT']

dependencies {
    compile 'org.liquibase:liquibase-core:3.4.1'
    compile "org.liquibase:liquibase-gradle-plugin:1.1.1"
    compile gradleApi()
    compile localGroovy()
}

task deployPostgres(dependsOn: ['lib:DB_functions:postgresFunctions:deployPostgresFunctions',
                                'lib:DB_triggers:postgresTriggerProcedures:deployPostgresTrigger']) {
    description "Deploy all postgres code"
}

defaultTasks 'make'

project.ext.set("dbname", dbname)
project.ext.set("sourceroot", sourceroot)
project.ext.set("pgdata", pgdata)
project.ext.set("pgbindir", pgbindir)

//dependsOn: ['lib:DB_functions:postgresFunctions:killConnectionsToPostgres']
task loadDb() {
    doLast {
        File unloads = file('/research/zunloads/databases/postgres_self_dumps/darwindb/')
        String unloadPath;
        if (unloads.exists()) {
            File latest = unloads.listFiles().last()
            unloadPath = latest.getPath()
        }

        //use -DB=... path if specified, also, yes, I'm being cute so that it will be -DB=...
        //rather than -Ddb=...
        if (System.getProperty("B")) {
            unloadPath = System.getProperty("B")
        }

        //might as well support -Dunload also
        if (System.getProperty("unload")) {
            unloadPath = System.getProperty("unload")
        }

        println "Loading $unloadPath into $dbname"
        exec { commandLine 'dropdb', dbname }
        exec { commandLine 'createdb', dbname }
        exec { commandLine "bash", "-c", "pg_restore -j 4 -d $dbname $unloadPath" }
        exec { commandLine "bash", "-c", "echo 'vacuum (analyze)' | psql $dbname" }
    }
}
task loaddb(dependsOn: loadDb) //just an alias, since we're used to loaddb.pl


sourceSets {
    main {
        java {
            srcDirs = ['source']
        }
        resources {
            srcDirs = ['home']
        }
    }
}

def changeLog = "$projectDir/source/org/zfin/db/load/db.changelog.master.xml"

task buildDatabase() {
    liquibase {
        activities {
            main {
                changeLogFile changeLog
                url 'jdbc:postgresql://localhost:5432/' + dbname
            }
        }
    }
}

update {
/*
    println dbname
    println "Running liquibase updates..."
    println "change logs: " + changeLog
*/

}

// variables used for translation of keys in files in SOURCEROOT copied into TARGETROOT
def translateVariableSet = ['TARGETROOT',
                            'WEBDRIVER_PATH_FROM_ROOT',
                            'ROOT_PATH',
                            'CATALINA_HOME',
                            'SOURCEROOT',
                            'MUTANT_NAME',
                            'INSTANCE',
                            'DB_NAME',
                            'INFORMIX_DIR',
                            'INFORMIX_SERVER',
                            'INFORMIXSQLHOSTS',
                            'SHARED_DOMAIN_NAME',
                            'PARTNER_DBNAME',
                            'LOADUP_FULL_PATH',
                            'PARTNER_INTERNAL_INSTANCE',
                            'SQLHOSTS_FILE',
                            'ONCONFIG_FILE',
                            'VALIDATION_EMAIL_DBA',
                            'DEFAULT_EMAIL',
                            'GO_EMAIL_ERR',
                            'SWISSPROT_EMAIL_ERR',
                            'GBROWSE_PATH_FROM_ROOT']

// load properties into gradle
task setup {
    project.ext.ttNameMap = new Properties()
    file("home/WEB-INF/zfin.properties").withInputStream {
        ttNameMap.load(it)
    }
    Map filteredMap = new HashMap()
    project.ext.ttNameMap.each { name, value ->
        if (translateVariableSet.contains(name))
            filteredMap.put(name, value)
    }
    project.ext.ttNameMap = filteredMap
    //println filteredMap.size()
}


task makePostgresVersion {
    doLast {
        copy {
            def serverApps = ttNameMap.get('TARGETROOT')
            serverApps += '/server_apps'
            println "Copying files in directory:: " + serverApps
            from(serverApps) {
                include '**/*_PG.sql', '**/*_PG.sqlj', '**/*_PG.pl', '**/*_PG.sh'
                rename '(.*)_PG(.*)', '$1$2'
            }
            into serverApps
            eachFile { FileCopyDetails fcd ->
                println fcd.path
            }
        }
    }
}

File[] fileList(String dir) {
    file(dir).listFiles({ file -> file.isFile() } as FileFilter).sort()
}

/*
    allprojects.findAll { it.path.startsWith(":server_apps:data_transfer:") }.each { p ->
        println p.path
    }
*/

task printProp() {
    doLast {
        println 'All Properties'
        ttNameMap.each { name, value ->
            println name + ' = ' + value
        }
    }
}


task make {
    dependsOn makePostgresVersion
    dependsOn ':server_apps:apache:deployDirectoryToTargetroot'
    dependsOn ':server_apps:Reports:deployDirectoryToTargetroot'
    dependsOn ':server_apps:DB_maintenance:deployDirectoryToTargetroot'
    dependsOn deployPostgres
}
