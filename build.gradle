buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.postgresql:postgresql:42.0.0'
    }
}
plugins {
    id "org.liquibase.gradle" version "1.2.4"
}

apply plugin: 'java'
apply plugin: 'groovy'

//apply from : '../zfinGradle/build.gradle'

def env = System.getenv()
def dbname = env['DBNAME']
def sourceroot = env['SOURCEROOT']
def pgbindir = env['PGBINDIR']
def pgdata = env['PGDATA']
String targetroot = env['TARGETROOT']

dependencies {
    compile 'org.liquibase:liquibase-core:3.4.1'
    compile "org.liquibase:liquibase-gradle-plugin:1.1.1"
    compile gradleApi()
    compile localGroovy()
}

task deployPostgres(dependsOn: ['lib:DB_functions:postgresFunctions:deployPostgresFunctions',
                                'lib:DB_triggers:postgresTriggerProcedures:deployPostgresTrigger']) {
    description "Deploy all postgres code"
}

defaultTasks 'make'

project.ext.set("dbname", dbname)
project.ext.set("sourceroot", sourceroot)
project.ext.set("pgdata", pgdata)
project.ext.set("pgbindir", pgbindir)

task loadDatabase() {
    doLast {
        File unloads = file('/research/zunloads/databases/zfindb/')
        String unloadPath;
        if (unloads.exists()) {
            File latest = unloads.listFiles().last()
            File latestBakDump = latest.listFiles().last()
            unloadPath = latestBakDump.getPath()
        }

        //use -DB=... path if specified, also, yes, I'm being cute so that it will be -DB=...
        //rather than -Ddb=...
        if (System.getProperty("B")) {
            unloadPath = System.getProperty("B")
        }

        //might as well support -Dunload also
        if (System.getProperty("unload")) {
            unloadPath = System.getProperty("unload")
        }

        println "Loading $unloadPath into $dbname"
        exec {
            commandLine "bash", "-c", "echo 'select pg_terminate_backend(pg_stat_activity.pid) from pg_stat_activity where pid <> pg_backend_pid();' | psql $dbname";
        }
        exec { commandLine 'dropdb', dbname }
        exec { commandLine 'createdb', dbname }
        exec { commandLine "bash", "-c", "pg_restore -j 4 -d $dbname $unloadPath" }
        exec { commandLine "bash", "-c", "echo 'vacuum (analyze)' | psql $dbname" }

    }
}

task loadDb(type: GradleBuild) {
    tasks = ['loadDatabase', 'postloaddb']
}

task loaddb(dependsOn: loadDb) //just an alias, since we're used to loaddb.pl

sourceSets {
    main {
        java {
            srcDirs = ['source']
        }
        resources {
            srcDirs = ['home']
        }
    }
}

String preChangeLog = "$projectDir/source/org/zfin/db/load/db.changelog.master.xml"

task liquibasePreBuild() {
    doLast {
        liquibase {
            activities {
                main {
                    println preChangeLog
                    changeLogFile preChangeLog
                    url 'jdbc:postgresql://localhost:5432/' + dbname
                }
            }
        }
    }
}

liquibasePreBuild.finalizedBy(update)

String postChangeLog = "$projectDir/source/org/zfin/db/postGmakePostloaddb/db.changelog.master.xml"
task liquibasePostBuild() {
    doLast {

        liquibase {
            activities {
                main {
                    changeLogFile preChangeLog
                    Properties properties = new Properties()
                    properties.setProperty("SOURCEROOT", ".")
                    changeLogFile postChangeLog
                    url 'jdbc:postgresql://localhost:5432/' + dbname
                }
            }
        }
    }
}

liquibasePostBuild.finalizedBy(update)

// variables used for translation of keys in files in SOURCEROOT copied into TARGETROOT
def translateVariableSet = [
        'CATALINA_HOME',
        'CGI_BIN_DIR_NAME',
        'DB_NAME',
        'DEFAULT_EMAIL',
        'ENVIRONMENT',
        'FTP_ROOT',
        'GBROWSE_PATH_FROM_ROOT',
        'GENBANK_DAILY_EMAIL',
        'GO_EMAIL_ERR',
        'GO_EMAIL_CURATOR',
        'GROOVY_CLASSPATH',
        'INFORMIX_DIR',
        'INFORMIX_SERVER',
        'INFORMIXSQLHOSTS',
        'INSTANCE',
        'LOADUP_FULL_PATH',
        'MOVE_BLAST_FILES_TO_DEVELOPMENT',
        'MUTANT_NAME',
        'ONCONFIG_FILE',
        'PARTNER_DBNAME',
        'PARTNER_INTERNAL_INSTANCE',
        'ROOT_PATH',
        'SHARED_DOMAIN_NAME',
        'SIDEBAR_COLOR',
        'SOURCEROOT',
        'SQLHOSTS_FILE',
        'SWISSPROT_EMAIL_REPORT',
        'SWISSPROT_EMAIL_CURATOR',
        'SWISSPROT_EMAIL_ERR',
        'TARGETROOT',
        'USER',
        'VALIDATION_EMAIL_DBA',
        'WEBDRIVER_PATH_FROM_ROOT',
        'WEBHOST_FASTA_FILE_PATH',
]

// load properties into gradle
task setup {
    project.ext.ttNameMap = new Properties()
    file("home/WEB-INF/zfin.properties").withInputStream {
        ttNameMap.load(it)
    }
    Map filteredMap = new HashMap()
    project.ext.ttNameMap.each { name, value ->
        if (translateVariableSet.contains(name))
            filteredMap.put(name, value)
    }
    project.ext.ttNameMap = filteredMap
    //println filteredMap.size()
}


task makePostgresVersion {
    doLast {
        copy {
            def serverApps = ttNameMap.get('TARGETROOT')
            serverApps += '/server_apps'
            println "Copying files in directory:: " + serverApps
            from(serverApps) {
                include '**/*_PG.sql', '**/*_PG.sqlj', '**/*_PG.pl', '**/*_PG.sh', '**/*_PG.groovy', '**/*_PG.pm', '**/*_PG.cgi'
                rename '(.*)_PG(.*)', '$1$2'
            }
            into serverApps
            eachFile { FileCopyDetails fcd ->
                println fcd.path
            }
        }
        copy {
            def targetRoot = ttNameMap.get('TARGETROOT')
            targetRoot += '/cgi-bin'
            println "Copying files in directory:: " + targetRoot
            from(targetRoot) {
                include '**/*_PG.sql', '**/*_PG.sqlj', '**/*_PG.pl', '**/*_PG.sh', '**/*_PG.groovy', '**/*_PG.pm', '**/*_PG.cgi'
                rename '(.*)_PG(.*)', '$1$2'
            }
            into targetRoot
            eachFile { FileCopyDetails fcd ->
                println fcd.path
            }
        }
    }
}

/*
    allprojects.findAll { it.path.startsWith(":server_apps:data_transfer:") }.each { p ->
        println p.path
    }
*/

task printProp() {
    doLast {
        println 'All Properties'
        ttNameMap.each { name, value ->
            println name + ' = ' + value
        }
    }
}



project(':server_apps:sysexecs') {
    task "deployFiles"(type: ZfinTargetCopy) {
        from(project.projectDir) {
            ttNameMap.each { name, value ->
                filter { it.replaceAll('<!--\\|' + name + '\\|-->', value) }
            }
            exclude '**/Makefile', '**/build.gradle'
        }
        into targetroot + pName
    }
}

project(':server_apps:apache') {
    task "deployFiles"(type: ZfinTargetCopy) {
        from(project.projectDir) {
            ttNameMap.each { name, value ->
                filter { it.replaceAll('<!--\\|' + name + '\\|-->', value) }
            }
            exclude '**/Makefile', '**/build.gradle'
        }
        into targetroot + pName
    }
}

project(':server_apps:Reports') {
    task "deployFiles"(type: ZfinTargetCopy) {
        from(project.projectDir) {
            ttNameMap.each { name, value ->
                filter { it.replaceAll('<!--\\|' + name + '\\|-->', value) }
            }
            exclude '**/Makefile', '**/build.gradle'
        }
        into targetroot + pName
    }
}

project(':server_apps:DB_maintenance') {
    task "deployFiles"(type: ZfinTargetCopy) {
        from(project.projectDir) {
            ttNameMap.each { name, value ->
                filter { it.replaceAll('<!--\\|' + name + '\\|-->', value) }
            }
            exclude '**/Makefile', '**/build.gradle', '**/postgres/liquibase/*'
        }
        into targetroot + pName
    }
}

project('cgi-bin') {
    task "deployFiles"(type: ZfinTargetCopy) {
        from(project.projectDir) {
            ttNameMap.each { name, value ->
                filter { it.replaceAll('<!--\\|' + name + '\\|-->', value) }
            }
            exclude '**/Makefile', '**/build.gradle'
        }
        into targetroot + pName
    }
}

task deployPerlFiles(type: Copy) {
    description 'Deploy perl files into TARGETROOT'
    group 'ZFIN Deployment'
    doLast{
    String file = projectDir;
     file =+ '/server_apps/ZFINPerlModules_PG.pm'
      println file
        from(file) {
            ttNameMap.each { name, value ->
                if (value != null)
                    filter { it.replaceAll('<!--\\|' + name + '\\|-->', value) }
            }
        }
        into(targetroot + '/server_apps/')
	}

}

task deployPackageFiles(type: Copy, dependsOn: deployPerlFiles) {
    description 'Deploy package.json into TARGETROOT'
    group 'ZFIN Deployment'
    String packageFile = 'package.json'
    doLast{
    from(packageFile)
    into(targetroot)
    }
}

project(':server_apps:data_transfer') {
    task "deployFiles"(type: ZfinTargetCopy) {
        from(project.projectDir) {
            ttNameMap.each { name, value ->
                filter { it.replaceAll('<!--\\|' + name + '\\|-->', value) }
            }
            exclude '**/Makefile', '**/build.gradle', '**/SangerMutants/*'
        }
        into targetroot + pName
    }
}


task postloaddb(type: GradleBuild) {
    tasks = ['liquibasePreBuild',
             'update',
             'deployPostgresFunctions',
             'dropTriggers',
             'dropFunctions'
    ]
}

task make(type: GradleBuild) {
    tasks = ['deployPostgres',
             ':server_apps:apache:deployFiles',
             ':server_apps:sysexecs:deployFiles',
             ':server_apps:DB_maintenance:deployFiles',
             ':server_apps:data_transfer:deployFiles',
             ':server_apps:Reports:deployFiles',
             'deployPackageFiles',
             ':cgi-bin:deployFiles',
             'makePostgresVersion'
    ]
}

task createSchemaSpy() {
    doLast {
        println 'Creating ER diagram for ' + ttNameMap.get('DB_NAME') + ' ...'
        javaexec {
            main = "-jar";
            args = [
                    "lib/Java/schemaSpy_5.0.0.jar",
                    "-t",
                    "pgsql",
                    "-db",
                    ttNameMap.get('DB_NAME'),
                    "-u",
                    ttNameMap.get('USER'),
                    "-host",
                    "localhost",
                    "-dp",
                    "lib/Java/postgresql-42.1.4.jar",
                    "-s",
                    "public",
                    "-o",
                    ttNameMap.get('TARGETROOT') + "/home/schemaSpy",
            ]
        }
    }
}

class ZfinTargetCopy extends Copy {

    String projectName;
    String pName;
    Map ttMap;
    String target;

    public ZfinTargetCopy() {
        projectName = project.path
        pName = projectName.replace(":", "/")
        description 'Deploy ' + pName + ' to TARGETROOT'
        group 'ZFIN Deployment'
    }

    @TaskAction
    void executeTask() {
    }
}

