task genotypeNamingIssues(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.nomenclature.repair.GenotypeNamingIssues'

    //so we can pass the log4j config file
    // (eg. "gradle -Dlog4j2.configurationFile=./home/WEB-INF/log4j2.xml genotypeNamingIssues")
    systemProperty "log4j2.configurationFile", System.getProperty("log4j2.configurationFile", "./conf/gradle-log4j2.xml")

    //so we can pass along a specific path to which to write the CSV report
    systemProperty "reportFile", System.getProperty("reportFile", null)
}

task featureAttributionRepair(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.feature.repair.FeatureAttributionRepair'
    systemProperty "reportFile", System.getProperty("reportFile", null)
    systemProperty "publicationsBefore", System.getProperty("publicationsBefore", null)
    systemProperty "publicationsAfter", System.getProperty("publicationsAfter", null)
}

task journalAbbreviationSyncReport(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    systemProperty "executeSql", false
    main = 'org.zfin.publication.JournalAbbreviationSyncTask'
}

task journalAbbreviationSyncAndUpdate(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    systemProperty "executeSql", true
    main = 'org.zfin.publication.JournalAbbreviationSyncTask'
}

task importCloneAssembly(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.mapping.importer.ImportCloneAssemblyTask'
}

task BatchNCBIFastaFetchTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.datatransfer.webservice.BatchNCBIFastaFetchTask'
    systemProperty "ncbiLoadInput", System.getProperty("ncbiLoadInput", null)
    systemProperty "ncbiLoadOutput", System.getProperty("ncbiLoadOutput", null)
}

task cleanMarkerGoTermEvidenceDuplicatesTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.mutant.MarkerGoTermEvidenceCleanupTask'
}

task thisseLegacyImportAnalysisTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.thisse.ThisseLegacyImportAnalysisTask'
}

task uniprotAnalysisTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.uniprot.task.UniProtAnalysisTask'
}

task uniprotCompareTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.uniprot.task.UniProtCompareTask'
}

task uniprotReleaseDiffTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.uniprot.task.UniProtReleaseDiffTask'
    systemProperty "log4j2.configurationFile", System.getProperty("log4j2.configurationFile", "./conf/gradle-log4j2.xml")
}

task uniprotReleaseCheckTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.uniprot.task.UniProtReleaseCheckTask'
//   use the conf/gradle-log4j2.xml file and customize if needed
//    systemProperty "log4j2.configurationFile", System.getProperty("log4j2.configurationFile", "./home/WEB-INF/log4j2-debug.xml")
}

task uniprotLoadTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.uniprot.task.UniProtLoadTask'
    systemProperty "log4j2.configurationFile", System.getProperty("log4j2.configurationFile", "./conf/gradle-log4j2.xml")
}

task uniprotSecondaryTermLoadTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.uniprot.task.UniprotSecondaryTermLoadTask'
    systemProperty "log4j2.configurationFile", System.getProperty("log4j2.configurationFile", "./conf/gradle-log4j2.xml")
}

task ncbiMatchThroughEnsemblTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.uniprot.task.NcbiMatchThroughEnsemblTask'
    systemProperty "ncbiFileUrl", System.getProperty("ncbiFileUrl", null)
}

task createUIIndex(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.indexer.UiIndexer'
}

task runPhenotypeIndexer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.indexer.UiIndexer'
    args 'TermPhenotype'
    args 'ChebiPhenotype'
}

task imageThumbnailFixTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.figure.service.ImageThumbnailFixTask'
    systemProperty "runImageFixes", System.getProperty("runImageFixes", null)
}

task runMeshChebiGenerator(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.datatransfer.ctd.LoadCtdData'
    doFirst {
        args JobName
    }
}

//TODO: remove this task after duplicates have been fixed
task expressionExperimentAnalysisTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.expression.task.ExpressionExperimentAnalysisTask'
}

task runEnsemblTranscriptLoader(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.sequence.load.EnsemblTranscriptFastaReadProcess'
}

task runEnsemblTranscriptChecker(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.sequence.load.EnsemblTranscriptTester'
}

task runEnsemblTranscriptLengthUpdater(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.sequence.load.EnsemblTranscriptUpdateLengthTask'
}

task createMeshChebiMappingFile(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.datatransfer.ctd.CreateMeshChebiMappingFile'
}

task importMissingFPBaseProteinsTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.marker.fluorescence.ImportMissingFPBaseProteinsTask'
}

task createEnsembTranscriptFastaFile(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.sequence.load.EnsemblTranscriptFastaReader'
    args  'server_apps/data_transfer/BLAST/Ensembl'
}

task findEmptyPublicationFilesTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.publication.FindEmptyPublicationFilesTask'
}

task generateSitemapTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.infrastructure.seo.GenerateSitemapTask'
}

task readAndQuerySitemapTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.infrastructure.seo.ReadAndQuerySitemapTask'
}

task checkSequenceValidationRulesTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.sequence.CheckSequenceValidationRulesTask'
}

task addCountryTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.task.AddCountryTask'
}

task imageThumbnailAndMediumSwapTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.figure.service.ImageThumbnailAndMediumSwapTask'
}

task validateSolrDihConfigTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.task.ValidateSolrDihConfigTask'
}

task loadZfishMetaTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.datatransfer.LoadZfishMetaTask'
}

task checkFilePermissionsTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.task.CheckFilePermissionsTask'
}

task csvMerge(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.datatransfer.util.CSVMerge'

    // Get arguments from the command line
    // So this can be called like so:
    // gradle csvMergerTask --args="before_db_link.csv before_recattrib.csv dblink_zdb_id recattrib_data_zdb_id recattrib_source_zdb_id /tmp/combined.csv"
}

task csvDiff(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.datatransfer.util.CSVDiff'

    // Get arguments from the command line
    // So this can be called like so:
    // gradle csvDiff --args="dblink_cmp_ before_combined.csv after_combined.csv dblink_linked_recid,dblink_acc_num,dblink_fdbcont_zdb_id,recattrib_source_zdb_id dblink_info,dblink_zdb_id"
}

task ncbiCharacterize(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.datatransfer.ncbi.NCBICharacterizationProcess'

    // Get arguments from the command line
    // So this can be called like so:
    // gradle ncbiCharacterize --args="$TARGETROOT/server_apps/datatransfer/NCBIGENE"
}

task ncbiLoadPort(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.datatransfer.ncbi.NCBIDirectPort'
}

task csv2xlsx(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.datatransfer.util.CSVToXLSXConverter'

    // Get arguments from the command line
    // So this can be called like so:
    // gradle csv2xlsx --args="output.xlsx input1.csv input2.csv input3.csv..."
}

task createGff3Files(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.sequence.gff.Gff3Writer'
}

task loadGff3NcbiFile(type: JavaExec) {
    jvmArgs = ['-Xmx16g', '-Xms1g']
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.sequence.gff.NCBIGff3Processor'
}

task postLoadGff3NcbiFile(type: JavaExec) {
    jvmArgs = ['-Xmx16g', '-Xms1g']
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.sequence.gff.NCBIGff3PostProcessor'
}

//example usage:
// gradle tokenStorage --args="read NCBI_API_TOKEN"
// gradle tokenStorage --args="write NCBI_API_TOKEN my_token_value"
task tokenStorage(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.infrastructure.TokenStorage'
}

//example usage:
// gradle fetchNcbiReplacedGeneIDs --args="<deadIDsOutputFile> <mappedIDsOutputFile>"
task fetchNcbiReplacedGeneIDs(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.datatransfer.ncbi.NCBIReplacedGeneIDsTask'
}