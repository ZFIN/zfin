task genotypeNamingIssues(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.nomenclature.repair.GenotypeNamingIssues'

    //so we can pass the log4j config file
    // (eg. "gradle -Dlog4j2.configurationFile=./home/WEB-INF/log4j2.xml genotypeNamingIssues")
    systemProperty "log4j2.configurationFile", System.getProperty("log4j2.configurationFile", "./conf/gradle-log4j2.xml")

    //so we can pass along a specific path to which to write the CSV report
    systemProperty "reportFile", System.getProperty("reportFile", null)
}

task featureAttributionRepair(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.feature.repair.FeatureAttributionRepair'
    systemProperty "reportFile", System.getProperty("reportFile", null)
    systemProperty "publicationsBefore", System.getProperty("publicationsBefore", null)
    systemProperty "publicationsAfter", System.getProperty("publicationsAfter", null)
}

task journalAbbreviationSync(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.publication.JournalAbbreviationSyncTask'
}

task importCloneAssembly(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.mapping.importer.CloneGenomeLocationImporter'
//    jvmArgs = ["-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=12345"]
//    jvmArgs = ["-Xdebug", "-Xrunjdwp:transport=dt_socket,server=n,suspend=y,address=10.0.0.216:5002"]

    //so we can pass the log4j config file
    systemProperty "log4j2.configurationFile", System.getProperty("log4j2.configurationFile", "./conf/gradle-log4j2.xml")
}


