task genotypeNamingIssues(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.nomenclature.repair.GenotypeNamingIssues'

    //so we can pass the log4j config file
    // (eg. "gradle -Dlog4j2.configurationFile=./home/WEB-INF/log4j2.xml genotypeNamingIssues")
    systemProperty "log4j2.configurationFile", System.getProperty("log4j2.configurationFile", "./conf/gradle-log4j2.xml")

    //so we can pass along a specific path to which to write the CSV report
    systemProperty "reportFile", System.getProperty("reportFile", null)
}

task featureAttributionRepair(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.feature.repair.FeatureAttributionRepair'
    systemProperty "reportFile", System.getProperty("reportFile", null)
    systemProperty "publicationsBefore", System.getProperty("publicationsBefore", null)
    systemProperty "publicationsAfter", System.getProperty("publicationsAfter", null)
}

task journalAbbreviationSyncReport(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    systemProperty "executeSql", false
    main = 'org.zfin.publication.JournalAbbreviationSyncTask'
}

task journalAbbreviationSyncAndUpdate(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    systemProperty "executeSql", true
    main = 'org.zfin.publication.JournalAbbreviationSyncTask'
}

task importCloneAssembly(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.mapping.importer.ImportCloneAssemblyTask'
}

task NCBILoadFastaTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.datatransfer.webservice.BatchNCBIFastaFetchTask'
    systemProperty "ncbiLoadInput", System.getProperty("ncbiLoadInput", null)
    systemProperty "ncbiLoadOutput", System.getProperty("ncbiLoadOutput", null)
}

task cleanMarkerGoTermEvidenceDuplicatesTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.mutant.MarkerGoTermEvidenceCleanupTask'
}

task thisseLegacyImportAnalysisTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.thisse.ThisseLegacyImportAnalysisTask'
}

task uniprotAnalysisTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.uniprot.task.UniProtAnalysisTask'
}

task uniprotCompareTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.uniprot.task.UniProtCompareTask'
}

task uniprotReleaseDiffTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.uniprot.task.UniProtReleaseDiffTask'
    systemProperty "log4j2.configurationFile", System.getProperty("log4j2.configurationFile", "./conf/gradle-log4j2.xml")
}

task uniprotReleaseCheckTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.uniprot.task.UniProtReleaseCheckTask'
//   use the conf/gradle-log4j2.xml file and customize if needed
//    systemProperty "log4j2.configurationFile", System.getProperty("log4j2.configurationFile", "./home/WEB-INF/log4j2-debug.xml")
}

task uniprotLoadTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.uniprot.task.UniProtLoadTask'
    systemProperty "log4j2.configurationFile", System.getProperty("log4j2.configurationFile", "./conf/gradle-log4j2.xml")
}

task uniprotSecondaryTermLoadTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.uniprot.task.UniprotSecondaryTermLoadTask'
    systemProperty "log4j2.configurationFile", System.getProperty("log4j2.configurationFile", "./conf/gradle-log4j2.xml")
}

task ncbiMatchThroughEnsemblTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.uniprot.task.NcbiMatchThroughEnsemblTask'
    systemProperty "ncbiFileUrl", System.getProperty("ncbiFileUrl", null)
}

task createUIIndex(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.indexer.UiIndexer'
}

task runPhenotypeIndexer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.indexer.UiIndexer'
    args 'TermPhenotype'
    args 'ChebiPhenotype'
}

task imageThumbnailFixTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.figure.service.ImageThumbnailFixTask'
    systemProperty "runImageFixes", System.getProperty("runImageFixes", null)
}

task runMeshChebiGenerator(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.datatransfer.ctd.LoadCtdData'
}

//TODO: remove this task after duplicates have been fixed
task expressionExperimentAnalysisTask(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.expression.task.ExpressionExperimentAnalysisTask'
}

task runEnsemblTranscriptLoader(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.sequence.load.EnsemblTranscriptFastaReadProcess'
}

task createMeshChebiMappingFile(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.zfin.datatransfer.ctd.CreateMeshChebiMappingFile'
}

