Index: user/src/com/google/gwt/user/client/ui/SuggestBox.java
===================================================================
--- user/src/com/google/gwt/user/client/ui/SuggestBox.java	(revision 8050)
+++ user/src/com/google/gwt/user/client/ui/SuggestBox.java	(working copy)
@@ -17,61 +17,52 @@
 
 import com.google.gwt.dom.client.Document;
 import com.google.gwt.dom.client.Element;
-import com.google.gwt.event.dom.client.HandlesAllKeyEvents;
-import com.google.gwt.event.dom.client.HasAllKeyHandlers;
-import com.google.gwt.event.dom.client.KeyCodes;
-import com.google.gwt.event.dom.client.KeyDownEvent;
-import com.google.gwt.event.dom.client.KeyDownHandler;
-import com.google.gwt.event.dom.client.KeyPressEvent;
-import com.google.gwt.event.dom.client.KeyPressHandler;
-import com.google.gwt.event.dom.client.KeyUpEvent;
-import com.google.gwt.event.dom.client.KeyUpHandler;
-import com.google.gwt.event.logical.shared.HasSelectionHandlers;
-import com.google.gwt.event.logical.shared.SelectionEvent;
-import com.google.gwt.event.logical.shared.SelectionHandler;
-import com.google.gwt.event.logical.shared.ValueChangeEvent;
-import com.google.gwt.event.logical.shared.ValueChangeHandler;
+import com.google.gwt.event.dom.client.*;
+import com.google.gwt.event.logical.shared.*;
 import com.google.gwt.event.shared.HandlerRegistration;
+import com.google.gwt.i18n.client.LocaleInfo;
 import com.google.gwt.user.client.Command;
 import com.google.gwt.user.client.DOM;
+import com.google.gwt.user.client.Event;
 import com.google.gwt.user.client.ui.PopupPanel.AnimationType;
 import com.google.gwt.user.client.ui.SuggestOracle.Callback;
 import com.google.gwt.user.client.ui.SuggestOracle.Request;
 import com.google.gwt.user.client.ui.SuggestOracle.Response;
 import com.google.gwt.user.client.ui.SuggestOracle.Suggestion;
 
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 
 /**
  * A {@link SuggestBox} is a text box or text area which displays a
  * pre-configured set of selections that match the user's input.
- * 
+ *
  * Each {@link SuggestBox} is associated with a single {@link SuggestOracle}.
  * The {@link SuggestOracle} is used to provide a set of selections given a
  * specific query string.
- * 
+ *
  * <p>
  * By default, the {@link SuggestBox} uses a {@link MultiWordSuggestOracle} as
  * its oracle. Below we show how a {@link MultiWordSuggestOracle} can be
  * configured:
  * </p>
- * 
+ *
  * <pre> 
  *   MultiWordSuggestOracle oracle = new MultiWordSuggestOracle();  
  *   oracle.add("Cat");
  *   oracle.add("Dog");
  *   oracle.add("Horse");
  *   oracle.add("Canary");
- *   
+ *
  *   SuggestBox box = new SuggestBox(oracle);
  * </pre>
- * 
+ *
  * Using the example above, if the user types "C" into the text widget, the
  * oracle will configure the suggestions with the "Cat" and "Canary"
  * suggestions. Specifically, whenever the user types a key into the text
  * widget, the value is submitted to the <code>MultiWordSuggestOracle</code>.
- * 
+ *
  * <p>
  * Note that there is no method to retrieve the "currently selected suggestion"
  * in a SuggestBox, because there are points in time where the currently
@@ -83,11 +74,11 @@
  * whenever a suggestion is chosen, and handlers for these events can be added
  * using the {@link #addValueChangeHandler(ValueChangeHandler)} method.
  * </p>
- * 
+ *
  * <p>
  * <img class='gallery' src='SuggestBox.png'/>
  * </p>
- * 
+ *
  * <h3>CSS Style Rules</h3>
  * <dl>
  * <dt>.gwt-SuggestBox</dt>
@@ -135,7 +126,7 @@
  * <dt>.gwt-SuggestBoxPopup .suggestPopupBottomRightInner</dt>
  * <dd>the inner element of the cell</dd>
  * </dl>
- * 
+ *
  * @see SuggestOracle
  * @see MultiWordSuggestOracle
  * @see TextBoxBase
@@ -157,7 +148,7 @@
    * Additional methods in SuggestionMenu provide information about the number
    * of items in the menu, and the index of the currently selected item.
    */
-  private static class SuggestionMenu extends MenuBar {
+  private class SuggestionMenu extends MenuBar {
 
     public SuggestionMenu(boolean vertical) {
       super(vertical);
@@ -166,6 +157,103 @@
       setStyleName("");
     }
 
+    @Override
+    public void onBrowserEvent(Event event) {
+      MenuItem item = findItem(DOM.eventGetTarget(event));
+      switch (DOM.eventGetType(event)) {
+        case Event.ONCLICK: {
+          FocusPanel.impl.focus(getElement());
+          // Fire an item's command when the user clicks on it.
+          if (item != null) {
+            doItemAction(item, true);
+          }
+          break;
+        }
+
+        case Event.ONMOUSEOVER: {
+          if (item != null) {
+            itemOver(item, true);
+            fireHighlightedEvent(this);
+          }
+          break;
+        }
+
+        case Event.ONMOUSEOUT: {
+          if (item != null) {
+            itemOver(null, true);
+            fireHighlightedEvent(this);
+          }
+          break;
+        }
+
+        case Event.ONFOCUS: {
+          selectFirstItemIfNoneSelected();
+          fireHighlightedEvent(this);
+          break;
+        }
+
+        case Event.ONKEYDOWN: {
+          int keyCode = DOM.eventGetKeyCode(event);
+          switch (keyCode) {
+            case KeyCodes.KEY_LEFT:
+              if (LocaleInfo.getCurrentLocale().isRTL()) {
+                moveToNextItem();
+              } else {
+                moveToPrevItem();
+              }
+              eatEvent(event);
+              break;
+            case KeyCodes.KEY_RIGHT:
+              if (LocaleInfo.getCurrentLocale().isRTL()) {
+                moveToPrevItem();
+              } else {
+                moveToNextItem();
+              }
+              eatEvent(event);
+              break;
+            case KeyCodes.KEY_UP:
+              moveUp();
+              fireHighlightedEvent(this);
+              eatEvent(event);
+              break;
+            case KeyCodes.KEY_DOWN:
+              moveDown();
+              fireHighlightedEvent(this);
+              eatEvent(event);
+              break;
+            case KeyCodes.KEY_ESCAPE:
+              closeAllParents();
+              eatEvent(event);
+              break;
+            case KeyCodes.KEY_ENTER:
+              if (!selectFirstItemIfNoneSelected()) {
+                doItemAction(selectedItem, true);
+                eatEvent(event);
+              }
+              break;
+          } // end switch(keyCode)
+
+          break;
+        } // end case Event.ONKEYDOWN
+      } // end switch (DOM.eventGetType(event))
+
+      // in place of other code
+      switch (DOM.eventGetType(event)) {
+        case Event.ONMOUSEOVER:
+          // Only fire the mouse over event if it's coming from outside this
+          // widget.
+        case Event.ONMOUSEOUT:
+          // Only fire the mouse out event if it's leaving this
+          // widget.
+          Element related = event.getRelatedTarget();
+          if (related != null && getElement().isOrHasChild(related)) {
+            return;
+          }
+          break;
+      }
+      DomEvent.fireNativeEvent(event, this, this.getElement());
+    }
+
     public void doSelectedItemAction() {
       // In order to perform the action of the item that is currently
       // selected, the menu must be showing.
@@ -181,7 +269,7 @@
 
     /**
      * Returns the index of the menu item that is currently selected.
-     * 
+     *
      * @return returns the selected item
      */
     public int getSelectedItemIndex() {
@@ -198,19 +286,78 @@
      * Selects the item at the specified index in the menu. Selecting the item
      * does not perform the item's associated action; it only changes the style
      * of the item and updates the value of SuggestionMenu.selectedItem.
-     * 
+     *
      * @param index index
      */
     public void selectItem(int index) {
       List<MenuItem> items = getItems();
       if (index > -1 && index < items.size()) {
         itemOver(items.get(index), false);
+        fireHighlightedEvent(this);
       }
     }
+
+    public SuggestOracle.Suggestion getHighlightedSuggestion(){
+      return   ((SuggestBox.SuggestionMenuItem) getSelectedItem()).getSuggestion() ;
+    }
   }
 
+  private Suggestion highlightedSuggestion = null ;
 
   /**
+   * @param suggestion Suggestion to check.
+   * @return Returns if suggestion has changed.
+   */
+  protected boolean isNewHighlightedSuggestion(Suggestion suggestion){
+    if(suggestion==null && highlightedSuggestion == null){
+      return false ;
+    }
+    else
+    if(
+        ( highlightedSuggestion == null && suggestion != null )
+            ||
+            ( highlightedSuggestion !=null && suggestion == null )
+            ||
+            (false == highlightedSuggestion.getReplacementString().equals(suggestion.getReplacementString()))
+        ){
+      highlightedSuggestion = suggestion ;
+      return true ;
+    }
+    else{
+      return false ;
+    }
+  }
+
+  private void fireHighlightedEvent(SuggestionMenu suggestionMenu) {
+    Suggestion highlightedSuggestion = suggestionMenu.getHighlightedSuggestion();
+    if(isNewHighlightedSuggestion(highlightedSuggestion)){
+      fireHighlightedEvent(new SuggestionHighlightEvent(highlightedSuggestion));
+    }
+  }
+
+  /**
+   * @param event Event to fire
+   */
+  public void fireHighlightedEvent(SuggestionHighlightEvent event) {
+    for(HighlightHandler<Suggestion> suggestionHighlightHandler : getHighlightHandlers()){
+      suggestionHighlightHandler.onHighlight(event);
+    }
+  }
+
+
+  // listeneres
+  private List<HighlightHandler<Suggestion>> suggestionHighlightHandlers = new ArrayList<HighlightHandler<Suggestion>>() ;
+
+  public void addSuggestionHandler(HighlightHandler<Suggestion> highlightHandler){
+    suggestionHighlightHandlers.add(highlightHandler) ;
+  }
+
+  public List<HighlightHandler<Suggestion>> getHighlightHandlers() {
+    return suggestionHighlightHandlers;
+  }
+
+
+  /**
    * Class for menu items in a SuggestionMenu. A SuggestionMenuItem differs from
    * a MenuItem in that each item is backed by a Suggestion object. The text of
    * each menu item is derived from the display string of a Suggestion object,
@@ -247,11 +394,11 @@
   /**
    * Creates a {@link SuggestBox} widget that wraps an existing &lt;input
    * type='text'&gt; element.
-   * 
+   *
    * This element must already be attached to the document. If the element is
    * removed from the document, you must call
    * {@link RootPanel#detachNow(Widget)}.
-   * 
+   *
    * @param oracle the suggest box oracle to use
    * @param element the element to be wrapped
    */
@@ -294,7 +441,7 @@
   /**
    * Constructor for {@link SuggestBox}. Creates a {@link TextBox} to use with
    * this {@link SuggestBox}.
-   * 
+   *
    * @param oracle the oracle for this <code>SuggestBox</code>
    */
   public SuggestBox(SuggestOracle oracle) {
@@ -304,7 +451,7 @@
   /**
    * Constructor for {@link SuggestBox}. The text box will be removed from it's
    * current location and wrapped by the {@link SuggestBox}.
-   * 
+   *
    * @param oracle supplies suggestions based upon the current contents of the
    *          text widget
    * @param box the text widget
@@ -318,7 +465,6 @@
     suggestionMenu = new SuggestionMenu(true);
     suggestionPopup = createPopup();
     suggestionPopup.setAnimationType(AnimationType.ROLL_DOWN);
-
     addEventsToTextBox();
 
     setOracle(oracle);
@@ -326,10 +472,10 @@
   }
 
   /**
-   * 
+   *
    * Adds a listener to receive change events on the SuggestBox's text box. The
    * source Widget for these events will be the SuggestBox.
-   * 
+   *
    * @param listener the listener interface to add
    * @deprecated use {@link #getTextBox}().addChangeHandler instead
    */
@@ -341,7 +487,7 @@
   /**
    * Adds a listener to receive click events on the SuggestBox's text box. The
    * source Widget for these events will be the SuggestBox.
-   * 
+   *
    * @param listener the listener interface to add
    * @deprecated use {@link #getTextBox}().addClickHandler instead
    */
@@ -354,7 +500,7 @@
 
   /**
    * Adds an event to this handler.
-   * 
+   *
    * @deprecated use {@link #addSelectionHandler} instead.
    */
   @Deprecated
@@ -365,7 +511,7 @@
   /**
    * Adds a listener to receive focus events on the SuggestBox's text box. The
    * source Widget for these events will be the SuggestBox.
-   * 
+   *
    * @param listener the listener interface to add
    * @deprecated use {@link getTextBox}().addFocusHandler/addBlurHandler() instead
    */
@@ -411,7 +557,7 @@
    * Gets the limit for the number of suggestions that should be displayed for
    * this box. It is up to the current {@link SuggestOracle} to enforce this
    * limit.
-   * 
+   *
    * @return the limit for the number of suggestions
    */
   public int getLimit() {
@@ -420,7 +566,7 @@
 
   /**
    * Gets the suggest box's {@link com.google.gwt.user.client.ui.SuggestOracle}.
-   * 
+   *
    * @return the {@link SuggestOracle}
    */
   public SuggestOracle getSuggestOracle() {
@@ -437,7 +583,7 @@
 
   /**
    * Get the text box associated with this suggest box.
-   * 
+   *
    * @return this suggest box's text box
    */
   public TextBoxBase getTextBox() {
@@ -462,7 +608,7 @@
   /**
    * Returns whether or not the first suggestion will be automatically selected.
    * This behavior is on by default.
-   * 
+   *
    * @return true if the first suggestion will be automatically selected
    */
   public boolean isAutoSelectEnabled() {
@@ -532,7 +678,7 @@
   /**
    * Turns on or off the behavior that automatically selects the first suggested
    * item. This behavior is on by default.
-   * 
+   *
    * @param selectsFirstItem Whether or not to automatically select the first
    *          suggestion
    */
@@ -547,7 +693,7 @@
   /**
    * Sets the limit to the number of suggestions the oracle should provide. It
    * is up to the oracle to enforce this limit.
-   * 
+   *
    * @param limit the limit to the number of suggestions provided
    */
   public void setLimit(int limit) {
@@ -556,7 +702,7 @@
 
   /**
    * Sets the style name of the suggestion popup.
-   * 
+   *
    * @param style the new primary style name
    * @see UIObject#setStyleName(String)
    */
@@ -596,7 +742,7 @@
    * <li>-popup = The popup that appears with suggestions.</li>
    * <li>-items-item# = The suggested item at the specified index.</li>
    * </ul>
-   * 
+   *
    * @see UIObject#onEnsureDebugId(String)
    */
   @Override
@@ -608,12 +754,12 @@
 
   /**
    * Gets the specified suggestion from the suggestions currently showing.
-   * 
+   *
    * @param index the index at which the suggestion lives
-   * 
+   *
    * @throws IndexOutOfBoundsException if the index is greater then the number
    *           of suggestions currently showing
-   * 
+   *
    * @return the given suggestion
    */
   Suggestion getSuggestion(int index) {
@@ -626,7 +772,7 @@
 
   /**
    * Get the number of suggestions that are currently showing.
-   * 
+   *
    * @return the number of suggestions currently showing, 0 if there are none
    */
   int getSuggestionCount() {
@@ -723,7 +869,7 @@
 
   /**
    * Sets the suggestion oracle used to create suggestions.
-   * 
+   *
    * @param oracle the oracle
    */
   private void setOracle(SuggestOracle oracle) {
@@ -732,7 +878,7 @@
 
   /**
    * Show the given collection of suggestions.
-   * 
+   *
    * @param suggestions suggestions to show
    */
   private void showSuggestions(Collection<? extends Suggestion> suggestions) {
@@ -771,4 +917,12 @@
       suggestionPopup.hide();
     }
   }
+
+  /**
+   */
+  public class SuggestionHighlightEvent extends HighlightEvent<Suggestion> {
+    SuggestionHighlightEvent(Suggestion highlighted) {
+      super(highlighted);
+    }
+  }
 }
Index: user/src/com/google/gwt/user/client/ui/MenuBar.java
===================================================================
--- user/src/com/google/gwt/user/client/ui/MenuBar.java	(revision 8050)
+++ user/src/com/google/gwt/user/client/ui/MenuBar.java	(working copy)
@@ -157,7 +157,7 @@
   private boolean isAnimationEnabled = false;
   private MenuBar parentMenu;
   private PopupPanel popup;
-  private MenuItem selectedItem;
+  MenuItem selectedItem;
   private MenuBar shownChildMenu;
   private boolean vertical, autoOpen;
 
@@ -818,12 +818,12 @@
     }
   }
 
-  private void eatEvent(Event event) {
+  void eatEvent(Event event) {
     DOM.eventCancelBubble(event, true);
     DOM.eventPreventDefault(event);
   }
 
-  private MenuItem findItem(Element hItem) {
+  MenuItem findItem(Element hItem) {
     for (MenuItem item : items) {
       if (DOM.isOrHasChild(item.getElement(), hItem)) {
         return item;
@@ -881,7 +881,7 @@
     DOM.setElementAttribute(getElement(), "hideFocus", "true");
   }
 
-  private void moveDown() {
+  void moveDown() {
     if (selectFirstItemIfNoneSelected()) {
       return;
     }
@@ -906,7 +906,7 @@
     }
   }
 
-  private void moveToNextItem() {
+  void moveToNextItem() {
     if (selectFirstItemIfNoneSelected()) {
       return;
     }
@@ -931,7 +931,7 @@
     }
   }
 
-  private void moveToPrevItem() {
+  void moveToPrevItem() {
     if (selectFirstItemIfNoneSelected()) {
       return;
     }
@@ -947,7 +947,7 @@
     }
   }
 
-  private void moveUp() {
+  void moveUp() {
     if (selectFirstItemIfNoneSelected()) {
       return;
     }
@@ -1093,7 +1093,7 @@
    * @return true if no item was previously selected and the first item in the
    *         list was selected, false otherwise
    */
-  private boolean selectFirstItemIfNoneSelected() {
+  boolean selectFirstItemIfNoneSelected() {
     if (selectedItem == null) {
       MenuItem nextItem = items.get(0);
       selectItem(nextItem);
