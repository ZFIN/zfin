begin work;

--This sql script loads updates to the go_term table from the ontology.unl 
--file (which is generated by test.pl).  
--The ontology.unl file is generated from 3 txt files
--which are downloaded from the GO website, parsed by test.pl and 
--stored in 2 .unl files.
--The ontology.unl file contains primary GOterms that should exist at ZFIN.  
--Those that do not currently exist at ZFIN will be added with this script.   

--make a temp table that will contain records currently in the 
--go_term table at ZFIN.

create temp table exist_record (
                extrecd_zdb_id  varchar(50),
                new_zdb_id      varchar(50)
                );

create temp table sec_dups 
  (
    sec_id varchar(50),
    prim_id varchar(50),
    term_name varchar(255),
    onto varchar(30)
  );
load from ontsecgoid.unl insert into sec_dups ;

create temp table sec_oks 
  (
    sec_id varchar(50),
    prim_id varchar(50),
    term_name varchar(255),
    onto varchar(30)
  );

insert into sec_oks
  select distinct * from sec_dups ;

create temp table sec_unload 
  (
    sec_id varchar(50),
    prim_id varchar(50),
    term_name varchar(255),
    onto varchar(30)
  );

update go_term
  set goterm_is_secondary = 't'
  where goterm_go_id in (select sec_id from sec_unload) ;

insert into sec_unload
  select sec_id, prim_id, term_name, onto
    from sec_oks
    where sec_id in (select goterm_go_id from go_Term) ;

create temp table sec_unload_report 
  (
    sec_id varchar(70),
    prim_id varchar(70),
    term_name varchar(255),
    onto varchar(50),
    go_marker	varchar(70),
    mrkrgo_pub_zdb_id varchar(70)
  );

insert into sec_unload_report
  select 'Now Secondary: GO:'||sec_id, 
	'Now Primary: GO:'||prim_id, 
	'Name: '||term_name, 
	'Ontology: '||onto,
 	'Gene: '||mrkrgo_mrkr_zdb_id, 
	'Pub: '||mrkrgoev_source_zdb_id
    from sec_unload, go_term, marker_go_term, marker_go_term_Evidence
    where sec_id = goterm_go_id
    and mrkrgo_go_term_zdb_id = goterm_zdb_id 
    and mrkrgoev_mrkrgo_zdb_id = mrkrgo_zdb_id ;

unload to 'newannotsecterms.unl' select * from sec_unload_report ;
unload to 'newsecterms.unl' select * from sec_unload ;

--make a temp table that will contain records from ontology.unl 
--(this table will contain
--records that are already in zfindb.go_term at first load).

create temp table goterm_onto_with_dups (
		goterm_id	varchar(10),
		goterm_name	varchar(255),
		goterm_onto	varchar(30)
	)with no log;

--load the ontology file

load from ontology.unl insert into goterm_onto_with_dups;
--secondary id is first column in this file.

--create table that will weed out any duplications in primary terms 
--from the ontology.pl file (which is currently loaded into goterm_with_dups).

create temp table goterm_onto (		
		goterm_id	varchar(10),
		goterm_name	varchar(255),
		goterm_onto	varchar(30)
	)with no log;

create index goterm_onto_index 
  on goterm_onto (goterm_id)
  using btree
  in idxdbs1 ;

create index goterm_name_index 
  on goterm_onto (goterm_name,goterm_onto)
  using btree 
  in idxdbs1 ;

insert into goterm_onto
  select distinct * 
    from goterm_onto_with_dups;


--make a copy of goterm_onto (unique ontology.unl records) in gotermonto.unl
unload to 'gotermonto.unl' select * from goterm_onto;

--make a temp table that will eventually hold distinctly new (to ZFIN) 
--go_Term ids from
--the goterm_onto table. 

create temp table new_goterm (		
                goterm_zdb_id   varchar(50),
		goterm_id	varchar(10),
		goterm_name	varchar(255),
		goterm_onto	varchar(30),
                goterm_is_obsolete boolean,
		goterm_is_secondary boolean
        )with no log;

create index new_goterm_index 
  on new_goterm (goterm_name,goterm_onto)
  using btree 
  in idxdbs2 ;

create index goterm_id_index 
  on new_goterm (goterm_id)
  using btree 
  in idxdbs2 ;

select distinct count(*)  
	from goterm_onto 
	  where goterm_id not in (select goterm_go_id 
 	    		    from go_term);

insert into new_goterm (goterm_id,
			goterm_name,
			goterm_onto,
			goterm_is_obsolete, goterm_is_secondary) 
  select distinct goterm_id,
		  trim(goterm_name),
		  goterm_onto,
		  'f', 'f' 
  from goterm_onto 
  where goterm_id not in (select goterm_go_id 
 	    		    from go_term);

--give new goterms new zdb_ids.

update new_goterm 
  set goterm_zdb_id = get_id("GOTERM");

--make double sure we only get new records, by making a table of
--go term ids that exist in zfindb.go_term and in new_goterm
--and deleting records from exist_Record where this match occurs.

!echo exist record 

insert into exist_record
                select g.goterm_zdb_id, p.goterm_zdb_id
                  from go_term g, new_goterm p
                 where g.goterm_go_id = p.goterm_id;

delete from new_goterm
  where goterm_zdb_id in
      (select new_zdb_id from exist_record)
         and goterm_name in (select goterm_name from go_term);

!echo 'Insert GOTERM into zdb_active_data'

--insert into zdb_active_data select goterm_zdb_id from new_goterm;

select goterm_name 
  from new_goterm 
  group by goterm_name 
    having count(*) > 1 ;

select goterm_id 
  from new_goterm 
  group by goterm_id 
  having count(*) > 1 ;

select goterm_name, goterm_onto 
  from new_goterm 
  group by goterm_name, goterm_onto 
    having count(*) > 1 ;

unload to 'updatedterms.unl'
  select n.goterm_name, g.goterm_name, g.goterm_go_id 
    from new_goterm n, go_term g 
    where n.goterm_id = g.goterm_go_id 
    and n.goterm_name not like g.goterm_name;

update statistics high for table goterm_onto ;
update statistics high for table go_Term ;

update go_term 
  set goterm_name= (select goterm_name 
		      from goterm_onto 
                      where goterm_id = goterm_go_id)
  where goterm_go_id in (select goterm_id 
		       from goterm_onto) ;

insert into zdb_active_data 
	select goterm_zdb_id 
	  from new_goterm 
	  where goterm_id not in (select goterm_go_id 
				    from go_term);

unload to 'newterms.unl' 
  select * 
    from new_goterm 
    where goterm_id not in (select goterm_go_id 
			      from go_term)  ;

!echo 'Insert into go_term'

	create temp table goterm (		
                go_zdb_id   varchar(50),
		goterm_id	varchar(10),
		goterm_name	varchar(255),
		goterm_onto	varchar(30),
                goterm_is_obsolete boolean
        )with no log;

load from newterms.unl insert into go_term ;

--rollback work;
commit work;
