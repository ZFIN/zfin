**********************************************
** README at
**   /research/zusers/peirans/GXP/Talbot/script
***********************************************    
===============================
=== Talbot GXP data load
===============================

--------------------
-- File collection
---------------------
   Download package from http://cegs.stanford.edu/download/

   Uncompress the package, it supposed to contain image files, cegs_stage_codes.txt, cegs_view_codes.txt, expression.txt, gene.txt, image_expr.txt and keywords.txt. If cegs_stage_codes.txt and cegs_view_codes.txt are missing, use the ones from a previous load. Those are static files. 

   At embryonix, create a new directory e.g. cegs#_date to hold the above input files, and scripts and result files. Within the folder, put image files into a subfolder images/ . 

   Copy over scripts from ZFIN_WWW/server_apps/data_transfer/GXP folder and its subfolder Talbot/.
 
-------------------
-- Spellcheck 
--------------------
    At the newly created directory, spell check expression.txt.
   
    $command$  : 
     
        > ispell -p ispell_common expression.txt 

------------------------- 
-- Image processing
--------------------------
 
    $executables$:  thumbnail.sh, processImage.sh      
    $command$    :

          > mv image_expr.txt  images.txt   
    
    Use "less" command to check a .txt file, if you see ^M in the file, 
    you need to convert each .txt file into UNIX format by:

	  > tr '\r' '\n' < input_file > output_file
          > mv output_file input_file

    then

	  > processImage.sh labname [release_type]

	  labname:                  Talbot
    
    $resulted files$:  images.dim	
    $description$ :
      The script does image reality check between the JPG files sent and images.txt. The output first lists JPG files sent but not included in the images.txt file, then it lists entries in images.txt file but no JPGs sent. 
      For the first case, most of the cases, it is safe to answer "y" to continue and let the scripts delete the additional JPG images. If to be extra safe, email Ceri to contact Talbot lab. 
      For the second case, better let Ceri contact the lab. 
      (If the output are overwhelming, compare IMGTMP/imgjpg.list and IMGTMP/imgname.list humanly. )

      The second half of the program calls thumbnail.sh to generate thumbnail images, upon finish, it checks for completeness. 


--------------------------------------------------
-- Preload processing: Parsing, Blasting
--------------------------------------------------
   
    $note$ : 
	* check cegs_stage_codes.txt to make sure for example, 5-somite is chaged to 5-9 somites.
	* check expression.txt and images.txt for stage 0 or view 0 references, those need to be sent back for corrections. 
	* Update your test database and source the environment. The scripts would inherit environment from the running shell.
        * Update zfin blast (you need the 'select' permission on almdb)  	
	/research/zblastfiles/users/peirans/Scripts/ZFIN/processZFIN.pl 0

    $executables$:  parseTalbot.pl blast2tab.pl 
		    filterBlast.pl talbotData2Unl.sh

    $command$    :

	> talbotData2Unl.sh <your_db_name>

    $resulted files$:   probes.unl
			expression.unl 
			keywords.unl 
			images.unl 
			authors.unl 
			(is_gene.unl)
			(blast2zfin.scnd)
                        (blast2zfin.third)	
    $description$ :
	This master script calls parseTalbot.pl first, which incorporate cegs_stage_codes.txt and cegs_view_codes.txt into expression, keywords, and images files, and generates .unl files for loading. 
	It also interact with database to query the accession number and check the consistency of Talbot naming with ZFIN naming.

	- Names in Talbot gene.txt file:
          There are three name columns in gene.txt files:
            o name -- 3rd column
            o other_names -- 4th column
            o long_name   -- 5th column
          Ignore long_name. In normal scenario, 
            o name column holds gene symbol 
            o other_names column holds clone name. 
          However, it happens that
            a). when there is no gene symbol, clone name gets put into the name column 
	    b). gene symbol and clone name switched position
          we handles case a) as if that is a rule. For case b) we query the gene symbol
          agaist zfin marker table, and generate an error message when no match. We will
          then manually correct the error. 

	- Check accession number: 
	1) matches >1 genes (direct + encodes relationship) --> parseTalbot.err; 
	2) matches one gene, 
	    different from what Talbot provided --> parseTalbot.err
            symbol or previous name is the same as what Talbot provided 
            or gene name is absent from Talbot file               --> probes.unl
	3) matches 0, 
	    if gene sym is provided but doesn't match a zfin gene --> parseTalbot.err
	    no matter whether gene sym is provided --> probes.unl & acc4blast.txt 
	
	Upon error, the script exit. Work out the error with curators.
        For naming conflicts:
	  - either curators merge genes, use Talbot lab's gene assignment
          - or change Talbot's gene assignment to Zfin assignment
        For Gene sym not found:
          - either switch the gene name and clone name into the correct columns
          - or delete the bad gene sym, let the script creates fake genes

        If all consistent, but unknown accession is detected, the master script would blasts acc4blast.txt against zfin cdna database. 


----------------
-- Loading
----------------

    $note$ : Test load on your database and almostdb before running on production. 
    $executables$: pre_gxp_load.sql gxp_load_func.sql post_gxp_load.sql
		   gxp_load_quantity_check.sql load_gxp.sh

    $command$    :

	> load_gxp.sh <db_name> <lab_name> [release_type]

        lab_name   :     Thisse /Talbot
        release_type:    fr/cb

    $description$ :
	This master script first calls pre_gxp_load.sql to load the files into a set of tables and conduct quality check with zfin db. Errors are written to separate .err file. The script would exit on any error with temp tables cleaned up. (Error file description is provided below, read first one at least!) Upon success, it executes the gxp_load_func.sql and then uses the SPL function with a set of predefined parameters to load the data into database. If the load fails with exit value "1", check /tmp/gxp_load_exception for reasons. If the load successes with "0", the gxp_load_quantity_check.sql would generate related table contents comparison report. Finally, you would choose to clean up all the temporary tables right away, or keep the table for diagnose and run gxp_load_cleanup.sql later. 


---------------------
-- Appendix
---------------------

 Do a "ls -l *.err";
    1) exist_same_xpat_experiment_from_directsub.err: 
	When there exists an expression experiment record using the same probe and is also from direct submission, it is highly possible to be from the same submission. Upon this error, check if the existing one has the same submission source, if yes, send to curator to contact the source for correction. Otherwise, ignore this error by commenting out the exit code from load_gxp.sh after all the other errors are fixed. 
	We have seen this error a couple times, it either requires a deletion of misplaced expression data or a switch of the expression data from one clone to another. Peiran has a small SQL file to deal with this, and will create a SPL routine into CVS.
 
    2) unknown_probelib.err  : there might be an alias library name in zfin    

    3) prb_without_xpat.err  : ask curator if we want to only load clone info or delete the entry.

    4) dup_xpat.err : xpat data with same clone name, same start and end stage, delete one. 

    5) xpat_stg_unknown.err: stage not in zfin stage table. (not for thisse but talbot)

    6) keywords.undef.err: keywords not in anatomical dictionary.

    7) keywords_stgerr.err: fail anatitem_overlaps_stg_window check

    8) kwd_xpat_unconsistent.err: keyword's stage not in expression.unl(txt) file

    9) fimg_preparation_unknown.err

    10) fimg_view_unknow.err

    11) img_xpat_unconsist.err: image stage not in xpat file

    12) suthor_dup.err: duplicate entry in author file

    13) non_zfin_author.err: the author doesn't have an existing ZFIN person record
    14) obsolete_gene.err: the gene id in is_gene.unl file is obsolete in zfin. 

    *) xpatstg_withno_kwd_img.del: There are default stages defined in Thisse template. Occasionally some are left in with no data added. The script identify them by exp_found as "t", comments as "No comments", no keywords and no images. Those are not loaded.  

