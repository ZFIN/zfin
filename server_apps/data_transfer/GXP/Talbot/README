**********************************************
** README at
**   /research/zusers/peirans/GXP/Talbot/script
***********************************************    
===============================
=== Talbot GXP data load
===============================

--------------------
-- File collection
---------------------
   Download package from http://cegs.stanford.edu/download/

   Uncompress the package, look for images/, cegs_stage_codes.txt, cegs_view_codes.txt, expression.txt, gene.txt, image_expr.txt and keywords.txt.

   At embryonix, create a new directory, and transfer the above files to it. 
 
-------------------
-- Spellcheck 
--------------------
    At the newly created directory, spell check expression.txt.
   
    $command$  : 
     
        > ispell -p ispell_common expression.txt 

------------------------- 
-- Image processing
--------------------------
 
    $executables$:  thumbnail.sh, processImage.sh      
    $command$    :

          > mv image_expr.txt  images.txt   
	  > processImage.sh labname [release_type]

	  labname:                  Thisse / Talbot
          release_type: 	    cb    with annotation
          (in case of Thisse)       fr    without annotation
    
    $resulted files$:  images.dim	
    $description$ :
	It creates Imagesdir/ and move all .jpg into it. It does image reality check with images.txt file, if no missed entries reported, answer "y" to continue when it prompts, otherwise, answer "n". If it reports image files that are not in the images.txt file, just delete the images. In case of image files missing, let Ceri know.
	The second half of the program calls thumbnail.sh to generate thumbnail images, upon finish, it checks for completeness. Answer "y" to finish with cleanup if no missed images reported, otherwise, answer "n" to quit and investigate.


--------------------------------------------------
-- Preload processing: Parsing, Blasting
--------------------------------------------------
   
    $note$ : 
	* check cegs_stage_view.txt to make sure for example, 5-somite is chaged to 5-9 somites.
	* Update your test database and source the environment. The scripts would inherit environment from the running shell.
        * Update zfin blast (you need the 'select' permission on almdb)  	
	/research/zblastfiles/users/peirans/Scripts/ZFIN/processZFIN.pl 0

    $executables$:  parseTalbot.pl blast2tab.pl 
		    filterBlast.pl talbotData2Unl.sh

    $command$    :

	> talbotData2Unl.sh <your_db_name>

    $resulted files$:   probes.unl
			expression.unl 
			keywords.unl 
			images.unl 
			authors.unl 
			(is_gene.unl)
			(blast2zfin.scnd)
                        (blast2zfin.third)	
    $description$ :
	This master script calls parseTalbot.pl first, which incorporate cegs_stage_codes.txt and cegs_view_codes.txt into expression, keywords, and images files, and generates .unl files for loading. 
	It also interact with database to query the accession number and check the consistency of Talbot naming with ZFIN naming.
	Check accession number: 
	1) matches >1 genes (direct + encodes relationship) --> parseTalbot.err; 
	2) matches 1, 
	     different from what Talbot provides --> parseTalbot.err
             same                                --> probes.unl
	3) matches 0, 
	     the gene sym provided, and validate in ZFIN --> probes.unl
             the gene sym provided, not present in ZFIN  --> parseTalbot.err
             no gene sym                          -->  probes.unl & acc4blast.txt 
	
	Upon error, the script exit. Please send the parseTalbot.err file to curator for correction. If all consistent, but unknown accession is detected, the master script would blasts acc4blast.txt against zfin cdna database. 


----------------
-- Loading
----------------

    $note$ : Test load on your database and almostdb before running on production. 
    $executables$: pre_gxp_load.sql gxp_load_func.sql post_gxp_load.sql
		   gxp_load_quantity_check.sql load_gxp.sh

    $command$    :

	> load_gxp.sh <db_name> <lab_name> [release_type]

        lab_name   :     Thisse /Talbot
        release_type:    fr/cb

    $description$ :
	This master script first calls pre_gxp_load.sql to load the files into a set of tables and conduct quality check with zfin db. Errors are written to separate .err file. The script would exit on any error with temp tables cleaned up. (Error file description is provided below, read first one at least!) Upon success, it executes the gxp_load_func.sql and then uses the SPL function with a set of predefined parameters to load the data into database. If the load fails with exit value "1", check /tmp/gxp_load_exception for reasons. If the load successes with "0", the gxp_load_quantity_check.sql would generate related table contents comparison report. Finally, you would choose to clean up all the temporary tables right away, or keep the table for diagnose and run gxp_load_cleanup.sql later. 


---------------------
-- Appendix
---------------------

 Do a "ls -l *.err";
    1) exist_same_xpat_experiment_from_directsub.err: 
	When there exists an expression experiment record using the same probe and is also from direct submission, it is highly possible to be from the same submission. Upon this error, check if the existing one has the same submission source, if yes, send to curator to contact the source for correction. Otherwise, ignore this error by commenting out the exit code from load_gxp.sh after all the other errors are fixed. 
	We have seen this error a couple times, it either requires a deletion of misplaced expression data or a switch of the expression data from one clone to another. Peiran has a small SQL file to deal with this, and will create a SPL routine into CVS.
 
    2) unknown_probelib.err  : there might be an alias library name in zfin    

    3) prb_without_xpat.err  : ask curator if we want to only load clone info or delete the entry.

    4) dup_xpat.err : xpat data with same clone name, same start and end stage, delete one. 

    5) xpat_stg_unknown.err: stage not in zfin stage table. (not for thisse but talbot)

    6) keywords.undef.err: keywords not in anatomical dictionary.

    7) keywords_stgerr.err: fail anatitem_overlaps_stg_window check

    8) kwd_xpat_unconsistent.err: keyword's stage not in expression.unl(txt) file

    9) fimg_preparation_unknown.err

    10) fimg_view_unknow.err

    11) img_xpat_unconsist.err: image stage not in xpat file

    12) suthor_dup.err: duplicate entry in author file

    13) non_zfin_author.err: the author doesn't have an existing ZFIN person record
    14) obsolete_gene.err: the gene id in is_gene.unl file is obsolete in zfin. 

    *) xpatstg_withno_kwd_img.del: There are default stages defined in Thisse template. Occasionally some are left in with no data added. The script identify them by exp_found as "t", comments as "No comments", no keywords and no images. Those are not loaded.  

