<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.jboss.org/dtd/hibernate/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="org.zfin.sequence" default-access="field">

    <typedef class="org.zfin.framework.StringEnumValueUserType" name="recordAttributionSourceType">
        <param name="enumClassname">org.zfin.infrastructure.RecordAttribution$SourceType</param>
    </typedef>

    <typedef class="org.zfin.framework.StringEnumValueUserType" name="displayGroupName">
        <param name="enumClassname">org.zfin.sequence.DisplayGroup$GroupName</param>
    </typedef>

    <typedef class="org.zfin.framework.StringEnumValueUserType" name="organism">
        <param name="enumClassname">org.zfin.Species$Type</param>
    </typedef>

    <class name="org.zfin.sequence.ReferenceDatabase" table="foreign_db_contains">
        <id name="zdbID" type="string">
            <column name="fdbcont_zdb_id" not-null="true"/>
            <generator class="org.zfin.database.ZdbIdGenerator"> <param name="type">FDBCONT</param>
                <param name="insertActiveData">true</param>
            </generator>
        </id>
        <!--Perhaps the class column should change; species is really common name, we don't want to display "Homo Sapiens", human rather-->
        <property name="organism" column="fdbcont_organism_common_name" not-null="true" />
        <many-to-one name="foreignDBDataType" column="fdbcont_fdbdt_id" class="org.zfin.sequence.ForeignDBDataType" not-null="true" lazy="no-proxy"/>
        <many-to-one name="foreignDB" column="fdbcont_fdb_db_id" class="org.zfin.sequence.ForeignDB" not-null="true" lazy="no-proxy"/>
        <many-to-one name="primaryBlastDatabase" column="fdbcont_primary_blastdb_zdb_id" class="org.zfin.sequence.blast.Database" not-null="true" lazy="no-proxy"/>

        <bag name="relatedBlastDbs" table="int_fdbcont_analysis_tool">
            <key column="ifat_fdbcont_zdb_id"/>
            <many-to-many class="org.zfin.sequence.blast.Database" column="ifat_blastdb_zdb_id"/>
        </bag>

        <set name="displayGroupMembers" lazy="true" table="foreign_db_contains_display_group_member" inverse="true">
            <key column="fdbcdgm_fdbcont_zdb_id"/>
            <one-to-many class="org.zfin.sequence.DisplayGroupMember"/>
        </set>

        <set name="validationRules" table="reference_database_validation_rule" inverse="true" cascade="all">
            <key column="fdbcvr_fdbcont_zdb_id"/>
            <one-to-many class="org.zfin.sequence.ReferenceDatabaseValidationRule"/>
        </set>
    </class>

    <class name="org.zfin.sequence.DisplayGroup" table="foreign_db_contains_display_group">
        <id name="id">
            <column name="fdbcdg_pk_id" not-null="true"/>
            <generator class="identity"/>
        </id>

        <property name="groupName" column="fdbcdg_name" not-null="true" type="displayGroupName" />
        <property name="definition" column="fdbcdg_definition" not-null="true"/>


        <set name="displayGroupMembers" lazy="true" cascade="all">
            <key column="fdbcdgm_group_id"/>
            <one-to-many class="org.zfin.sequence.DisplayGroupMember"/>
        </set>
    </class>

    <class name="org.zfin.sequence.DisplayGroupMember" table="foreign_db_contains_display_group_member">
        <id name="id">
            <column name="fdbcdgm_pk_id" not-null="true"/>
            <generator class="identity"/>
        </id>

        <property name="canAdd" column="fdbcdgm_can_add" type="boolean"/>
        <property name="canEdit" column="fdbcdgm_can_edit" type="boolean"/>
        <property name="canDelete" column="fdbcdgm_can_delete" type="boolean"/>
        <property name="canView" column="fdbcdgm_can_view" type="boolean"/>


        <many-to-one name="displayGroup" class="org.zfin.sequence.DisplayGroup" column="fdbcdgm_group_id" not-null="true" />
        <many-to-one name="referenceDatabase" class="org.zfin.sequence.ReferenceDatabase" column="fdbcdgm_fdbcont_zdb_id" not-null="true" />
    </class>

    <class name="org.zfin.sequence.ReplacedAccessionNumber" table="replaced_accession_number">
        <composite-id>
            <key-property name="oldAccessionNumber" column="ran_old_acc_num" type="string"/>
            <key-property name="newAccessionNumber" column="ran_new_acc_num" type="string"/>
        </composite-id>
    </class>

    <class name="org.zfin.sequence.ZfinAccessionNumber" table="zfin_accession_number">
        <id name="zAccNum">
            <column name="za_acc_num" not-null="true"/>
        </id>
    </class>


    <!--       <set name="linkageGroups" lazy="true">-->
    <!--            <key column="linkage_group_id"/>-->
    <!--            <one-to-many class="org.zfin.sequence.LinkageGroup"/>-->
    <!--        </set>-->
    <!--        <set name="relatedAccessions" lazy="true">-->
    <!--            <key column="accession_id"/>-->
    <!--            <one-to-many class="org.zfin.sequence.LinkageGroup"/>-->
    <!--        </set>-->


    <!--    Sierra may  or may not be adding this: No, lets get this from existing mappings/Sierra-->
    <!--    <class name="org.zfin.sequence.LinkageGroup" table="linkagegrouop">-->
    <!--        <id name="zdbID" type="string">-->
    <!--            <column name="linkagegroup_zdb_id" not-null="true"/>-->
    <!--            <generator class="org.zfin.database.ZdbIdGenerator">-->
    <!--                <param name="type">LINK</param>-->
    <!--            </generator>-->
    <!--        </id>-->
    <!--    </class>-->

    <!--    <database-object>
         <create>
              create function xdbget(
                 blastdb_abbrev varchar(30),
                 blastdb_type varchar(5),
                 accession varchar(50)
                 ) returning lvarchar
                 with (class = 'UDR')
                 external name "/research/zcentral/www_homes/hoover/lib/DB_functions/xdbget.so"
                 language c
              end function;
          </create>
          <drop>
              drop function xdbget ;
          </drop>
         </database-object>

         <sql-query name="xdbget" callable="true">
          {execute function xdbget(:blastDbAbbrev,:blastDbType,:accNum)}
         </sql-query>
    -->
</hibernate-mapping>

