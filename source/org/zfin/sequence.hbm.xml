<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.jboss.org/dtd/hibernate/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="org.zfin.sequence" default-access="field">

    <typedef class="org.zfin.framework.StringEnumValueUserType" name="foreignDatabaseSuperType">
        <param name="enumClassname">org.zfin.sequence.ForeignDBDataType$SuperType</param>
    </typedef>

    <typedef class="org.zfin.framework.StringEnumValueUserType" name="foreignDatabaseDataType">
        <param name="enumClassname">org.zfin.sequence.ForeignDBDataType$DataType</param>
    </typedef>

    <typedef class="org.zfin.framework.StringEnumValueUserType" name="foreignDBAvailableName">
        <param name="enumClassname">org.zfin.sequence.ForeignDB$AvailableName</param>
    </typedef>

    <typedef class="org.zfin.framework.StringEnumValueUserType" name="displayGroupName">
        <param name="enumClassname">org.zfin.sequence.DisplayGroup$GroupName</param>
    </typedef>

    <typedef class="org.zfin.framework.StringEnumValueUserType" name="organism">
        <param name="enumClassname">org.zfin.orthology.Species</param>
    </typedef>

    <class name="org.zfin.sequence.Accession" table="accession_bank">
        <id name="ID" type="long">
            <column name="accbk_pk_id" not-null="true"/>
            <generator class="identity"/>
        </id>
        <property name="number" column="accbk_acc_num"/>
        <property name="defline" column="accbk_defline"/>
        <property name="abbreviation" column="accbk_abbreviation"/>
        <property name="length" column="accbk_length" type="integer"/>
        <many-to-one name="referenceDatabase" column="accbk_fdbcont_zdb_id" class="org.zfin.sequence.ReferenceDatabase" not-null="true" lazy="no-proxy"/>


        <!-- <set name="relatedEntrezAccessions" table="entrez_to_protein" lazy="true">
            <key column="ep_protein_acc_num"/>
            <one-to-many class="EntrezProtRelation"/>
        </set>-->
        <set name="relatedEntrezAccessions" inverse="false" lazy="true">
            <key column="accbk_pk_id"/>
            <!--<key foreign-key="accbk_pk_id" column="ep_pk_id"/>-->
            <one-to-many class="EntrezProtRelation"/>
            <loader query-ref="loadEntrezForProtein"/>
        </set>


        <set name="dbLinks" inverse="false" lazy="true">
            <key column="accbk_pk_id"/>
            <!--<key foreign-key="accbk_pk_id" column="dblink_zdb_id"/>-->
            <one-to-many class="org.zfin.sequence.DBLink"/>
            <loader query-ref="loadDBLinksForAccession"/>
        </set>

        <set name="blastableMarkerDBLinks" inverse="false" lazy="true">
            <key column="accbk_pk_id" />
            <!--<key foreign-key="accbk_pk_id" column="dblink_zdb_id"/>-->
            <one-to-many class="org.zfin.sequence.MarkerDBLink"/>
            <loader query-ref="loadBlastableDBLinksForAccession"/>
        </set>

    </class>






    <class name="org.zfin.sequence.ReferenceDatabase" table="foreign_db_contains">
        <id name="zdbID" type="string">
            <column name="fdbcont_zdb_id" not-null="true"/>
            <generator class="org.zfin.database.ZdbIdGenerator"> <param name="type">FDBCONT</param>
                <param name="insertActiveData">true</param>
            </generator>
        </id>
        <!--Perhaps the class column should change; species is really common name, we don't want to display "Homo Sapiens", human rather-->
        <property name="organism" column="fdbcont_organism_common_name" not-null="true" />
        <many-to-one name="foreignDBDataType" column="fdbcont_fdbdt_id" class="org.zfin.sequence.ForeignDBDataType" not-null="true" lazy="no-proxy"/>
        <many-to-one name="foreignDB" column="fdbcont_fdb_db_id" class="org.zfin.sequence.ForeignDB" not-null="true" lazy="no-proxy"/>
        <many-to-one name="primaryBlastDatabase" column="fdbcont_primary_blastdb_zdb_id" class="org.zfin.sequence.blast.Database" not-null="true" lazy="no-proxy"/>

        <!--<set name="relatedBlastDbs" table="int_fdbcont_analysis_tool" >-->
        <!--<key column="ifat_fdbcont_zdb_id"/>-->
        <!--<many-to-many class="org.zfin.sequence.blast.Database" column="ifat_blastdb_zdb_id"/>-->
        <!--</set>-->

        <bag name="relatedBlastDbs" table="int_fdbcont_analysis_tool">
            <key column="ifat_fdbcont_zdb_id"/>
            <many-to-many class="org.zfin.sequence.blast.Database" column="ifat_blastdb_zdb_id"/>
        </bag>

        <set name="displayGroups" lazy="true" table="foreign_db_contains_display_group_member" inverse="true">
            <key column="fdbcdgm_fdbcont_zdb_id"/>
            <many-to-many class="org.zfin.sequence.DisplayGroup" column="fdbcdgm_group_id"/>
        </set>
    </class>


    <class name="org.zfin.sequence.ForeignDB" table="foreign_db">
        <id name="dbID" type="long">
            <column name="fdb_db_pk_id" not-null="true"/>
            <generator class="identity"/>
        </id>
        <!--<property name="baseURL" column=""/> -->
        <property name="dbName" column="fdb_db_name" type="foreignDBAvailableName"/>
        <property name="dbUrlPrefix" column="fdb_db_query"/>
        <property name="dbUrlSuffix" column="fdb_url_suffix"/>
        <property name="significance" column="fdb_db_significance"/>
        <property name="displayName" column="fdb_db_display_name"/>
    </class>


    <class name="org.zfin.sequence.DisplayGroup" table="foreign_db_contains_display_group">
        <id name="id">
            <column name="fdbcdg_pk_id" not-null="true"/>
            <generator class="identity"/>
        </id>

        <property name="groupName" column="fdbcdg_name" not-null="true" type="displayGroupName" />
        <property name="definition" column="fdbcdg_definition" not-null="true"/>

        <set name="referenceDatabases" lazy="true" table="foreign_db_contains_display_group_member">
            <key column="fdbcdgm_group_id"/>
            <many-to-many class="org.zfin.sequence.ReferenceDatabase" column="fdbcdgm_fdbcont_zdb_id"/>
        </set>
    </class>

    <!--<class name="org.zfin.sequence.DisplayGroupMember" table="foreign_db_contains_display_group_member">-->
    <!--<id name="id">-->
    <!--<column name="fdbcdgm_pk_id" not-null="true"/>-->
    <!--</id>-->
    <!--<many-to-one name="referenceDatabase" class="org.zfin.sequence.ReferenceDatabase" column="fdbcdgm_fdbcont_zdb_id" not-null="true"/>-->
    <!--<many-to-one name="displayGroup" class="org.zfin.sequence.DisplayGroup" column="fdbcdgm_group_id" not-null="true"/>-->
    <!--</class>-->

    <class name="org.zfin.sequence.ForeignDBDataType" table="foreign_db_data_type">
        <id name="dataTypeID" type="long">
            <column name="fdbdt_pk_id" not-null="true"/>
            <generator class="identity"/>
        </id>

        <property name="dataType" column="fdbdt_data_type" type="foreignDatabaseDataType"/>
        <property name="superType" column="fdbdt_super_type" type="foreignDatabaseSuperType"/>
        <property name="displayOrder" column="fdbdt_display_order"/>

    </class>

    <class name="org.zfin.sequence.DBLink" table="db_link" abstract="true">
        <id name="zdbID" type="string">
            <column name="dblink_zdb_id" not-null="true"/>
            <generator class="org.zfin.database.ZdbIdGenerator">
                <param name="type">DBLINK</param>
                <param name="insertActiveData">true</param>
            </generator>
        </id>

        <!--        The types for dblink are orthology, anatomy or marker.-->
        <!--        These are guaranteed by the different procedures.-->
        <!--CASE substr(dblink_linked_recid,0,9)-->
        <discriminator type="string"
                       formula="(
                    CASE dblink_linked_recid[1,9]
                    WHEN 'ZDB-ORTHO' THEN 'ORTH'
                    WHEN 'ZDB-ANAT-' THEN 'ANAT'
                    WHEN 'ZDB-TSCRI' THEN 'TSCR'
                    WHEN 'ZDB-ALT' THEN 'ALT'
                    ELSE  'MARK'
                  END
                )"
                />

        <property name="dataZdbID" column="dblink_linked_recid" insert="false" update="false" not-null="true"/>
        <property name="accessionNumber" column="dblink_acc_num" not-null="true"/>
        <property name="accessionNumberDisplay" column="dblink_acc_num_display" not-null="false" type="string"/>
        <property name="linkInfo" column="dblink_info" not-null="false" type="string"/>
        <property name="length" column="dblink_length"/>
        <many-to-one name="referenceDatabase" column="dblink_fdbcont_zdb_id"
                     class="org.zfin.sequence.ReferenceDatabase" not-null="true" lazy="no-proxy"/>

        <!--<many-to-one name="version" column="dblink_acc_num"-->
        <!--class="java.lang.Integer" not-null="false" lazy="no-proxy"/>-->

        <set name="publications" lazy="true">
            <key column="recattrib_data_zdb_id"/>
            <one-to-many class="org.zfin.infrastructure.PublicationAttribution"/>
        </set>

        <subclass name="org.zfin.sequence.TranscriptDBLink" discriminator-value="TSCR">
            <many-to-one name="transcript" column="dblink_linked_recid" class="org.zfin.marker.Transcript" not-null="true"/>
        </subclass>
        <subclass name="org.zfin.sequence.MarkerDBLink" discriminator-value="MARK" >
            <many-to-one name="marker" column="dblink_linked_recid" class="org.zfin.marker.Marker" not-null="true" fetch="select"/>
        </subclass>
        <subclass name="org.zfin.sequence.OrthologueDBLink" discriminator-value="ORTH">
            <many-to-one name="orthologue" column="dblink_linked_recid" class="org.zfin.orthology.Orthologue" not-null="true"/>
        </subclass>
        <subclass name="org.zfin.anatomy.AnatomyDBLink" discriminator-value="ANAT">
            <many-to-one name="anatomyItem" column="dblink_linked_recid" class="org.zfin.ontology.GenericTerm" not-null="true"/>
        </subclass>
        <subclass name="org.zfin.sequence.FeatureDBLink" discriminator-value="ALT" >
            <many-to-one name="feature" column="dblink_linked_recid" class="org.zfin.feature.Feature" not-null="true" fetch="select"/>
        </subclass>
    </class>


    <class name="org.zfin.sequence.Entrez" table="entrez_gene">
        <id name="entrezAccNum" type="string">
            <column name="eg_acc_num" not-null="true"/>
            <generator class="native"/>
        </id>
        <!--Perhaps the class column should change; species is really common name, we don't want to display "Homo Sapiens", human rather-->
        <property name="abbreviation" column="eg_symbol" type="string"/>
        <property name="name" column="eg_name" type="string"/>
        <set name="relatedProteinAccessions" table="entrez_to_protein" lazy="true">
            <key column="ep_entrez_acc_num"/>
            <one-to-many class="EntrezProtRelation"/>
        </set>
        <set name="relatedOMIMAccessions" table="entrez_to_xref" lazy="true">
            <key column="ex_entrez_acc_num"/>
            <one-to-many class="EntrezOMIM"/>
        </set>
        <set name="relatedMGIAccessions" table="entrez_to_xref" lazy="true">
            <key column="ex_entrez_acc_num"/>
            <one-to-many class="EntrezMGI"/>
        </set>
    </class>

    <class name="org.zfin.sequence.EntrezProtRelation" table="entrez_to_protein">
        <id name="epID" type="long">
            <column name="ep_pk_id" not-null="true"/>
            <generator class="identity"/>
        </id>

        <property name="organism" column="ep_organism_common_name" type="organism"/>
        <property name="proteinAccNum" column="ep_protein_acc_num" not-null="true"/>
        <many-to-one name="entrezAccession" column="ep_entrez_acc_num"
                     class="org.zfin.sequence.Entrez" not-null="true" lazy="no-proxy"/>

    </class>

    <class name="org.zfin.sequence.EntrezOMIM" table="entrez_to_xref">

        <composite-id>
            <key-property name="entrezAccessionNum" column="ex_entrez_acc_num" type="string"/>
            <key-property name="omimAccession" column="ex_xref" type="string"/>
        </composite-id>
        <many-to-one name="entrezAccession" class="org.zfin.sequence.Entrez"
                     column="ex_entrez_acc_num" lazy="no-proxy" not-null="true" insert="false" update="false"/>

    </class>

    <class name="org.zfin.sequence.EntrezMGI" table="entrez_to_xref">

        <composite-id>
            <key-property name="entrezAccessionNum" column="ex_entrez_acc_num" type="string"/>
            <key-property name="mgiAccession" column="ex_xref" type="string"/>
        </composite-id>
        <many-to-one name="entrezAccession" class="org.zfin.sequence.Entrez"
                     column="ex_entrez_acc_num" lazy="no-proxy" not-null="true" insert="false" update="false"/>

    </class>

    <class name="org.zfin.sequence.ReplacedAccessionNumber" table="replaced_accession_number">
        <composite-id>
            <key-property name="oldAccessionNumber" column="ran_old_acc_num" type="string"/>
            <key-property name="newAccessionNumber" column="ran_new_acc_num" type="string"/>
        </composite-id>
    </class>

    <class name="org.zfin.sequence.ZfinAccessionNumber" table="zfin_accession_number">
        <id name="zAccNum">
            <column name="za_acc_num" not-null="true"/>
        </id>
    </class>


    <!--       <set name="linkageGroups" lazy="true">-->
    <!--            <key column="linkage_group_id"/>-->
    <!--            <one-to-many class="org.zfin.sequence.LinkageGroup"/>-->
    <!--        </set>-->
    <!--        <set name="relatedAccessions" lazy="true">-->
    <!--            <key column="accession_id"/>-->
    <!--            <one-to-many class="org.zfin.sequence.LinkageGroup"/>-->
    <!--        </set>-->


    <!--    Sierra may  or may not be adding this: No, lets get this from existing mappings/Sierra-->
    <!--    <class name="org.zfin.sequence.LinkageGroup" table="linkagegrouop">-->
    <!--        <id name="zdbID" type="string">-->
    <!--            <column name="linkagegroup_zdb_id" not-null="true"/>-->
    <!--            <generator class="org.zfin.database.ZdbIdGenerator">-->
    <!--                <param name="type">LINK</param>-->
    <!--            </generator>-->
    <!--        </id>-->
    <!--    </class>-->




    <sql-query name="loadEntrezForProtein">
        <return alias="acc" class="org.zfin.sequence.Accession"/>
        <return-join alias="entrez" property="acc.relatedEntrezAccessions"/>
        select
        acc.accbk_pk_id ,
        entrez.ep_pk_id ,
        entrez.ep_organism_common_name ,
        entrez.ep_protein_acc_num ,
        entrez.ep_entrez_acc_num,
        av.accver_version,
        av.accver_acc_num
        from
        entrez_to_protein  entrez
        left outer join accession_bank acc
        on entrez.ep_protein_acc_num=acc.accbk_acc_num
        left outer join accession_version av on acc.accbk_acc_num=av.accver_acc_num
        where
        acc.accbk_pk_id=?
    </sql-query>

    <sql-query name="loadDBLinksForAccession">
        <return alias="acc" class="org.zfin.sequence.Accession"/>
        <return-join alias="link" property="acc.dbLinks"/>
        select
        acc.accbk_pk_id ,
        link.dblink_zdb_id ,
        link.dblink_acc_num ,
        link.dblink_length ,
        link.dblink_fdbcont_zdb_id ,
        link.dblink_linked_recid ,
        link.dblink_acc_num_display,
        av.accver_version,
        av.accver_acc_num
        from
        db_link link
        join accession_bank acc
        on link.dblink_acc_num=acc.accbk_acc_num
        and link.dblink_fdbcont_zdb_id=acc.accbk_fdbcont_zdb_id
        left outer join accession_version av on acc.accbk_acc_num=av.accver_acc_num
        where
        acc.accbk_pk_id=?
    </sql-query>


    <!--    Note:  this should go away when the types are properly discriminated-->
    <sql-query name="loadBlastableDBLinksForAccession">
        <return alias="acc" class="org.zfin.sequence.Accession"/>
        <return-join alias="link" property="acc.blastableMarkerDBLinks"/>
        select
        acc.accbk_pk_id ,
        link.dblink_zdb_id ,
        link.dblink_acc_num ,
        link.dblink_length ,
        link.dblink_fdbcont_zdb_id ,
        link.dblink_linked_recid,
        link.dblink_acc_num_display,
        av.accver_version,
        av.accver_acc_num
        from db_link link
        join accession_bank acc on link.dblink_acc_num=acc.accbk_acc_num
        join foreign_db_contains fdbc on fdbc.fdbcont_zdb_id = link.dblink_fdbcont_zdb_id
        join foreign_db_data_type fdbdt on fdbc.fdbcont_fdbdt_id = fdbdt.fdbdt_pk_id
        left outer join accession_version av on acc.accbk_acc_num=av.accver_acc_num
        where acc.accbk_pk_id=?
        and fdbdt.fdbdt_super_type = 'sequence'
        and fdbdt.fdbdt_data_type in ( 'RNA','Polypeptide' )
    </sql-query>

    <!--    <database-object>
         <create>
              create function xdbget(
                 blastdb_abbrev varchar(30),
                 blastdb_type varchar(5),
                 accession varchar(50)
                 ) returning lvarchar
                 with (class = 'UDR')
                 external name "/research/zcentral/www_homes/hoover/lib/DB_functions/xdbget.so"
                 language c
              end function;
          </create>
          <drop>
              drop function xdbget ;
          </drop>
         </database-object>

         <sql-query name="xdbget" callable="true">
          {execute function xdbget(:blastDbAbbrev,:blastDbType,:accNum)}
         </sql-query>
    -->
</hibernate-mapping>

