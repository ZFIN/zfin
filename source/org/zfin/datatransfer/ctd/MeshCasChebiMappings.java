package org.zfin.datatransfer.ctd;import lombok.Data;import org.zfin.gwt.root.util.StringUtils;import java.util.*;import java.util.function.Function;import java.util.stream.Collectors;@Datapublic class MeshCasChebiMappings {    private Map<String, List<String>> meshCasMap = new HashMap<>();    private Map<String, List<String>> meshChebiMap = new HashMap<>();    private Map<String, List<String>> casChebiMap = new HashMap<>();    private Map<String, List<String>> chebiCasMap = new HashMap<>();    private Map<String, List<String>> casMeshMap = new HashMap<>();    private Map<String, List<String>> chebiMeshMap = new HashMap<>();    // CAS, Relation    private Set<MeshCasChebiRelation> oneToOneRelations = new HashSet<>();    private Map<String, MeshCasChebiRelation> uniqueRelationMap = new HashMap<>();    private Map<String, MeshCasChebiRelation> meshCasRelationMap = new HashMap<>();    private Map<String, MeshCasChebiRelation> casMeshRelationMap = new HashMap<>();    private Map<String, MeshCasChebiRelation> chebiCasRelationMap = new HashMap<>();    private Map<String, MeshCasChebiRelation> casChebiRelationMap = new HashMap<>();    public void addMeshCasRelations(List<MeshCasChebiRelation> relations) {        relations.forEach(relation -> casMeshRelationMap.put(relation.getCas(), relation));        relations.forEach(relation -> meshCasRelationMap.put(relation.getMesh(), relation));        createAtoBMapping(relations.stream()            .collect(Collectors.groupingBy(MeshCasChebiRelation::getMesh)), meshCasMap, MeshCasChebiRelation::getCas);        createAtoBMapping(relations.stream()            .filter(relation -> StringUtils.isNotEmpty(relation.getCas()))            .collect(Collectors.groupingBy(MeshCasChebiRelation::getCas)), casMeshMap, MeshCasChebiRelation::getMesh);        if (!chebiCasRelationMap.entrySet().isEmpty()) {            createUniqueMapping();        }    }    public void addChebiCasRelations(List<MeshCasChebiRelation> relations) {        relations.forEach(relation -> chebiCasRelationMap.put(relation.getChebi(), relation));        relations.forEach(relation -> casChebiRelationMap.put(relation.getCas(), relation));        createAtoBMapping(relations.stream()            .collect(Collectors.groupingBy(MeshCasChebiRelation::getChebi)), chebiCasMap, MeshCasChebiRelation::getCas);        createAtoBMapping(relations.stream()            .filter(relation -> StringUtils.isNotEmpty(relation.getCas()))            .collect(Collectors.groupingBy(MeshCasChebiRelation::getCas)), casChebiMap, MeshCasChebiRelation::getChebi);        if (!meshCasRelationMap.entrySet().isEmpty()) {            createUniqueMapping();        }    }    private void createUniqueMapping() {        Map<String, String> uniqueCasMeshMap = new HashMap<>();        casMeshMap.forEach((id, values) -> {            if (values.size() == 1)                uniqueCasMeshMap.put(id, values.get(0));        });        Map<String, String> uniqueChebiCasMap = new HashMap<>();        casChebiMap.forEach((s, values) -> {            if (values.size() == 1)                uniqueChebiCasMap.put(s, values.get(0));        });        uniqueCasMeshMap.forEach((casID, meshID) -> {            if (uniqueChebiCasMap.containsKey(casID)) {                MeshCasChebiRelation relation = new MeshCasChebiRelation();                relation.setCas(casID);                relation.setMesh(meshID);                String chebiID = casChebiRelationMap.get(casID).getChebi();                relation.setChebi(chebiID);                relation.setMeshName(casMeshRelationMap.get(casID).getMeshName());                relation.setChebiName(casChebiRelationMap.get(casID).getChebiName());                uniqueRelationMap.put(casID, relation);                uniqueRelationMap.put(meshID, relation);                uniqueRelationMap.put(chebiID, relation);                oneToOneRelations.add(relation);            }        });        System.out.println("There are " + (getUniqueRelationMap().size() / 3) + " unique MESH - CAS - CHEBI term relations");    }    private void createAtoBMapping(Map<String, List<MeshCasChebiRelation>> map, Map<String, List<String>> groupedMap, Function<MeshCasChebiRelation, String> getElement) {        map.forEach((aID, relations) -> groupedMap.put(aID, relations.stream().map(getElement).filter(StringUtils::isNotEmpty).toList()));        List<String> keysToBeRemoved = new ArrayList<>();        groupedMap.forEach((s, strings) -> {            if (strings.size() == 0)                keysToBeRemoved.add(s);        });        keysToBeRemoved.forEach(groupedMap::remove);    }    public Map<String, String> getMeshCasUnique() {        Map<String, String> map = new HashMap<>();        meshCasMap.forEach((s, values) -> {            if (values.size() == 1)                map.put(s, values.get(0));        });        return map;    }    public Map<String, String> getChebiCasUnique() {        Map<String, String> map = new HashMap<>();        chebiCasMap.forEach((s, values) -> {            if (values.size() == 1)                map.put(s, values.get(0));        });        return map;    }    public Map<String, String> getCasChebiUnique() {        Map<String, String> map = new HashMap<>();        casChebiMap.forEach((s, values) -> {            if (values.size() == 1)                map.put(s, values.get(0));        });        return map;    }    public Map<String, List<String>> getChebiCasMultiple() {        Map<String, List<String>> map = new HashMap<>();        chebiCasMap.forEach((s, values) -> {            if (values.size() > 1)                map.put(s, values);        });        return map;    }    public Map<String, List<MeshCasChebiRelation>> getChebiCasMulti() {        Map<String, List<MeshCasChebiRelation>> map = new HashMap<>();        chebiCasMap.forEach((chebiID, values) -> {            if (values.size() > 1) {                List<MeshCasChebiRelation> list = values.stream()                    .map(casID -> {                        MeshCasChebiRelation meshCasChebiRelation = casMeshRelationMap.get(casID);                        if (meshCasChebiRelation == null) {                            meshCasChebiRelation = new MeshCasChebiRelation();                            meshCasChebiRelation.setCas(casID);                        }                        meshCasChebiRelation.setChebi(chebiID);                        meshCasChebiRelation.setChebiName(chebiCasRelationMap.get(chebiID).getChebiName());                        return meshCasChebiRelation;                    }).toList();                map.put(chebiID, list);            }        });        return map;    }    public Map<String, List<MeshCasChebiRelation>> getCasChebiMulti() {        Map<String, List<MeshCasChebiRelation>> map = new HashMap<>();        casChebiMap.forEach((casID, values) -> {            if (values.size() > 1) {                List<MeshCasChebiRelation> list = values.stream()                    .map(chebiID -> {                        MeshCasChebiRelation meshCasChebiRelation = chebiCasRelationMap.get(chebiID);                        if (meshCasChebiRelation == null) {                            meshCasChebiRelation = new MeshCasChebiRelation();                            meshCasChebiRelation.setCas(chebiID);                        }                        meshCasChebiRelation.setChebiName(chebiCasRelationMap.get(chebiID).getChebiName());                        return meshCasChebiRelation;                    }).toList();                map.put(casID, list);            }        });        return map;    }    public Map<String, List<String>> getChebiCasMultipleNames() {        Map<String, List<String>> map = new HashMap<>();        chebiCasMap.forEach((chebi, values) -> {            if (values.size() > 1) {                ///MeshCasChebiRelation term = chebiCasRelations.stream().filter(meshCasChebiRelation -> meshCasChebiRelation.getChebi().equals(chebi)).findFirst().get();                List<String> meshRelations = new ArrayList<>(values.size());                values.forEach(cas -> {                    if (meshCasRelationMap.get(cas) != null)                        meshRelations.add(meshCasRelationMap.get(cas).getMeshName());                });                /// map.put(term.getChebiName(), meshRelations);            }        });        return map;    }    public Map<String, String> getCasMeshUnique() {        Map<String, String> map = new HashMap<>();        casMeshMap.forEach((s, values) -> {            if (values.size() == 1)                map.put(s, values.get(0));        });        return map;    }    public Map<String, List<String>> getCasChebiMultiple() {        Map<String, List<String>> map = new HashMap<>();        casChebiMap.forEach((s, values) -> {            if (values.size() > 1)                map.put(s, values);        });        return map;    }    public Map<String, String> getChebiMeshIdMap() {        return null;    }    public String getCasByChebi(String chebiID) {        return chebiCasRelationMap.get(chebiID).getCas();    }    public String getChebiByCas(String casID) {        return casMeshRelationMap.get(casID).getMesh();    }    public String getCasByMesh(String meshID) {        return meshCasRelationMap.get(meshID).getCas();    }    public String getMeshByCas(String casID) {        return casMeshRelationMap.get(casID).getMesh();    }    public String getMeshByChebi(String chebiID) {        return casMeshRelationMap.get(chebiID).getMesh();    }}