#!/private/bin/perl #-wT
# ----------------------------------------------------------------------
#  file name:  parse-multipart.perl
# 
#  Programmer:  Eck Doerry
#  Description: Parses a multipart encoded form, saving any file uploads locally, 
#  then encodes the data in normal &-seperated string and passes it all on to 
#  (Informix) Illustras WEBDRIVER program for processing. 
#  Presumably one would arrange for WEBDRIVER to insert data into the database.
# 
#  Modification History
#  Dec. 29 2000 tomc changed shebang  line 
#  from #!/local/bin/perl to  #!/private/bin/perl -wT 
# 
# -----------------------------------------------------------------------

require '<!--|ROOT_PATH|-->/<!--|CGI_BIN_DIR_NAME|-->/parse-form.perl';
require '<!--|ROOT_PATH|-->/<!--|CGI_BIN_DIR_NAME|-->/urlencode.perl';

# First call the PARSE_FORM routine to extract all the data into the associative
# array FORM-DATA. Any uploaded files will be stored in FILE-UPLOADS directory.

&parse_form(*form_data, "<!--|ROOT_PATH|-->/<!--|CGI_BIN_DIR_NAME|-->/file-uploads");


#Now build a FORM style parameter string to pass to WEBDRIVER

$paramstr = &build_urlencoded(*form_data);


# Now adjust the environment variables to fool the target process into thinking
# It is receiving an original POST (not multipart format) form.

$ENV{CONTENT_LENGTH}= length($paramstr);
$ENV{CONTENT_TYPE} = "application/x-www-form-urlencoded";


# The next few lines dump out the results to a file. This is a kludgy way of
# passing the paramstr to another process on STDIN in the following line.
# Normally one would just do something like "echo $paramstr | <target process>"
# but this won't work under http, because the httpd is listening for a return
# result on STDOUT --> it picks up the echoed data (thinking its form output) and
# promptly chokes on it. 
open(TEMP,">temp.out") || print "Could not open file\n";;
print TEMP $paramstr."\n";
close(TEMP);


# Finally, pass control to another process

#exec("./eck/hobbs-cgi.perl < temp.out"); # This is to sample converter output

exec("./Webdriver < temp.out");	# This one actually send output to Webdriver

#exec("echo $paramstr | ./parse-form.perl")  #Won't work under http, so have use above



