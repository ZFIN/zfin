#! /private/bin/perl -wT
###!/bin/sh
# 
#    Copy the inputs and outputs of Webdriver to file "lastpage" every time we run Webdriver.
# 
# Since arbitrary users cannot write to the cgi-bin directory, must create lastpage and pageinput
# and give everyone write permissions on them before running this script from Apache.

#echo "**************** New call at \c" >> lastpage
#date >> lastpage
#echo "----- Environment -----" >> lastpage
#/usr/ucb/printenv >> lastpage
#echo "----- Webdriver input -----" >> lastpage
#/bin/cat - | /bin/tee pageinput >> lastpage
#echo "\n----- Webdriver output -----" >> lastpage
#/bin/cat pageinput | /nfs/research/zfin/central/www_homes/dino/cgi-bin_dino/webdriver | /bin/tee -a lastpage

###  Dec. 27, 2000, Tom Conlin changed it to a perl script 
###  so webdriver is evoked via http instead of the commandline (as per D.C.)
{  ### mod it
use CGI  qw /:standard/;                # to read and write CGI 
use LWP::UserAgent;                     # to simulate a CGI form being used 
use HTTP::Request::Common qw/POST/;     # to supply a transport mechanisim for LWP 
use POSIX 'strftime';                   # clock
my $q = new CGI();                      # cgi object populated with the arguments this script was called with

print  "Content-Type: text/html; charset=ISO-8859-1 \r\n\r\n";
my $key;
my $qs  = $q->query_string();
my $bot = LWP::UserAgent->new();        # think mini-browser  
# I would prefer to go with a POSt here   
my $req = HTTP::Request->new('GET', 'http://<!--|DOMAIN_NAME|-->/<!--|CGI_BIN_DIR_NAME|-->/webdriver?'.$qs );# request we will send in the mini-browser 
   $req->header( 'Cookie' => 'ZDB_authorize='.$q->cookie('ZDB_authorize') );
my $rsp = $bot->request($req); # 'page' returned by mini-browser

open( LP, ">> <!--|ROOT_PATH|-->/<!--|CGI_BIN_DIR_NAME|-->/lastpage") || die "can't open lastpage"; # opening a file handle on lastpage named LP
print LP "**************** New call at ";
print LP  strftime('%r %A %B %d %Y', localtime) . "\n"; # recording the time
print LP  "----- Environment -----\n" ;
foreach  $key (sort keys (%ENV)) {                      # recording the enviroment
print LP $key, "=", $ENV{$key}, "|"};
print LP  "\n----- Webdriver input -----\n";
print LP  $qs."\n";                      # recording the input
print LP "\n----- Webdriver output -----\n"; 
print LP $rsp->content;   # recording the output
print LP "\n----- Request dump ----- \n";
print LP $req->as_string ."\n";
close LP;
print $rsp->content ."\n";      # forwarding the results to the user
}### ~mod it

